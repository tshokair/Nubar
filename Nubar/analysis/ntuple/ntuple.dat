*LOG
*---  Standard Titles File: ntuple.dat                26:Sep:2006
*---                 Banks: NTPC, NTPR
*LOG OFF
*----------------------------------------------------------------------------
*---
*---    Ntuple Control Bank.
*---
*---    Contact:  N. West,  Oxford.
*---
*---
*----------------------------------------------------------------------------
*DO   NTPC  1  -i(30I / 4H 1I )                      #.   NTuPl Control
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
#.      Bank           Supporting Bank          Supporting Bank
#.      Name               Name                    Offset
 
       'MAST    '         'none    '                 0
       'PRM_MAST'         'none    '                 0
 
#.      Current event Data Structure (see below for Permanent Data Structure).

       'EV      '         'MAST    '                -1
       'MC      '         'MAST    '                -2
       'EPED    '         'MAST    '                -6
       'CAST    '         'MAST    '                -10
       'CAAC    '         'MAST    '                -11
       'RLOG    '         'MAST    '                -25

       'FT      '         'EV      '                -1
       'PT      '         'EV      '                -2
       'PHL     '         'EV      '                -3
       'PN      '         'EV      '                -4
       'PF      '         'EV      '                -5
       'ZDAB    '         'EV      '                -6
       'PHS     '         'EV      '                -7
       'PLX     '         'EV      '                -8
       'PT0     '         'EV      '                -9
       'PIN     '         'EV      '                -10
       'PILX    '         'EV      '                -11
       'PIHL    '         'EV      '                -12
       'PIHS    '         'EV      '                -13
       'PIT     '         'EV      '                -14
       'PIT0    '         'EV      '                -15
       'PIF     '         'EV      '                -16
       'CL      '         'EV      '                -17
       'PMT     '         'EV      '                -18
       'OWL     '         'EV      '                -19
       'LG      '         'EV      '                -20
       'FECD    '         'EV      '                -21
       'ANAL    '         'EV      '                -22
       'BUTT    '         'EV      '                -23
       'NECK    '         'EV      '                -24
       'RSP     '         'EV      '                -25
       'NESG    '         'EV      '                -26
       'NES     '         'EV      '                -27
       'NEMG    '         'EV      '                -28
       'NEMG_PAR'         'EV      '                -29
       'NPA     '         'EV      '                -30
       'NECL    '         'EV      '                -31
       'NPFA    '         'EV      '                -32 

       'MCGN    '         'MC      '                -1
       'MCVX    '         'MC      '                -2
       'EGS4    '         'MC      '                -3
       'MCPM    '         'MC      '                -4
       'MCNH    '         'MC      '                -5
       'MCNS    '         'MC      '                -6             
 
       'MCNT    '         'MCNH    '                -1
       'MCNC    '         'MCNH    '                -2
       'MCNQ    '         'MCNH    '                -3
       'MCNA    '         'MCNH    '                -4

       'MCNI    '         'MCNT    '                -1
               
       'MCTK    '         'MCVX    '                -1
                                   
       'FT1     '         'FT      '                -1
       'FT2     '         'FT      '                -2
       'FT3     '         'FT      '                -3
       'FTE     '         'FT      '                -4
       'FTT     '         'FT      '                -5
       'FTQ     '         'FT      '                -6
       'FTG     '         'FT      '                -7
       'FTM     '         'FT      '                -8
       'FTP     '         'FT      '                -9
       'FTU     '         'FT      '                -10
       'FTR     '         'FT      '                -11
       'FTK     '         'FT      '                -12
       'FTI     '         'FT      '                -13
       'FTY     '         'FT      '                -15
       'FTZ     '         'FT      '                -16
       'FTC     '         'FT      '                -17
       'FTA     '         'FT      '                -18
       'FTN     '         'FT      '                -19
 
       'FT1V    '         'FT1     '                -1
       'FT1A    '         'FT1     '                -2
       'FT1C    '         'FT1A    '                -1
       'FT1R    '         'FT1A    '                -2
       'FT1T    '         'FT1V    '                -1
 
       'FT2V    '         'FT2     '                -1
       'FT2A    '         'FT2     '                -2
       'FT2C    '         'FT2A    '                -1
       'FT2R    '         'FT2A    '                -2
       'FT2T    '         'FT2V    '                -1
 
       'FT3V    '         'FT3     '                -1
       'FT3A    '         'FT3     '                -2
       'FT3C    '         'FT3A    '                -1
       'FT3R    '         'FT3A    '                -2
       'FT3T    '         'FT3V    '                -1

       'FTMV    '         'FTM     '                -1
       'FTMA    '         'FTM     '                -2
       'FTMC    '         'FTMA    '                -1
       'FTMR    '         'FTMA    '                -2
       'FTMT    '         'FTMV    '                -1
       'FTMP    '         'FTMA    '                -4

       'FTEV    '         'FTE     '                -1
       'FTEA    '         'FTE     '                -2
       'FTEC    '         'FTEA    '                -1
       'FTER    '         'FTEA    '                -2
       'FTEK    '         'FTEA    '                -3
       'FTET    '         'FTEV    '                -1
 
       'FTTV    '         'FTT     '                -1
       'FTTA    '         'FTT     '                -2
       'FTTC    '         'FTTA    '                -1
       'FTTR    '         'FTTA    '                -2
       'FTTK    '         'FTTA    '                -3
       'FTTT    '         'FTTV    '                -1
 
       'FTQV    '         'FTQ     '                -1
       'FTQA    '         'FTQ     '                -2
       'FTQC    '         'FTQA    '                -1
       'FTQK    '         'FTQA    '                -3
       'FTQR    '         'FTQA    '                -2
 
       'FTGV    '         'FTG     '                -1
       'FTGA    '         'FTG     '                -2
       'FTGC    '         'FTGA    '                -1
       'FTGR    '         'FTGA    '                -2
       'FTGK    '         'FTGA    '                -3
       'FTGT    '         'FTGV    '                -1

       'FTPV    '         'FTP     '                -1
       'FTPA    '         'FTP     '                -2
       'FTPC    '         'FTPA    '                -1
       'FTPR    '         'FTPA    '                -2
       'FTPK    '         'FTPA    '                -3
       'FTPT    '         'FTPV    '                -1
 
       'FTUV    '         'FTU     '                -1
       'FTUA    '         'FTU     '                -2
       'FTUC    '         'FTUA    '                -1
       'FTUR    '         'FTUA    '                -2
       'FTUK    '         'FTUA    '                -3
       'FTUT    '         'FTUV    '                -1

       'FTKV    '         'FTK     '                -1
       'FTKA    '         'FTK     '                -2
       'FTKC    '         'FTKA    '                -1
       'FTKR    '         'FTKA    '                -2
       'FTKT    '         'FTKV    '                -1

       'FTRV    '         'FTR     '                -1
       'FTRA    '         'FTR     '                -2
       'FTRM    '         'FTR     '                -3
       'FTRC    '         'FTRA    '                -1
       'FTRR    '         'FTRA    '                -2
       'FTRT    '         'FTRV    '                -1
       'FTRP    '         'FTRA    '                -4
 
       'FTIV    '         'FTI     '                -1
       'FTIA    '         'FTI     '                -2
       'FTIC    '         'FTIA    '                -1
       'FTIR    '         'FTIA    '                -2
       'FTIT    '         'FTIV    '                -1
       'FTIP    '         'FTIA    '                -4

       'FTYV    '         'FTY     '                -1
       'FTYA    '         'FTY     '                -2
       'FTYC    '         'FTYA    '                -1
       'FTYR    '         'FTYA    '                -2
       'FTYT    '         'FTYV    '                -1
       'FTYP    '         'FTYA    '                -4

       'FTZV    '         'FTZ     '                -1
       'FTZA    '         'FTZ     '                -2
       'FTZC    '         'FTZA    '                -1
       'FTZR    '         'FTZA    '                -2
       'FTZT    '         'FTZV    '                -1
       'FTZP    '         'FTZA    '                -4

       'FTCV    '         'FTC     '                -1
       'FTCA    '         'FTC     '                -2
       'FTCC    '         'FTCA    '                -1
       'FTCR    '         'FTCA    '                -2
       'FTCT    '         'FTCV    '                -1
       'FTCP    '         'FTCA    '                -4

       'FTAV    '         'FTA     '                -1
       'FTAA    '         'FTA     '                -2
       'FTAC    '         'FTAA    '                -1
       'FTAR    '         'FTAA    '                -2
       'FTAK    '         'FTAA    '                -3
       'FTAT    '         'FTAV    '                -1

       'FTNV    '         'FTN     '                -1
       'FTNA    '         'FTN     '                -2
       'FTNC    '         'FTNA    '                -1
       'FTNR    '         'FTNA    '                -2
       'FTNK    '         'FTNA    '                -3
       'FTNT    '         'FTNV    '                -1

       'PBUN    '         'ZDAB    '                -1

       'CLN     '         'CL      '                -1
 
       'CLNP    '         'CLN     '                -1
       'CLNO    '         'CLNP    '                -1
 
       'RLAI    '         'RLOG    '                -2
      
       'RLDT    '         'RLAI    '                -1
       'RLES    '         'RLAI    '                -2
       'RLCS    '         'RLAI    '                -3
       'RLPN    '         'RLAI    '                -4

       'NEMS    '         'NEMG    '                -1
       'NEMC    '         'NEMG    '                -2

       'NEMS_PAR'         'NEMG_PAR'                -1
       'NEMC_PAR'         'NEMG_PAR'                -2

       'NPAA    '         'NPA     '                -1
       'NPAC    '         'NPA     '                -2
       'NPAD    '         'NPA     '                -3
       'NPAQ    '         'NPA     '                -4
       'NPAW    '         'NPA     '                -5

#.      Permanent Data Structure

       'PRM_RHDR'         'PRM_MAST'                -5
       'PRM_EPED'         'PRM_MAST'                -6 
       'PRM_TRIG'         'PRM_MAST'                -7
       'PRM_CAST'         'PRM_MAST'                -10
       'PRM_CAAC'         'PRM_MAST'                -11

*----------------------------------------------------------------------------
*---
*---    Standard Ntuple Bank.
*---
*---    Contact:  N. West,  Oxford.
*---
*---    Note: This is a new NTPR 500.  The old one had become too unwieldy.
*---
*----------------------------------------------------------------------------
*DO   NTPR  500  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
1                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
1                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' mcdata; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.
'    vx_cls       float_equals      MCVX+$KMCVX_CLS: 0.5 1.5;               '
'    revent       magnitude         MCVX+$KMCVX_PSX;                        '
'    xe           equals            MCVX+$KMCVX_PSX;                        '
'    ye           equals            MCVX+$KMCVX_PSY;                        '
'    ze           equals            MCVX+$KMCVX_PSZ;                        '
'    theta        theta_phi         MCTK+$KMCTK_DRX;                        '
'    phi          reserved;                                                 '
'    rfit         magnitude         FTTV+$KFTXV_X;                          '
'    tgen         single_equals     MCVX+$KMCVX_TIM;                        '
'    egen         equals            MCTK+$KMCTK_ENE;                        '
'    xf           equals            FTTV+$KFTXV_X;                          '
'    yf           equals            FTTV+$KFTXV_Y;                          '
'    zf           equals            FTTV+$KFTXV_Z;                          '
'    thetaf       theta_phi         FTTT+$KFTXT_U;                          '
'    phif         reserved;                                                 '
'    tfit         equals            FTTV+$KFTXV_T;                          '
'    nhits        float_equals      EV+$KEV_NPM;                            '
'    nfit         float_equals      FTT+$KFTX_PMT_USED;                     '
'    nearly       float_equals      FTT+$KFTX_EARLY;                        '
'    nlate        float_equals      FTT+$KFTX_LATE ;                        '
'    chi2         equals            FTT+$KFTT_CHI;                          '
'    rdev         distance          FTTV+$KFTXV_X,   MCVX+$KMCVX_PSX;       '
'    numiter      float_equals      FTT+$KFTX_ITER;                         '
 
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.

*----------------------------------------------------------------------------
*---
*---    Standard Ntuple Bank.
*---
*---    Contact:  N. West,  Oxford.
*---
*---    Note: Simple grid fitter n-tuple.  
*---    Discarding disabled si all fitter failures are visisble.
*---
*----------------------------------------------------------------------------
*DO   NTPR  501  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
1                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' mcdata; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.
'    vx_cls       float_equals      MCVX+$KMCVX_CLS: 0.5 1.5;               '
'    revent       magnitude         MCVX+$KMCVX_PSX;                        '
'    xe           equals            MCVX+$KMCVX_PSX;                        '
'    ye           equals            MCVX+$KMCVX_PSY;                        '
'    ze           equals            MCVX+$KMCVX_PSZ;                        '
'    theta        theta_phi         MCTK+$KMCTK_DRX;                        '
'    phi          reserved;                                                 '
'    rfit         magnitude         FTGV+$KFTXV_X;                          '
'    tgen         single_equals     MCVX+$KMCVX_TIM;                        '
'    egen         equals            MCTK+$KMCTK_ENE;                        '
'    xf           equals            FTGV+$KFTXV_X;                          '
'    yf           equals            FTGV+$KFTXV_Y;                          '
'    zf           equals            FTGV+$KFTXV_Z;                          '
'    thetaf       theta_phi         FTGT+$KFTXT_U;                          '
'    phif         reserved;                                                 '
'    tfit         equals            FTGV+$KFTXV_T;                          '
'    nhits        float_equals      EV+$KEV_NPM;                            '
'    nfit         float_equals      FTG+$KFTX_PMT_USED;                     '
'    nearly       float_equals      FTG+$KFTX_EARLY;                        '
'    nlate        float_equals      FTG+$KFTX_LATE ;                        '
'    rdev         distance          FTGV+$KFTXV_X,   MCVX+$KMCVX_PSX;       '
'    numiter      float_equals      FTG+$KFTX_ITER;                         '
 
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.

*----------------------------------------------------------------------------
*---
*---    Standard Ntuple Bank.
*---
*---    Contact:  N. West,  Oxford.
*---
*---    Note: Simple path fitter n-tuple.  
*---
*----------------------------------------------------------------------------
*DO   NTPR  502  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
1                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' mcdata; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.
'    vx_cls       float_equals      MCVX+$KMCVX_CLS: 0.5 1.5;               '
'    revent       magnitude         MCVX+$KMCVX_PSX;                        '
'    xe           equals            MCVX+$KMCVX_PSX;                        '
'    ye           equals            MCVX+$KMCVX_PSY;                        '
'    ze           equals            MCVX+$KMCVX_PSZ;                        '
'    theta        theta_phi         MCTK+$KMCTK_DRX;                        '
'    phi          reserved;                                                 '
'    rfit         magnitude         FTPV+$KFTXV_X;                          '
'    tgen         single_equals     MCVX+$KMCVX_TIM;                        '
'    egen         equals            MCTK+$KMCTK_ENE;                        '
'    xf           equals            FTPV+$KFTXV_X;                          '
'    yf           equals            FTPV+$KFTXV_Y;                          '
'    zf           equals            FTPV+$KFTXV_Z;                          '
'    thetaf       theta_phi         FTPT+$KFTXT_U;                          '
'    phif         reserved;                                                 '
'    tfit         equals            FTPV+$KFTXV_T;                          '
'    nhits        float_equals      EV+$KEV_NPM;                            '
'    nfit         float_equals      FTP+$KFTX_PMT_USED;                     '
'    nearly       float_equals      FTP+$KFTX_EARLY;                        '
'    nlate        float_equals      FTP+$KFTX_LATE ;                        '
'    rdev         distance          FTPV+$KFTXV_X,   MCVX+$KMCVX_PSX;       '
'    numiter      float_equals      FTP+$KFTX_ITER;                         '
 
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.

#.
#.----------------------------------------------------------------------
*---    Example energy calibration ntuple (RSP)
*---
*---    Contact:  M. Boulay, Queen's.
*---        505 is the standard n-tuple
*---        506 is a trial new data structure using the FTTR for FTT.
*---
*-----------------------------------------------------------------------
*DO   NTPR  505  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Fo
       0        0        0           #.  8..10  Creation Date, Time, Sou
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in d
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
0                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: C
'rspdata; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.
'    revent       magnitude         MCVX+$KMCVX_PSX;                  '
'    xe           equals            MCVX+$KMCVX_PSX;                  '
'    ye           equals            MCVX+$KMCVX_PSY;                  '
'    ze           equals            MCVX+$KMCVX_PSZ;                  '
'    theta        theta_phi         MCTK+$KMCTK_DRX;                  '
'    phi          reserved;                                           '
'    rfit         magnitude         FTTV+$KFTXV_X;                    '
'    tgen         single_equals     MCVX+$KMCVX_TIM;                  '
'    egen         equals            MCTK+$KMCTK_ENE;                  '
'    xf           equals            FTTV+$KFTXV_X;                    '
'    yf           equals            FTTV+$KFTXV_Y;                    '
'    zf           equals            FTTV+$KFTXV_Z;                    '
'    thetaf       theta_phi         FTTT+$KFTXT_U;                    '
'    phif         reserved;                                           '
'    tfit         equals            FTTV+$KFTXV_T;                    '
'    npm          float_equals      EV+$KEV_NPM;                      '
'    nfit         float_equals      FTT+$KFTX_PMT_USED;               '
'    nearly       float_equals      FTT+$KFTX_EARLY;                  '
'    nlate        float_equals      FTT+$KFTX_LATE ;                  '
'    chi2         equals            FTT+$KFTT_CHI;                    '
'    rdev         distance          FTTV+$KFTXV_X,   MCVX+$KMCVX_PSX; '
'    numiter      float_equals      FTT+$KFTX_ITER;                   '
'    ropt         equals            RSP+$KRSP_OPTICAL_RESPONSE;       '
'    nwin         equals            RSP+$KRSP_NWIN;                   '
'    ndark        equals            RSP+$KRSP_NDARK;                  '
'    neff         equals            RSP+$KRSP_NEFF;                   '
'    nhits        equals            RSP+$KRSP_NHITS;                  '
'    nonline      equals            RSP+$KRSP_NONLINE;                '
'    ene          equals            RSP+$KRSP_ENE;                    '
#.                                                                    
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.         

*DO   NTPR  506  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Fo
       0        0        0           #.  8..10  Creation Date, Time, Sou
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in d
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
0                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: C
'rspdata; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.
'    revent       magnitude         MCVX+$KMCVX_PSX;                  '
'    xe           equals            MCVX+$KMCVX_PSX;                  '
'    ye           equals            MCVX+$KMCVX_PSY;                  '
'    ze           equals            MCVX+$KMCVX_PSZ;                  '
'    theta        theta_phi         MCTK+$KMCTK_DRX;                  '
'    phi          reserved;                                           '
'    rfit         magnitude         FTTV+$KFTXV_X;                    '
'    tgen         single_equals     MCVX+$KMCVX_TIM;                  '
'    egen         equals            MCTK+$KMCTK_ENE;                  '
'    xf           equals            FTTV+$KFTXV_X;                    '
'    yf           equals            FTTV+$KFTXV_Y;                    '
'    zf           equals            FTTV+$KFTXV_Z;                    '
'    thetaf       theta_phi         FTTT+$KFTXT_U;                    '
'    phif         reserved;                                           '
'    tfit         equals            FTTV+$KFTXV_T;                    '
'    npm          float_equals      EV+$KEV_NPM;                      '
'    nfit         float_equals      FTT+$KFTX_PMT_USED;               '
'    nearly       float_equals      FTT+$KFTX_EARLY;                  '
'    nlate        float_equals      FTT+$KFTX_LATE ;                  '
'    chi2         equals            FTT+$KFTT_CHI;                    '
'    rdev         distance          FTTV+$KFTXV_X,   MCVX+$KMCVX_PSX; '
'    numiter      float_equals      FTT+$KFTX_ITER;                   '
'    ropt         equals            FTTR+$KRSP_OPTICAL_RESPONSE;       '
'    nwin         equals            FTTR+$KRSP_NWIN;                   '
'    ndark        equals            FTTR+$KRSP_NDARK;                  '
'    neff         equals            FTTR+$KRSP_NEFF;                   '
'    nhits        equals            FTTR+$KRSP_NHITS;                  '
'    nonline      equals            FTTR+$KRSP_NONLINE;                '
'    ene          equals            FTTR+$KRSP_ENE;                    '
#.                                                                    
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.         

*----------------------------------------------------------------------------
*---
*---  Standard FTK energy ntuple
*---
*----------------------------------------------------------------------------
*DO   NTPR  510  -i(35I 1F 3I -H)  -n5000                #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Call NTP_PACK_USER: =0 No, =1 Yes
' ftkntp; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.

#.
#.  General Event information
#.  =========================
'    mc_ver	  equals            MAST+$KMAST_SNOMAN_VER;           '
'    pmteff       equals            MC+$KMC_PMT_EFF;                  '
'    ev_run       float_equals      EV+$KEV_RUN;                      '
'    ev_tid       float_equals      EV+$KEV_GTR_ID;                   '
'    ds_lo        bits              EV+$KEV_DATA_SET,0,16;            '
'    ds_hi        bits              EV+$KEV_DATA_SET,16,16;           '
'    date         float_equals      EV+$KEV_DTE;                      '
'    time         float_equals      EV+$KEV_HMSC;                     '
'    time_jdy     ntime             EV+$KEV_JDY;                      '
'    time_s       reserved                           ;                '
'    time_us      reserved                           ;                '
'    time_ns      reserved                           ;                '
'    ev_trglo     bits              EV+$KEV_TRG_TYPE,0,16;            '
'    ev_trghi     bits              EV+$KEV_TRG_TYPE,16,16;           '
'    nhits        float_equals      EV+$KEV_NPM;                      '
'    drxsun       dirsun            EV+$KEV_JDY;                      '
'    drysun       reserved;                                           '
'    drzsun       reserved;                                           '
'    adamn1       dmm_get_emask     0;                                '
'    adamn2       reserved;                                           '
'    rdamn1       reserved;                                           '
'    rdamn2       reserved;                                           '
'    amb_peak     float_equals      EV+$KEV_PEAK;                     '
'    amb_int      float_equals      EV+$KEV_INT;                      '
'    nowl         nzbank            EV-$KEV_OWL;                      '
'    nbutt        nzbank            EV-$KEV_BUTT;                     '
'    nneck        nzbank            EV-$KEV_NECK;                     '
'    nfecd        nzbank            EV-$KEV_FECD;                     '
'    wasfit       equals            FTT+$KFTX_RETC;                   '
#.  Grid fitter output
#.  ==================
'    xfg          equals            FTGV+$KFTXV_X;                    '
'    yfg          equals            FTGV+$KFTXV_Y;                    '
'    zfg          equals            FTGV+$KFTXV_Z;                    '
'    rfg          magnitude         FTGV+$KFTXV_X;                    '
'    thetafg      theta_phi         FTGT+$KFTXT_U;                    '
'    phifg        reserved;                                           '
'    tfg          equals            FTGV+$KFTXV_T;                    '
'    like1        equals            FTG+$KFTG_M_LIKE;                 '
'    nfitg1       float_equals      FTG+$KFTX_PMT_AVAIL;              '
'    like2        equals            FTGT+7;                           '
'    nfitg2       float_equals      FTGT+8;                           '
#.  Path fitter output
#.  ==================
'    xfp          equals            FTPV+$KFTXV_X;                    '
'    yfp          equals            FTPV+$KFTXV_Y;                    '
'    zfp          equals            FTPV+$KFTXV_Z;                    '
'    rfp          magnitude         FTPV+$KFTXV_X;                    '
'    thetafp      theta_phi         FTPT+$KFTXT_U;                    '
'    phifp        reserved;                                           '
'    tfitp        equals            FTPV+$KFTXV_T;                    '
'    a2dprb       equals            FTP+$KFTP_KSPROB_ANG2D;           '
'    phiprb       equals            FTP+$KFTP_KSPROB_ANG_PHI;         '
#.  FTU fitter output
#.  ==================
'    xfu          equals            FTUV+$KFTXV_X;                    '
'    yfu          equals            FTUV+$KFTXV_Y;                    '
'    zfu          equals            FTUV+$KFTXV_Z;                    '
'    rfu          magnitude         FTUV+$KFTXV_X;                    '
'    thetafu      theta_phi         FTUT+$KFTXT_U;                    '
'    phifu        reserved;                                           '
'    tfitu        equals            FTUV+$KFTXV_T;                    '
#.  RSP GRID
#.  =======================
'    nwing        equals            FTGR+$KRSP_NWIN;                  '
'    eneg         equals            FTGR+$KRSP_ENE;                   '
'    rspncorg     equals            FTGR+$KRSP_NCOR;                  ' 
#.  RSP PATH
#.  =======================
'    nwinp        equals            FTPR+$KRSP_NWIN;                  '
'    enep         equals            FTPR+$KRSP_ENE;                   '
'    rspncorp     equals            FTPR+$KRSP_NCOR;                  ' 
#.  RSP FTU
#.  =======================
'    nwinu        equals            FTUR+$KRSP_NWIN;                  '
'    eneu         equals            FTUR+$KRSP_ENE;                   '
'    rspncoru     equals            FTUR+$KRSP_NCOR;                  ' 
#.  RSP COMMON
#.  =======================
'    rsp_nwk      equals            FTUR+$KRSP_NWORKING;              '
'    rsp_onln     equals            FTUR+$KRSP_NONLINE;               '
'    rsp_ncal     equals            FTUR+$KRSP_NCAL;                  '
'    rsp_drif     equals            FTUR+$KRSP_DRIFT;                 '
'    rsp_nhit     equals            FTUR+$KRSP_NHITS;                 '
'    rsp_allq     equals            FTUR+26;                          '
'    rsp_dqxx     equals            FTUR+27;                          '
'    vx_cls       float_equals      MCVX+$KMCVX_CLS: -1000000. 1.5;   '
#.  FTK GRID
#.  =======================
'    keneg        equals            FTGK+$KFTXK_ENERGY;               '
'    kmerrg       equals            FTGK+$KFTXK_ENE_MERR;             '
'    kperrg       equals            FTGK+$KFTXK_ENE_PERR;             '
'    kneffg       equals            FTGK+$KFTXK_NEFF;                 '
'    kdirg        equals            FTGK+$KFTXK_DIR_SCALE;            '
'    kdirsqg      equals            FTGK+$KFTXK_DIR_SCALE_SQ;         '
'    kscatg       equals            FTGK+$KFTXK_SCAT_SCALE;           '
'    krpmtg       equals            FTGK+$KFTXK_REFL_SCALE;           '
'    kav1g        equals            FTGK+$KFTXK_REFL_AV1_SCALE;       '
'    kav2g        equals            FTGK+$KFTXK_REFL_AV2_SCALE;       '
#.  FTK PATH
#.  =======================
'    kenep        equals            FTPK+$KFTXK_ENERGY;               '
'    kmerrp       equals            FTPK+$KFTXK_ENE_MERR;             '
'    kperrp       equals            FTPK+$KFTXK_ENE_PERR;             '
'    kneffp       equals            FTPK+$KFTXK_NEFF;                 '
'    kdirp        equals            FTPK+$KFTXK_DIR_SCALE;            '
'    kdirsqp      equals            FTPK+$KFTXK_DIR_SCALE_SQ;         '
'    kscatp       equals            FTPK+$KFTXK_SCAT_SCALE;           '
'    krpmtp       equals            FTPK+$KFTXK_REFL_SCALE;           '
'    kav1p        equals            FTPK+$KFTXK_REFL_AV1_SCALE;       '
'    kav2p        equals            FTPK+$KFTXK_REFL_AV2_SCALE;       '
#.  FTK FTU
#.  =======================
'    keneu        equals            FTUK+$KFTXK_ENERGY;               '
'    kmerru       equals            FTUK+$KFTXK_ENE_MERR;             '
'    kperru       equals            FTUK+$KFTXK_ENE_PERR;             '
'    kneffu       equals            FTUK+$KFTXK_NEFF;                 '
'    kdiru        equals            FTUK+$KFTXK_DIR_SCALE;            '
'    kdirsqu      equals            FTUK+$KFTXK_DIR_SCALE_SQ;         '
'    kscatu       equals            FTUK+$KFTXK_SCAT_SCALE;           '
'    krpmtu       equals            FTUK+$KFTXK_REFL_SCALE;           '
'    kav1u        equals            FTUK+$KFTXK_REFL_AV1_SCALE;       '
'    kav2u        equals            FTUK+$KFTXK_REFL_AV2_SCALE;       '
#.  Monte Carlo event information
#.  =======================
'    revent       magnitude         MCVX+$KMCVX_PSX;                  '
'    xe           equals            MCVX+$KMCVX_PSX;                  '
'    ye           equals            MCVX+$KMCVX_PSY;                  '
'    ze           equals            MCVX+$KMCVX_PSZ;                  '
'    theta        theta_phi         MCVX-$KMCVX_MCTK+$KMCTK_DRX;      '
'    phi          reserved;                                           '
'    tgen         single_equals     MCVX+$KMCVX_TIM;                  '
'    egen         equals            MCVX-$KMCVX_MCTK+$KMCTK_ENE;      '
'    enu          equals            MCVX-$KMCVX_MCTKI+$KMCTK_ENE;     '
'    numcer       equals            EGS4+7, EGS4+8, EGS4+9;           '
'    int_ttt      unpack_interact      MCVX+$KMCVX_INC;               '
'    int_ppp      reserved;                                           '
'    int_ccc      reserved;                                           '
'    neutron      neutron;                                            '
#.  Classifier info for fitters
#.  =======================
'    cstsunp      equals            FTPC+$KFTXC_SOL_DIR_1;            '
'    thetaijp     equals            FTPC+$KFTXC_THETA_IJ_1;           '
'    itrp         equals            FTPC+$KFTXC_ITR_1 ;               '
'    beta1p       equals            FTPC+$KFTXC_LEG_1 ;               '
'    beta2p       equals            FTPC+$KFTXC_LEG_2 ;               '
'    beta3p       equals            FTPC+$KFTXC_LEG_3 ;               '
'    beta4p       equals            FTPC+$KFTXC_LEG_4 ;               '
'    cfripp       equals            FTPC+$KFTXC_ANG_CORR_16 ;         '
'    cstsung      equals            FTGC+$KFTXC_SOL_DIR_1;            '
'    thetaijg     equals            FTGC+$KFTXC_THETA_IJ_1;           '
'    itrg         equals            FTGC+$KFTXC_ITR_1 ;               '
'    beta1g       equals            FTGC+$KFTXC_LEG_1 ;               '
'    beta2g       equals            FTGC+$KFTXC_LEG_2 ;               '
'    beta3g       equals            FTGC+$KFTXC_LEG_3 ;               '
'    beta4g       equals            FTGC+$KFTXC_LEG_4 ;               '
'    cfripg       equals            FTGC+$KFTXC_ANG_CORR_16 ;         '
'    cstsunu      equals            FTUC+$KFTXC_SOL_DIR_1;            '
'    thetaiju     equals            FTUC+$KFTXC_THETA_IJ_1;           '
'    itru         equals            FTUC+$KFTXC_ITR_1 ;               '
'    beta1u       equals            FTUC+$KFTXC_LEG_1 ;               '
'    beta2u       equals            FTUC+$KFTXC_LEG_2 ;               '
'    beta3u       equals            FTUC+$KFTXC_LEG_3 ;               '
'    beta4u       equals            FTUC+$KFTXC_LEG_4 ;               '
'    cfripu       equals            FTUC+$KFTXC_ANG_CORR_16 ;         '
#. New Header Information
#. ======================
'    adamn3       dmm_get_emask     -1;                               '
'    adamn4       reserved;                                           '
'    rdamn3       reserved;                                           '
'    rdamn4       reserved;                                           '
'    ntpver       equals            4.0;                              '
'    ncd_stat     float_equals      EV+$KEV_NCD_STATUS;               '
#. New RSP 
'    eneu_old     equals            FTUR+$KRSP_ALT_ENERGY;            '
'    enep_old     equals            FTPR+$KRSP_ALT_ENERGY;            '
'    eneg_old     equals            FTGR+$KRSP_ALT_ENERGY;            '
'  END_OF_NTUPLE; '    #.  This marks the end of the ntuple.
#.
#.

*-----------------------------------------------------------------------
#.
#.      Ntuples for muon fitter.
#.
#.      Contact:  N. Tagg, Guelph
#.  
#.      Ntuple 300: FTM output for MC, short version
#.      Ntuple 301: FTM output for MC
#.      Ntuple 302: FTM output for real data
#.
#.-----------------------------------------------------------------------
*DO   NTPR  300  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380516 22331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type,Format no.
       0        0        0           #.  8..10  Creation Date, Time,Source Id.
19750101        0 20380516 22331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
20000                   #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Call NTP_PACK_USER: =0 No, =1 Yes
' ftm_mc; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.
#.   Force source vertex.
'   _vx_cls       float_equals      MCVX+$KMCVX_CLS: 1;'
#.
#.--- True event ---
' gtid         float_equals      EV+$KEV_GTR_ID;'
#. Start position
' x            equals            MCVX+$KMCVX_PSX;'
' y            equals            MCVX+$KMCVX_PSY;'
' z            equals            MCVX+$KMCVX_PSZ;'
' t            single_equals     MCVX+$KMCVX_TIM;'
#. Track direction
' eta          THETA_PHI         MCTK+$KMCTK_DRX;'
' psi          reserved;'      
#. Impact paramter.
' p            impact_parameter  MCVX+$KMCVX_PSX, MCTK+$KMCTK_DRX;'
' energy       equals            MCTK+$KMCTK_ENE;'
#. 
#. --- Muon Fit ---
#.
#. Start position fit
' xf           equals            FTMV+$KFTXV_X;'
' yf           equals            FTMV+$KFTXV_Y;'
' zf           equals            FTMV+$KFTXV_Z;'
' tf           equals            FTMV+$KFTXV_T;'
#. Direction fit
' etafit       theta_phi         FTMT+$KFTXT_U;'
' psifit       reserved;'
#. Impact param, length, charge/length
' pfit         equals            FTM+$KFTM_PFit;'
' lenfit       equals            FTM+$KFTM_Length;'
' dEdX         equals            FTM+$KFTM_dEdX;'
#.
#. --- Accuracy of fit. ---
#.
' rdev         distance          FTMV+$KFTXV_X, MCVX+$KMCVX_PSX;'
' verror       dot               FTMT+$KFTXT_U, MCTK+$KMCTK_DRX;' 
#.
#. --- Quality of Fit: ---
#.
' nhits        float_equals      FTM+$KFTX_PMT_AVAIL : 1 10000;'    
' nGood        float_equals      FTM+$KFTX_PMT_USED;'
' ncut               equals      FTM+$KFTM_NTubes_CutChisq;'
' Chisq        equals            FTM+$KFTM_ChiDof;'
' nAgree       equals            ftm+$KFTM_NTubes_Agree;'
#.
'  END_OF_NTUPLE; '    #.  This marks the end of the ntuple.


*LOG
*---  Titles File: muon_ntuple.dat    
*---                 Contact: N. Tagg
*---                 Banks: NTPC, NTPR
*LOG OFF
*DO   NTPR  301  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380516 22331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type,Format no.
       0        0        0           #.  8..10  Creation Date, Time,Source Id.
19750101        0 20380516 22331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
20000                   #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
0                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Call NTP_PACK_USER: =0 No, =1 Yes
' newftm; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.
#.
#.   Force source vertex.
'   _vx_cls       float_equals      MCVX+$KMCVX_CLS: 1;'
#.
#.--- Event Header ---
' run             float_equals       EV+$KEV_RUN;'
' gtid            float_equals       EV+$KEV_GTR_ID;'
' Date            float_equals       EV+$KEV_DTE;'
' Time            float_equals       EV+$KEV_HMSC;'
' jDate           float_equals       EV+$KEV_JDY;'
' utsecs          float_equals       EV+$KEV_UT1;'
#. --- Monte Carlo Data ---
#. Start position
#.' x             equals             MC-$KMC_MCVX+$KMCVX_PSX;'
#.' y             equals             MC-$KMC_MCVX+$KMCVX_PSY;'
#.' z             equals             MC-$KMC_MCVX+$KMCVX_PSZ;'
#.' t             single_equals      MC-$KMC_MCVX+$KMCVX_TIM;'
#. Track direction
#.' u             equals             MC-$KMC_MCVX-$KMCVX_MCTK+$KMCTK_DRX;'
#.' v             equals             MC-$KMC_MCVX-$KMCVX_MCTK+$KMCTK_DRY;'
#.' w             equals             MC-$KMC_MCVX-$KMCVX_MCTK+$KMCTK_DRZ;'
' eta             THETA_PHI          MC-$KMC_MCVX-$KMCVX_MCTK+$KMCTK_DRX;'
' psi             reserved;'      
#. Exit position
' xe              track_extrap       MC-$KMC_MCVX+$KMCVX_PSX,MC-$KMC_MCVX-$KMCVX_MCTK+$KMCTK_DRX, 850.;'
' ye              reserved;'
' ze              reserved;'
#. Impact parameter.
' p               impact_parameter    MC-$KMC_MCVX+$KMCVX_PSX, MC-$KMC_MCVX-$KMCVX_MCTK+$KMCTK_DRX;'
#. Impact Parameter vector
' px              track_extrap        MC-$KMC_MCVX+$KMCVX_PSX, MC-$KMC_MCVX-$KMCVX_MCTK+$KMCTK_DRX;' 
' py              reserved;'
' pz              reserved;'
' energy          equals              MC-$KMC_MCVX-$KMCVX_MCTK+$KMCTK_ENE;'
#. --- Extracted MC data ---
#.' mc_vx           equals            FTM+$KFTM_MC_VX;'
#.' mc_vy           equals            FTM+$KFTM_MC_VY;'
#.' mc_vz           equals            FTM+$KFTM_MC_VZ;'
#.' mc_xstop      equals            FTM+$KFTM_MC_XSTOP;'
#.' mc_ystop      equals            FTM+$KFTM_MC_YSTOP;'
#.' mc_zstop      equals            FTM+$KFTM_MC_ZSTOP;'
#.' mc_gstop      equals            FTM+$KFTM_MC_GSTOP;'
#.' mc_gp         equals            FTM+$KFTM_MC_GPSTOP;'
#.' mc_px1          track_extrap      FTM+$KFTM_MC_X1, FTM+$KFTM_MC_VX;'
' mc_py1          reserved;'
' mc_pz1          reserved;'
#.' mc_p1           magnitude         mc_px1;'
#.' mc_px2        track_extrap      FTM+$KFTM_MC_X2, FTM+$KFTM_MC_VX;'
#.' mc_py2        reserved;'
#.' mc_pz2        reserved;'
#.' mc_p2         magnitude         mc_px2;'
#.' mc_d          distance          mc_px1, mc_px2;'
#. 
#. --- Muon Fit ---
#.
#.' thetag       theta_phi         FTM+$KFTM_GUESS_X;'
#.' phig         reserved;'
#. First guess track direction
#.' etag         theta_phi         FTM+$KFTM_GUESS_U;'
#.' psig         reserved;'
#. Entrance position fit
#.' xf           equals            FTMV+$KFTXV_X;'
#.' yf           equals            FTMV+$KFTXV_Y;'
#.' zf           equals            FTMV+$KFTXV_Z;'
#.' tf           equals            FTMV+$KFTXV_T;'
#. Exit position fit
' xef          equals            FTM+$KFTM_EXIT_X;'
' yef          equals            FTM+$KFTM_EXIT_Y;'
' zef          equals            FTM+$KFTM_EXIT_Z;'
#.' tef          equals            FTM+$KFTM_EXIT_T;'
#. Direction fit
#.' ufit         equals            FTMT+$KFTXT_U;'
#.' vfit         equals            FTMT+$KFTXT_V;'
#.' wfit         equals            FTMT+$KFTXT_W;'
' etafit       theta_phi         FTMT+$KFTXT_U;'
' psifit       reserved;'
#. Impact param, length, charge/length
' pfit         equals            FTM+$KFTM_PFit;'
' pcorr        equals            FTM+$KFTM_Pcorr;'
' pxfit        track_extrap      FTMV+$KFTXV_X, FTMT+$KFTXT_U;'
' pyfit        reserved;'
' pzfit        reserved;'
' lenfit       equals            FTM+$KFTM_Length;'
' dEdX         equals            FTM+$KFTM_dEdX;'
#. Info for stopped muons:
#. Tubes should hit at exit wound, in-time tubes at exit would, charge at exit wound, estimated
#. stopping position of muon 
' exShld       equals            FTM+53;'
' exDid        equals            FTM+54;'
' exQ          equals            FTM+55;'
' gstop        equals            FTM+56;'
#.
#. --- Accuracy of fit. ---
#.
' rdev         distance          FTMV+$KFTXV_X, MCVX+$KMCVX_PSX;'
' xerror       distance          FTM+$KFTM_EXIT_X, xe;'
' verror       dot               FTMT+$KFTXT_U, MCTK+$KMCTK_DRX;' 
#.' xgerror      distance          FTM+$KFTM_GUESS_X, xe;'
#.' vgerror      dot               FTM+$KFTM_GUESS_U, MCTK+$KMCTK_DRX;'
#.
#. --- Quality of Fit: ---
#.
' nhits        float_equals      FTM+$KFTX_PMT_AVAIL : 1 10000;'    
' nGood        float_equals      FTM+$KFTX_PMT_USED;'
' ncut               equals      FTM+$KFTM_NTubes_CutChisq;'
' Chisq        equals            FTM+$KFTM_ChiDof;'
' prb          equals            FTM+$KFTX_PROB;'
' nAgree       equals            ftm+$KFTM_NTubes_Agree;'
' qAgree       equals            ftm+$KFTM_qMean_Agree;'
' chiAg        equals            ftm+$KFTM_chisq_agree;'
' pdf          equals            ftm+$KFTM_log_pdf;'
' pdfdof       equals            ftm+$KFTM_pdf_dof;'  
' nShould      equals            ftm+$KFTM_NShould;'
' fShould      equals            ftm+$KFTM_FracShould;'
' nshdnt         equals            ftm+$KFTM_NShouldnt;'
' qshdnt       equals            ftm+$KFTM_QShouldnt;'
' chish        equals            ftm+$KFTM_chisq_should;'
' sh_ag        equals            ftm+$KFTM_should_and_agree;'
' shnt_ag      equals            ftm+$KFTM_shouldnt_and_agree;'
' sh_dis       equals            ftm+$KFTM_should_and_disagree;'
' shnt_dis     equals            ftm+$KFTM_shouldnt_and_disagree;'
' nearly       float_equals      ftm+$KFTX_EARLY;'
#.
#. --- Stats ---
#.
' DeltaT       equals            FTM+$KFTM_Delta_T;'
' MeanQ        equals            FTM+$KFTM_MeanQ;'
' RMSQ         equals            FTM+$KFTM_rmsQ;'
' MeanT        equals            FTM+$KFTM_meanT;'
' RMST         equals            FTM+$KFTM_rmsT;'
#. Drift from guess fit
#.' xgchange     distance          FTM+$KFTM_GUESS_X, FTM+$KFTM_EXIT_X;'
#.' vgchange     dot               FTM+$KFTM_GUESS_U, FTMT+$KFTXT_U;'
#. --- Other Info ---
' nowls        nzbank            OWL;'
' owl_on  equals                 ftm+$KFTM_owl_tubes_online;'
' nneck        nzbank            NECK;'
' neck1q       equals ftm+49;'
' neck2q       equals ftm+50;'
'  END_OF_NTUPLE; '    #.  This marks the end of the ntuple.
#.
#.      302: Multiple muons, no MC data.
#. 

*DO   NTPR  302  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380516 22331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type,Format no.
       0        0        0           #.  8..10  Creation Date, Time,Source Id.
19750101        0 20380516 22331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
20000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
1                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Call NTP_PACK_USER: =0 No, =1 Yes
' MuFit; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.
' Run             float_equals      EV+$KEV_RUN;'
' EventNo         float_equals      EV+$KEV_EVN;'
' GTID            float_equals      EV+$KEV_GTR_ID;'
' Date            float_equals      EV+$KEV_DTE;'
' Time            float_equals      EV+$KEV_HMSC;'
' jDate           float_equals      EV+$KEV_JDY;'
' utsecs          float_equals      EV+$KEV_UT1;'
#. 
#. --- Muon Fit ---
#.
#. First guess exit position
' thetag       theta_phi         FTM+$KFTM_GUESS_X;'
' phig         reserved;'
#. First guess track direction
' etag         theta_phi         FTM+$KFTM_GUESS_U;'
' psig         reserved;'
#. Start position fit
' xf           equals            FTMV+$KFTXV_X;'
' yf           equals            FTMV+$KFTXV_Y;'
' zf           equals            FTMV+$KFTXV_Z;'
' tf           equals            FTMV+$KFTXV_T;'
#. Exit position fit
' xef          equals            FTM+$KFTM_EXIT_X;'
' yef          equals            FTM+$KFTM_EXIT_Y;'
' zef          equals            FTM+$KFTM_EXIT_Z;'
' tef          equals            FTM+$KFTM_EXIT_T;'
#. Direction fit
' ufit         equals            FTMT+$KFTXT_U;'
' vfit         equals            FTMT+$KFTXT_V;'
' wfit         equals            FTMT+$KFTXT_W;'
' etafit       theta_phi         FTMT+$KFTXT_U;'
' psifit       reserved;'
#. Impact param, length, charge/length
' pfit         equals            FTM+$KFTM_PFit;'
' lenfit       equals            FTM+$KFTM_Length;'
' dEdX         equals            FTM+$KFTM_dEdX;'
#.
#. --- Quality of Fit: ---
#.
' nhits        float_equals      FTM+$KFTX_PMT_AVAIL : 1 10000;'    
' nGood        float_equals      FTM+$KFTX_PMT_USED;'
' ncut               equals      FTM+$KFTM_NTubes_CutChisq;'
' Chisq        equals            FTM+$KFTM_ChiDof;'
' prb          equals            FTM+$KFTX_PROB;'
' nAgree       equals            ftm+$KFTM_NTubes_Agree;'
#.
#. --- Stats ---
#.
' DeltaT       equals            FTM+$KFTM_Delta_T;'
' MeanQ        equals            FTM+$KFTM_MeanQ;'
' RMSQ         equals            FTM+$KFTM_rmsQ;'
' MeanT        equals            FTM+$KFTM_meanT;'
' RMST         equals            FTM+$KFTM_rmsT;'
#. Lambda values. (Position of muon along track)
' lmean        equals            ftm+$KFTM_lMean;'
' lrms         equals            ftm+$KFTM_lRMS;'
#. Drift from guess fit
' xgchange     distance          FTM+$KFTM_GUESS_X, FTM+$KFTM_EXIT_X;'
' vgchange     dot               FTM+$KFTM_GUESS_U, FTMT+$KFTXT_U;'
#.
'  END_OF_NTUPLE; '    #.  This marks the end of the ntuple.
 
*DO   NTPR  400  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
1                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
'ncddata0;'             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.

'    gtid         float_equals      EV+$KEV_NCD_GTID;                       '
'    n_nemg       nzbank            EV-$KEV_NEMG;                           '
'    n_nemg_p     nzbank            EV-$KEV_NEMG_PAR;                       '
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.

*DO   NTPR  401  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
1                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
'ncddata1;'             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.
'    gtid         float_equals      EV+$KEV_NCD_GTID;                       '
'    status       float_equals      NEMS+$KNEMS_STATUS;                     '
'    chn_mask     float_equals      NEMS+$KNEMS_MUX_CHAN;                   '
'    mux_box      float_equals      NEMS+$KNEMS_MUX_BOX;                    '
'    scope        float_equals      NEMS+$KNEMS_OS;                         '
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.

*DO   NTPR  402  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
1                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
'ncddata2;'             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.
'    gtid         float_equals      EV+$KEV_NCD_GTID;                       '
'    status       float_equals      NEMS_PAR+$KNEMS_STATUS;                 '
'    chn_mask     float_equals      NEMS_PAR+$KNEMS_MUX_CHAN;               '
'    mux_box      float_equals      NEMS_PAR+$KNEMS_MUX_BOX;                '
'    scope        float_equals      NEMS_PAR+$KNEMS_OS;                     '
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.

*DO   NTPR  403  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
1                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
'ncddata3;'             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.
'    gtid         float_equals      EV+$KEV_NCD_GTID;              '
'    pk_ht        ncd_scope_peak    NEMS_PAR;                      '
'    pk_wid       reserved;                                        '
'    pk_cen       reserved;                                        '
'    bg_ht        reserved;                                        '
'    bg_rms       reserved;                                        '
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.

*DO   NTPR  404  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
1                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
'ncddata3;'             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.
'    gtid         float_equals      EV+$KEV_NCD_GTID;              '
'    pk_ht        ncd_scope_peak    NEMS;                          '
'    pk_wid       reserved;                                        '
'    pk_cen       reserved;                                        '
'    bg_ht        reserved;                                        '
'    bg_rms       reserved;                                        '
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.
 
*DO   NTPR  600  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
1                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' vertex; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function              Parameter(s)
#.    Name
#.
'    class         float_equals         MCVX+$KMCVX_CLS;                    '
'    int_ttt       unpack_interact      MCVX+$KMCVX_INC;                    '
'    int_ppp       reserved;                                                '
'    int_ccc       reserved;                                                '
'    v_pos         magnitude            MCVX+$KMCVX_PSX;                    '
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.
 
*----------------------------------------------------------------------------
*---
*---    This is similar to 605 but is based on the PBUN banks.  Note that
*---    these banks ONLY contain digitised raw data.  However they do
*---    record every PMT bundle in the ZDAB, not just PMTs.
*---
*---    Contact: N. West, Oxford
*---
*---
*----------------------------------------------------------------------------

*DO   NTPR  604  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
1                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
'pmt_bndl;'             #.   Ntuple name.
#.
'    ev_tid         float_equals         EV+$KEV_GTR_ID;     '
'    ev_trglo       bits                 EV+$KEV_TRG_TYPE,0,16;   '
'    ev_trghi       bits                 EV+$KEV_TRG_TYPE,16,16;   '
'    ev_npm         float_equals         EV+$KEV_NPM;        '
'    ev_nph         equals               EV+$KEV_NPH;        '
'    crate          bits                 pbun+$KPMT_PIN,5,5; '
'    pbunilx        equals               pbun+$KPMT_PILX;    '
'    pbunihs        equals               pbun+$KPMT_PIHS;    '
'    pbunihl        equals               pbun+$KPMT_PIHL;    '
'    pbunif         float_equals         pbun+$KPMT_PIF;     '
'    pbunit         equals               pbun+$KPMT_PIT;     '
'    pbuncell       float_equals         pbun+$KPMT_CELL;    '
 
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.
 
*----------------------------------------------------------------------------
*---
*---    Standard Ntuples for looking at hit PMT's using the short fat banks
*---    (there should therefore be one entry into this ntuple for every hit
*---     which actually triggered a phototube)
*---
*---    Contact: D. Wark, Oxford
*---
*---
*----------------------------------------------------------------------------

*DO   NTPR  605  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
1                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' hitpmt; '             #.   Ntuple name.
#.
'    ev_tid         float_equals         EV+$KEV_GTR_ID;     '
'    ev_trglo       bits                 EV+$KEV_TRG_TYPE,0,16;   '
'    ev_trghi       bits                 EV+$KEV_TRG_TYPE,16,16;   '
'    ev_npm         float_equals         EV+$KEV_NPM;        '
'    ev_nph         equals               EV+$KEV_NPH;        '
'    crate          bits                 pmt+$KPMT_PIN,5,5;  '
'    card           bits                 pmt+$KPMT_PIN,10,4; '
'    channel        bits                 pmt+$KPMT_PIN,0,5;  '
'    cell           float_equals         pmt+$KPMT_CELL;     '
'    pmtn           float_equals         pmt+$KPMT_PN;       '
'    pmtx           pmt_xyz              pmt+$KPMT_PN;       '
'    pmty           reserved;                                '
'    pmtz           reserved;                                '
'    pmtlx          equals               pmt+$KPMT_PLX;      '
'    pmths          equals               pmt+$KPMT_PHS;      '
'    pmthl          equals               pmt+$KPMT_PHL;      '
'    pmtt           equals               pmt+$KPMT_PT;       '
'    pmtt0          equals               pmt+$KPMT_PT0;      '
'    pmtf           float_equals         pmt+$KPMT_PF;       '
'    pmtilx         equals               pmt+$KPMT_PILX;     '
'    pmtihs         equals               pmt+$KPMT_PIHS;     '
'    pmtihl         equals               pmt+$KPMT_PIHL;     '
'    pmtif          float_equals         pmt+$KPMT_PIF;      '
'    pmtit          equals               pmt+$KPMT_PIT;      '
'    pmtit0         equals               pmt+$KPMT_PIT0;     '
 
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.

*------------------------------------------------------------------------------
*--- The 655 NTUPLE is similar to the 605 NTUPLE but carries the information 
*--- from the FECD channels which have been modified to accept input from 
*--- calibration sources.
*------------------------------------------------------------------------------

 
*DO   NTPR  655  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
1                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' hitpmt; '             #.   Ntuple name.
#.
'    ev_tid         float_equals         EV+$KEV_GTR_ID;     '
'    ev_trglo       bits                 EV+$KEV_TRG_TYPE,0,16;   '
'    ev_trghi       bits                 EV+$KEV_TRG_TYPE,16,16;   '
'    ev_npm         float_equals         EV+$KEV_NPM;        '
'    ev_nph         equals               EV+$KEV_NPH;        '
'    crate          bits                 fecd+$KPMT_PIN,5,5;  '
'    card           bits                 fecd+$KPMT_PIN,10,4; '
'    channel        bits                 fecd+$KPMT_PIN,0,5;  '
'    cell           float_equals         fecd+$KPMT_CELL;     '
'    pmtlx          equals               fecd+$KPMT_PLX;      '
'    pmths          equals               fecd+$KPMT_PHS;      '
'    pmthl          equals               fecd+$KPMT_PHL;      '
'    pmtt           equals               fecd+$KPMT_PT;       '
'    pmtf           float_equals         fecd+$KPMT_PF;       '
'    pmtilx         equals               fecd+$KPMT_PILX;     '
'    pmtihs         equals               fecd+$KPMT_PIHS;     '
'    pmtihl         equals               fecd+$KPMT_PIHL;     '
'    pmtif          float_equals         fecd+$KPMT_PIF;      '
'    pmtit          equals               fecd+$KPMT_PIT;      '
 
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.
 
 
*DO   NTPR  606  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
1                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' hitpmt; '             #.   Ntuple name.
#.
'    evnum         float_equals         EV+2;          '
'    pmtn        float_equals   pmt+$KPMT_PN;          '
'    pmtx        pmt_xyz        pmt+$KPMT_PN;          '
'    pmty        reserved;                             '
'    pmtz        reserved;                             '
'    pmtilx      equals         pmt+$KPMT_PILX;        '
'    pmtihl      equals         pmt+$KPMT_PIHL;        '
'    pmtihs      equals         pmt+$KPMT_PIHS;        '
'    pmtit       equals         pmt+$KPMT_PIT;         '
'    pmtin       float_equals   pmt+$KPMT_PIN;         '
'    pmtc        float_equals   pmt+$KPMT_CELL;        ' 
#.    Below are the charge and time from the pulser taken from the eped
#.    hanging below the run_header
'    eca_qw       equals         prm_eped+1;             '
'    eca_q        equals         prm_eped+4;             '
'    eca_crat     equals         prm_eped+5;             '
'    eca_type     float_equals   prm_eped+6;             '
'    eca_gtid     equals         prm_eped+7;             '
  
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.
 
 
 
*----------------------------------------------------------------------------
*---
*---    Standard Ntuples for looking at Muons
*---
*---    Contact: D. Wark, Oxford
*---
*---
*----------------------------------------------------------------------------

*DO   NTPR  601  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
1                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
'  nhits; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.
'    nhits        float_equals      EV+11;                '
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.

  
*DO   NTPR  602  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
1                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' hitpmt; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
 
'    pmtn        float_equals  mcpm+1;                 '
'    pmtx        pmt_xyz       MCPM+1;                 '
'    pmty        reserved;                             '
'    pmtz        reserved;                             '
'    pmtt        single_equals  mcpm+2;                '
'    pmtt0       single_equals  mcpm+6;                '
'    pmtq        equals         mcpm+5;                '
 
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.
 
*DO   NTPR  603  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' muvrtx; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function              Parameter(s)
#.    Name
#.
#.'    evnum         float_equals         EV+2;           '
'    class         float_equals         MCVX+1;         '
'    int_ttt       unpack_interact      MCVX+2;         '
'    int_ppp       reserved;                            '
'    int_ccc       reserved;                            '
'    v_pos         magnitude            MCVX+3;         '
'    xv           equals            MCVX+3;               '
'    yv           equals            MCVX+4;               '
'    zv           equals            MCVX+5;               '
'    tv           single_equals     MCVX+6;               '
 
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.
 
*DO   NTPR  609  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
1                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' muvrtx; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function              Parameter(s)
#.    Name
#.
'    class         float_equals         MCVX+1: 0.5 1.5;   '
'    int_ttt       unpack_interact      MCVX+2;         '
'    int_ppp       reserved;                            '
'    int_ccc       reserved;                            '
'    v_pos         magnitude            MCVX+3;         '
'    xv           equals            MCVX+3;               '
'    yv           equals            MCVX+4;               '
'    zv           equals            MCVX+5;               '
'    tv           single_equals     MCVX+6;               '
'    uv           equals            MCTK+$KMCTK_DRX;               '          
'    vv           equals            MCTK+$KMCTK_DRY;               '          
'    wv           equals            MCTK+$KMCTK_DRZ;               '          
'    theta        theta_phi         MCTK+$KMCTK_DRX;                        '
'    phi          reserved;                                                 '

 
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.
 
*DO   NTPR  613  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' muvrtx; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function              Parameter(s)
#.    Name
#.
#.'    evnum         float_equals         EV+2;           '
'    class         float_equals         MCVX+1: 1.5 2.5 ;    '
'    int_ttt       unpack_interact      MCVX+2;         '
'    int_ppp       reserved;                            '
'    int_ccc       reserved;                            '
'    v_pos         magnitude            MCVX+3: 899.5 900.5;  '
'    xv           equals            MCVX+3;               '
'    yv           equals            MCVX+4;               '
'    zv           equals            MCVX+5;               '
'    tv           single_equals     MCVX+6;               '
'    theta        theta_phi         MCTK+$KMCTK_DRX;                        '
'    phi          reserved;                                                 '
'    u            equals           MCTK+$KMCTK_DRX;                        '
'    v            equals           MCTK+$KMCTK_DRy;                        '
'    w            equals           MCTK+$KMCTK_DRz;                        '
'    particle     float_equals      mctk+$kmctk_idp: 1.5 2.5; '
'    energy       equals            mctk+$KMCTK_ENE;         '

'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.

*----------------------------------------------------------------------------
*---
*---  Atten Fitter Ntuple.
*---
*----------------------------------------------------------------------------


*DO   NTPR  666  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
1                       #.   Discard partial entry: =0 No, =1 Yes.
0                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Call NTP_PACK_USER: =0 No, =1 Yes
' fitter; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.
#. Event Parameters.
#. =================                    '
#.   fta output
#.  ==================
'    xfa          equals            FTAV+$KFTXV_X;            '
'    yfa          equals            FTAV+$KFTXV_Y;            '
'    zfa          equals            FTAV+$KFTXV_Z;            '
'    rfa          magnitude         FTAV+$KFTXV_X;            '
#. =================                    '
#.  Path fitter output
#.  ==================
'    xfp          equals            FTPV+$KFTXV_X;            '
'    yfp          equals            FTPV+$KFTXV_Y;            '
'    zfp          equals            FTPV+$KFTXV_Z;            '
'    rfp          magnitude         FTPV+$KFTXV_X;            '
#. =================                    '
#.  FTU fitter output
#.  ==================
'    xfu          equals            FTUV+$KFTXV_X;                    '
'    yfu          equals            FTUV+$KFTXV_Y;                    '
'    zfu          equals            FTUV+$KFTXV_Z;                    '
'    rfu          magnitude         FTUV+$KFTXV_X;                    '
'    thetafu      theta_phi         FTUT+$KFTXT_U;                    '
'    phifu        reserved;                                           '
'    tfitu        equals            FTUV+$KFTXV_T;                    '
#. MC Event Data
#. =============
'    vx_cls       float_equals      MCVX+$KMCVX_CLS: 0.5 1.5;   '
'    revent       magnitude         MCVX+$KMCVX_PSX;                  '
'    mc_x           equals            MCVX+$KMCVX_PSX;                  '
'    mc_y           equals            MCVX+$KMCVX_PSY;                  '
'    mc_z           equals            MCVX+$KMCVX_PSZ;                  '
'    theta        theta_phi         MCVX-$KMCVX_MCTK+$KMCTK_DRX;      '
'    phi          reserved;                                           '
'    tgen         single_equals     MCVX+$KMCVX_TIM;                  '
'    t_mc_pmt     single_equals     MCPM+$KMCPM_TIM;                  '
'    gen_time     float_equals      MC+$KMC_UT2;                      '
#.
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple
 
*----------------------------------------------------------------------------
*---
*---    Standard Neutron Banks.
*---
*---    Contact:  N.A. Jelley,  Oxford.
*---
*---
*----------------------------------------------------------------------------
*--- These banks collect data about neutrons.
*---   700 :- Neutron source vertices.
*---   701 :- Neutron sink vertices.
*---   702 :- (n,gamma) absorption vertices.
*---   703 :- (n,n) principally neutron scattering vertices.
*---   704 :- (gamma,n) principally photodisintegration vertices.
*---   705 :- Neutron target,interaction,radius,energy,angle.
*---   706 :- Neutron capture and fitted capture radii.
*---
*---   710 :- (r1-r2)^2, for (n,gamma) vertices, without a pre-source vertex.
*---   711 :- (r1-r2)^2, for sink vertices, without a pre-source vertex.
*---   712 :- (r1-r2)^2, for (n,gamma) vertices, with a pre-source vertex.
*---   713 :- (r1-r2)^2, for sink vertices, with a pre-source vertex.
*---
*---   720 :- Neutron (gamma,n) capture, media, NHITS.
*---   721 :- Neutron (n,gamma) capture, media, NHITS.
*---   722 :- Neutron (n,other) capture, media, NHITS.
*----------------------------------------------------------------------------
*---
*--- For neutron capture distances, either 710/711 or 712/713 should be used.
*--- To use both is wasteful (but not illegal).
*---
*----------------------------------------------------------------------------

*DO   NTPR  700  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
1                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' vertex; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function              Parameter(s)
#.    Name
#.
'    id         float_equals      MCVX-$KMCVX_MCTK+$KMCTK_IDP : 80.9 81.1;    '
'    class      float_equals      MCVX+$KMCVX_CLS: 0.9 1.1;                   '
'    int_ttt    unpack_interact   MCVX+$KMCVX_INC;                            '
'    int_ppp    reserved;                                                     '
'    int_ccc    reserved;                                                     '
'    modr       magnitude         MCVX+$KMCVX_PSX;                            '
'    posx       equals            MCVX+$KMCVX_PSX;                            '
'    posy       equals            MCVX+$KMCVX_PSY;                            '
'    posz       equals            MCVX+$KMCVX_PSZ;                            '
'    time       single_equals     MCVX+$KMCVX_TIM;                            '
'    region     float_equals      MCVX+$KMCVX_RGN;                            '
'    medium     float_equals      MCVX+$KMCVX_IDM;                            '
'    dirx       equals            MCVX-$KMCVX_MCTK+$KMCTK_DRX;                '
'    diry       equals            MCVX-$KMCVX_MCTK+$KMCTK_DRY;                '
'    dirz       equals            MCVX-$KMCVX_MCTK+$KMCTK_DRZ;                '
'    egy        equals            MCVX-$KMCVX_MCTK+$KMCTK_ENE;                '
'    near       equals            MCVX-$KMCVX_MCTK+$KMCTK_NEAR;               '
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.
 
*DO   NTPR  701  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
1                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' vertex; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function              Parameter(s)
#.    Name
#.
'    id         float_equals      MCVX-$KMCVX_MCTKI+$KMCTK_IDP: 80.9 81.1;    '
'    class      float_equals      MCVX+$KMCVX_CLS:   3.9 4.1;                 '
'    int_ttt    unpack_interact   MCVX+$KMCVX_INC;                            '
'    int_ppp    reserved;                                                     '
'    int_ccc    reserved;                                                     '
'    modr       magnitude         MCVX+$KMCVX_PSX;                            '
'    posx       equals            MCVX+$KMCVX_PSX;                            '
'    posy       equals            MCVX+$KMCVX_PSY;                            '
'    posz       equals            MCVX+$KMCVX_PSZ;                            '
'    time       single_equals     MCVX+$KMCVX_TIM;                            '
'    region     float_equals      MCVX+$KMCVX_RGN;                            '
'    medium     float_equals      MCVX+$KMCVX_IDM;                            '
'    dirx       equals            MCVX-$KMCVX_MCTKI+$KMCTK_DRX;               '
'    diry       equals            MCVX-$KMCVX_MCTKI+$KMCTK_DRY;               '
'    dirz       equals            MCVX-$KMCVX_MCTKI+$KMCTK_DRZ;               '
'    egy        equals            MCVX-$KMCVX_MCTKI+$KMCTK_ENE ;              '
'    near       equals            MCVX-$KMCVX_MCTKI+$KMCTK_NEAR;              '
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.
 
*DO   NTPR  702  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
1                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' vertex; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function              Parameter(s)
#.    Name
#.
'    id         float_equals      MCVX-$KMCVX_MCTKI+$KMCTK_IDP: 80.9 81.1;    '
'    ido        float_equals      MCVX-$KMCVX_MCTK+$KMCTK_IDP : 1.9 2.1;      '
'    class      float_equals      MCVX+$KMCVX_CLS:   2.9 3.1;                 '
'    int_ttt    unpack_interact   MCVX+$KMCVX_INC;                            '
'    int_ppp    reserved;                                                     '
'    int_ccc    reserved;                                                     '
'    modr       magnitude         MCVX+$KMCVX_PSX;                            '
'    posx       equals            MCVX+$KMCVX_PSX;                            '
'    posy       equals            MCVX+$KMCVX_PSY;                            '
'    posz       equals            MCVX+$KMCVX_PSZ;                            '
'    time       single_equals     MCVX+$KMCVX_TIM;                            '
'    region     float_equals      MCVX+$KMCVX_RGN;                            '
'    medium     float_equals      MCVX+$KMCVX_IDM;                            '
'    dirx       equals            MCVX-$KMCVX_MCTKI+$KMCTK_DRX;               '
'    diry       equals            MCVX-$KMCVX_MCTKI+$KMCTK_DRY;               '
'    dirz       equals            MCVX-$KMCVX_MCTKI+$KMCTK_DRZ;               '
'    egy        equals            MCVX-$KMCVX_MCTKI+$KMCTK_ENE ;              '
'    near       equals            MCVX-$KMCVX_MCTKI+$KMCTK_NEAR;              '
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.
 
*DO   NTPR  703  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
1                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' vertex; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function              Parameter(s)
#.    Name
#.
'    id1        float_equals      MCVX-$KMCVX_MCTKI+$KMCTK_IDP: 80.9 81.1;    '
'    id2        float_equals      MCVX-$KMCVX_MCTK+$KMCTK_IDP : 80.9 81.1;    '
'    class      float_equals      MCVX+$KMCVX_CLS:   2.9 3.1;                 '
'    int_ttt    unpack_interact   MCVX+$KMCVX_INC;                            '
'    int_ppp    reserved;                                                     '
'    int_ccc    reserved;                                                     '
'    modr       magnitude         MCVX+$KMCVX_PSX;                            '
'    posx       equals            MCVX+$KMCVX_PSX;                            '
'    posy       equals            MCVX+$KMCVX_PSY;                            '
'    posz       equals            MCVX+$KMCVX_PSZ;                            '
'    time       single_equals     MCVX+$KMCVX_TIM;                            '
'    region     float_equals      MCVX+$KMCVX_RGN;                            '
'    medium     float_equals      MCVX+$KMCVX_IDM;                            '
'    dirx1      equals            MCVX-$KMCVX_MCTKI+$KMCTK_DRX;               '
'    diry1      equals            MCVX-$KMCVX_MCTKI+$KMCTK_DRY;               '
'    dirz1      equals            MCVX-$KMCVX_MCTKI+$KMCTK_DRZ;               '
'    egy1       equals            MCVX-$KMCVX_MCTKI+$KMCTK_ENE ;              '
'    near1      equals            MCVX-$KMCVX_MCTKI+$KMCTK_NEAR;              '
'    dirx2      equals            MCVX-$KMCVX_MCTK+$KMCTK_DRX;                '
'    diry2      equals            MCVX-$KMCVX_MCTK+$KMCTK_DRY;                '
'    dirz2      equals            MCVX-$KMCVX_MCTK+$KMCTK_DRZ;                '
'    egy2       equals            MCVX-$KMCVX_MCTK+$KMCTK_ENE;                '
'    near2      equals            MCVX-$KMCVX_MCTK+$KMCTK_NEAR;               '
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.
 
*DO   NTPR  704  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
1                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' vertex; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function              Parameter(s)
#.    Name
#.
#.
'    id1        float_equals      MCVX-$KMCVX_MCTKI+$KMCTK_IDP: 1.9 2.1;      '
'    id2        float_equals      MCVX-$KMCVX_MCTK+$KMCTK_IDP : 80.9 81.1;    '
'    class      float_equals      MCVX+$KMCVX_CLS:   2.9 3.1;                 '
'    int_ttt    unpack_interact   MCVX+$KMCVX_INC;                            '
'    int_ppp    reserved;                                                     '
'    int_ccc    reserved;                                                     '
'    modr       magnitude         MCVX+$KMCVX_PSX;                            '
'    posx       equals            MCVX+$KMCVX_PSX;                            '
'    posy       equals            MCVX+$KMCVX_PSY;                            '
'    posz       equals            MCVX+$KMCVX_PSZ;                            '
'    time       single_equals     MCVX+$KMCVX_TIM;                            '
'    region     float_equals      MCVX+$KMCVX_RGN;                            '
'    medium     float_equals      MCVX+$KMCVX_IDM;                            '
'    dirx1      equals            MCVX-$KMCVX_MCTKI+$KMCTK_DRX;               '
'    diry1      equals            MCVX-$KMCVX_MCTKI+$KMCTK_DRY;               '
'    dirz1      equals            MCVX-$KMCVX_MCTKI+$KMCTK_DRZ;               '
'    egy1       equals            MCVX-$KMCVX_MCTKI+$KMCTK_ENE ;              '
'    near1      equals            MCVX-$KMCVX_MCTKI+$KMCTK_NEAR;              '
'    dirx2      equals            MCVX-$KMCVX_MCTK+$KMCTK_DRX;                '
'    diry2      equals            MCVX-$KMCVX_MCTK+$KMCTK_DRY;                '
'    dirz2      equals            MCVX-$KMCVX_MCTK+$KMCTK_DRZ;                '
'    egy2       equals            MCVX-$KMCVX_MCTK+$KMCTK_ENE;                '
'    near2      equals            MCVX-$KMCVX_MCTK+$KMCTK_NEAR;               '
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.
 
*DO   NTPR  705  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' vertex; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function              Parameter(s)
#.    Name
#.
' id       float_equals      MCVX-$KMCVX_MCTKI+$KMCTK_IDP : 80.9 81.1;       '
' class    float_equals      MCVX+$KMCVX_CLS: 2.9 4.1;                       '
' int_ttt  unpack_interact   MCVX+$KMCVX_INC: 0.9 1000.1;                    '
' int_ppp  reserved;                                                         '
' int_ccc  reserved;                                                         '
' modr     magnitude         MCVX+$KMCVX_PSX;                                '
' egy      equals            MCVX-$KMCVX_MCTK+$KMCTK_ENE;                    '
' cosine   dot     MCVX-$KMCVX_MCTKI+$KMCTK_DRX,MCVX-$KMCVX_MCTK+$KMCTK_DRX; '
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.
 
*DO   NTPR  706  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' vertex; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function              Parameter(s)
#.    Name
#.
'    id         float_equals      MCVX-$KMCVX_MCTKI+$KMCTK_IDP: 80.9 81.1;    '
'    ttt        unpack_interact   MCVX+$KMCVX_INC:   0.1  1000.1;             '
'    ppp        reserved                         :   325.9 332.1;             '
'    ccc        reserved;                                                     '
'    r          magnitude         MCVX+$KMCVX_PSX;                            '
'    fr         magnitude         FTTV+$KFTXV_X;                              '
'    nhits      float_equals      EV+$KEV_NPM;                                '
'    region     float_equals      MCVX+$KMCVX_RGN;                            '
'    medium     float_equals      MCVX+$KMCVX_IDM;                            '
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.
 
*DO   NTPR  710  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
1                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' vertex; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function              Parameter(s)
#.    Name
#.
#.
'    id1        float_equals      MCVX-$KMCVX_MCTKI+$KMCTK_IDP: 80.9 81.1;    '
'    id2        float_equals      MCVX-$KMCVX_MCTK+$KMCTK_IDP : 1.9 2.1;      '
'    class      float_equals      MCVX+$KMCVX_CLS:   2.9 3.1;                 '
'    int_ttt    unpack_interact   MCVX+$KMCVX_INC;                            '
'    int_ppp    reserved;                                                     '
'    int_ccc    reserved;                                                     '
'    posx1      equals            MCVX+$KMCVX_PSX;                            '
'    posy1      equals            MCVX+$KMCVX_PSY;                            '
'    posz1      equals            MCVX+$KMCVX_PSZ;                            '
'    time1      single_equals     MCVX+$KMCVX_TIM;                            '
'    region1    float_equals      MCVX+$KMCVX_RGN;                            '
'    medium1    float_equals      MCVX+$KMCVX_IDM;                            '
'    egy1       equals            MCVX-$KMCVX_MCTKI+$KMCTK_ENE ;              '
'    posx2      equals            MC-$KMC_MCVX+$KMCVX_PSX;                    '
'    posy2      equals            MC-$KMC_MCVX+$KMCVX_PSY;                    '
'    posz2      equals            MC-$KMC_MCVX+$KMCVX_PSZ;                    '
'    time2      single_equals     MC-$KMC_MCVX+$KMCVX_TIM;                    '
'    region2    float_equals      MC-$KMC_MCVX+$KMCVX_RGN;                    '
'    medium2    float_equals      MC-$KMC_MCVX+$KMCVX_IDM;                    '
'    egy2       equals            MC-$KMC_MCVX-$KMCVX_MCTK+$KMCTK_ENE;         '
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.
 
*DO   NTPR  711  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
1                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' vertex; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function              Parameter(s)
#.    Name
#.
#.
'    id         float_equals      MCVX-$KMCVX_MCTKI+$KMCTK_IDP: 80.9 81.1;    '
'    class      float_equals      MCVX+$KMCVX_CLS:   3.9 4.1;                 '
'    int_ttt    unpack_interact   MCVX+$KMCVX_INC;                            '
'    int_ppp    reserved;                                                     '
'    int_ccc    reserved;                                                     '
'    posx1      equals            MCVX+$KMCVX_PSX;                            '
'    posy1      equals            MCVX+$KMCVX_PSY;                            '
'    posz1      equals            MCVX+$KMCVX_PSZ;                            '
'    time1      single_equals     MCVX+$KMCVX_TIM;                            '
'    region1    float_equals      MCVX+$KMCVX_RGN;                            '
'    medium1    float_equals      MCVX+$KMCVX_IDM;                            '
'    egy1       equals            MCVX-$KMCVX_MCTKI+$KMCTK_ENE ;              '
'    posx2      equals            MC-$KMC_MCVX+$KMCVX_PSX;                    '
'    posy2      equals            MC-$KMC_MCVX+$KMCVX_PSY;                    '
'    posz2      equals            MC-$KMC_MCVX+$KMCVX_PSZ;                    '
'    time2      single_equals     MC-$KMC_MCVX+$KMCVX_TIM;                    '
'    region2    float_equals      MC-$KMC_MCVX+$KMCVX_RGN;                    '
'    medium2    float_equals      MC-$KMC_MCVX+$KMCVX_IDM;                    '
'    egy2       equals            MC-$KMC_MCVX-$KMCVX_MCTK+$KMCTK_ENE;         '
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.
 
*DO   NTPR  712  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
1                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' vertex; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function              Parameter(s)
#.    Name
#.
#.
'    id1        float_equals      MCVX-$KMCVX_MCTKI+$KMCTK_IDP: 80.9 81.1;    '
'    id2        float_equals      MCVX-$KMCVX_MCTK+$KMCTK_IDP : 1.9 2.1;      '
'    class      float_equals      MCVX+$KMCVX_CLS:   2.9 3.1;                 '
'    int_ttt    unpack_interact   MCVX+$KMCVX_INC;                            '
'    int_ppp    reserved;                                                     '
'    int_ccc    reserved;                                                     '
'    posx1      equals            MCVX+$KMCVX_PSX;                            '
'    posy1      equals            MCVX+$KMCVX_PSY;                            '
'    posz1      equals            MCVX+$KMCVX_PSZ;                            '
'    time1      single_equals     MCVX+$KMCVX_TIM;                            '
'    region1    float_equals      MCVX+$KMCVX_RGN;                            '
'    medium1    float_equals      MCVX+$KMCVX_IDM;                            '
'    egy1       equals            MCVX-$KMCVX_MCTKI+$KMCTK_ENE ;              '
'    posx2      equals         MC-$KMC_MCVX-$KMCVX_MCTK-$KMCTK_MCVX+$KMCVX_PSX;'
'    posy2      equals         MC-$KMC_MCVX-$KMCVX_MCTK-$KMCTK_MCVX+$KMCVX_PSY;'
'    posz2      equals         MC-$KMC_MCVX-$KMCVX_MCTK-$KMCTK_MCVX+$KMCVX_PSZ;'
'    time2      single_equals  MC-$KMC_MCVX-$KMCVX_MCTK-$KMCTK_MCVX+$KMCVX_TIM;'
'    region2    float_equals   MC-$KMC_MCVX-$KMCVX_MCTK-$KMCTK_MCVX+$KMCVX_RGN;'
'    medium2    float_equals   MC-$KMC_MCVX-$KMCVX_MCTK-$KMCTK_MCVX+$KMCVX_IDM;'
'    egy2 equals MC-$KMC_MCVX-$KMCVX_MCTK-$KMCTK_MCVX-$KMCVX_MCTK+$KMCTK_ENE;  '
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.
 
*DO   NTPR  713  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
1                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' vertex; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function              Parameter(s)
#.    Name
#.
#.
'    id         float_equals      MCVX-$KMCVX_MCTKI+$KMCTK_IDP: 80.9 81.1;    '
'    class      float_equals      MCVX+$KMCVX_CLS:   3.9 4.1;                 '
'    int_ttt    unpack_interact   MCVX+$KMCVX_INC;                            '
'    int_ppp    reserved;                                                     '
'    int_ccc    reserved;                                                     '
'    posx1      equals            MCVX+$KMCVX_PSX;                            '
'    posy1      equals            MCVX+$KMCVX_PSY;                            '
'    posz1      equals            MCVX+$KMCVX_PSZ;                            '
'    time1      single_equals     MCVX+$KMCVX_TIM;                            '
'    region1    float_equals      MCVX+$KMCVX_RGN;                            '
'    medium1    float_equals      MCVX+$KMCVX_IDM;                            '
'    egy1       equals            MCVX-$KMCVX_MCTKI+$KMCTK_ENE ;              '
'    posx2      equals         MC-$KMC_MCVX-$KMCVX_MCTK-$KMCTK_MCVX+$KMCVX_PSX;'
'    posy2      equals         MC-$KMC_MCVX-$KMCVX_MCTK-$KMCTK_MCVX+$KMCVX_PSY;'
'    posz2      equals         MC-$KMC_MCVX-$KMCVX_MCTK-$KMCTK_MCVX+$KMCVX_PSZ;'
'    time2      single_equals  MC-$KMC_MCVX-$KMCVX_MCTK-$KMCTK_MCVX+$KMCVX_TIM;'
'    region2    float_equals   MC-$KMC_MCVX-$KMCVX_MCTK-$KMCTK_MCVX+$KMCVX_RGN;'
'    medium2    float_equals   MC-$KMC_MCVX-$KMCVX_MCTK-$KMCTK_MCVX+$KMCVX_IDM;'
'    egy2 equals MC-$KMC_MCVX-$KMCVX_MCTK-$KMCTK_MCVX-$KMCVX_MCTK+$KMCTK_ENE;  '
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.
 
*DO   NTPR  720  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' vertex; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function              Parameter(s)
#.    Name
#.
#.
'    idi        float_equals      MCVX-$KMCVX_MCTKI+$KMCTK_IDP: 1.9 2.1;      '
'    ido        float_equals      MCVX-$KMCVX_MCTK+$KMCTK_IDP : 80.9 81.1;    '
'    class      float_equals      MCVX+$KMCVX_CLS:   2.9 3.1;                 '
'    int_ttt    unpack_interact   MCVX+$KMCVX_INC;                            '
'    int_ppp    reserved;                                                     '
'    int_ccc    reserved;                                                     '
'    region     float_equals      MCVX+$KMCVX_RGN;                            '
'    medium     float_equals      MCVX+$KMCVX_IDM;                            '
'    modr       magnitude         MCVX+$KMCVX_PSX;                            '
'    nhits1     float_equals      MAST-$KMAST_EV+$KEV_NPM;                    '
'    nhits2     float_equals      MAST-$KMAST_EV-+0$KEV_NPM;                  '
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.
 
*DO   NTPR  721  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' vertex; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function              Parameter(s)
#.    Name
#.
#.
'    idi        float_equals      MCVX-$KMCVX_MCTKI+$KMCTK_IDP: 80.9 81.1;    '
'    ido        float_equals      MCVX-$KMCVX_MCTK+$KMCTK_IDP : 1.9 2.1;      '
'    class      float_equals      MCVX+$KMCVX_CLS:   2.9 3.1;                 '
'    int_ttt    unpack_interact   MCVX+$KMCVX_INC;                            '
'    int_ppp    reserved;                                                     '
'    int_ccc    reserved;                                                     '
'    region     float_equals      MCVX+$KMCVX_RGN;                            '
'    medium     float_equals      MCVX+$KMCVX_IDM;                            '
'    modr       magnitude         MCVX+$KMCVX_PSX;                            '
'    nhits1     float_equals      MAST-$KMAST_EV+$KEV_NPM;                    '
'    nhits2     float_equals      MAST-$KMAST_EV-+0$KEV_NPM;                  '
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.
 
*DO   NTPR  722  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' vertex; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function              Parameter(s)
#.    Name
#.
#.
'    id         float_equals      MCVX-$KMCVX_MCTKI+$KMCTK_IDP: 80.9 81.1;    '
'    class      float_equals      MCVX+$KMCVX_CLS:   3.9 4.1;                 '
'    int_ttt    unpack_interact   MCVX+$KMCVX_INC;                            '
'    int_ppp    reserved;                                                     '
'    int_ccc    reserved;                                                     '
'    region     float_equals      MCVX+$KMCVX_RGN;                            '
'    medium     float_equals      MCVX+$KMCVX_IDM;                            '
'    modr       magnitude         MCVX+$KMCVX_PSX;                            '
'    nhits1     float_equals      MAST-$KMAST_EV+$KEV_NPM;                    '
'    nhits2     float_equals      MAST-$KMAST_EV-+0$KEV_NPM;                  '
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.
*----------------------------------------------------------------------------
*---
*---    Standard Ntuple to test geometry (just look at sources and boundaries).
*---
*---    Contact: N. West, Oxford
*---
*---
*----------------------------------------------------------------------------

*DO   NTPR  800  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
1                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
'  t_geom;'             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.
'    vx_cls       float_equals      MCVX+$KMCVX_CLS: 1. 2.  ;               '
'    vx_x         equals            MCVX+$KMCVX_PSX;                        '
'    vx_y         equals            MCVX+$KMCVX_PSY;                        '
'    vx_z         equals            MCVX+$KMCVX_PSZ;                        '
'    reg_1        region_type       MCVX+$KMCVX_RGN;                        '
'    ser_1        region_serial     MCVX+$KMCVX_RGN;                        '
'    reg_2        region_type       MCVX+$KMCVX_RG2;                        '
'    ser_2        region_serial     MCVX+$KMCVX_RG2;                        '
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple
 
*----------------------------------------------------------------------------
*---
*---    Example n-tuple to look at RLOG bank.
*---
*---    Contact: N. West, Oxford
*---
*---
*----------------------------------------------------------------------------

*DO   NTPR  850  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
1                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
'  t_rlog;'             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.
'    r_time       float_equals      RLOG+5;                     '
'    sub_runs     float_equals      RLOG+6;                     '
#.
#.   Triggers: Any, NHIT100: Number, exposure, rate and RMS
#.
'    any_nu       float_equals      RLOG+151;                   '
'    any_ex       equals            RLOG+152;                   '
'    any_ra       equals            RLOG+153;                   '
'    any_rm       equals            RLOG+154;                   '
'    nh100_nu     float_equals      RLOG+155;                   '
'    nh100_ex     equals            RLOG+156;                   '
'    nh100_ra     equals            RLOG+157;                   '
'    nh100_rm     equals            RLOG+158;                   '

#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple
 
*----------------------------------------------------------------------------
*---
*---    Grid Fitter Ntuple Bank.  (short version)
*---
*---    Contact:  M. Moorhead,  LBL.
*---
*----------------------------------------------------------------------------
*DO   NTPR  900  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
0                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' grid00; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.
'    class        float_equals      MCVX+$KMCVX_CLS;                        '
'    int_ttt      unpack_interact   MCVX+$KMCVX_INC;                        '
'    int_ppp      reserved;                                                 '
'    int_ccc      reserved;                                                 '
'    part         float_equals      MCTK+$KMCTK_IDP;                        '
'    revent       magnitude         MCVX+$KMCVX_PSX;                        '
'    theta        theta_phi         MCTK+$KMCTK_DRX;                        '
'    phi          reserved;                                                 '
'    rfit         magnitude         FTGV+$KFTXV_X;                          '
'    thetaf       theta_phi         FTGT+$KFTXT_U;                          '
'    phif         reserved;                                                 '
'    cos_sun      dot               MCTK+$KMCTK_DRX, FTGT+$KFTXT_U;         '
'    nhits        float_equals      EV+$KEV_NPM;                            '
'    like         equals            FTG+$KFTG_M_LIKE;                       '
'    prob         equals            FTG+$KFTX_PROB;                         '
'    rdev         distance          FTGV+$KFTXV_X,   MCVX+$KMCVX_PSX;       '
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.
 
*----------------------------------------------------------------------------
*---
*---    Grid Fitter Ntuple Bank. (long version)
*---
*---    Contact:  M. Moorhead,  LBL.
*---
*----------------------------------------------------------------------------
*DO   NTPR  901  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
0                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' grid01; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.
'    revent       magnitude         MCVX+$KMCVX_PSX;                        '
'    xe           equals            MCVX+$KMCVX_PSX;                        '
'    ye           equals            MCVX+$KMCVX_PSY;                        '
'    ze           equals            MCVX+$KMCVX_PSZ;                        '
'    theta        theta_phi         MCTK+$KMCTK_DRX;                        '
'    phi          reserved;                                                 '
'    rfit         magnitude         FTGV+$KFTXV_X;                          '
'    tgen         single_equals     MCVX+$KMCVX_TIM;                        '
'    egen         equals            MCTK+$KMCTK_ENE;                        '
'    xf           equals            FTGV+$KFTXV_X;                          '
'    yf           equals            FTGV+$KFTXV_Y;                          '
'    zf           equals            FTGV+$KFTXV_Z;                          '
'    thetaf       theta_phi         FTGT+$KFTXT_U;                          '
'    phif         reserved;                                                 '
'    tfit         equals            FTGV+$KFTXV_T;                          '
'    nhits        float_equals      EV+$KEV_NPM;                            '
'    navail       float_equals      FTG+$KFTX_PMT_avail;                    '
'    nused        float_equals      FTG+$KFTX_PMT_USED;                     '
'    fused        equals            FTG+$KFTG_F_USED;                       '
'    like         equals            FTG+$KFTG_M_LIKE;                       '
'    likeg        equals            FTG+$KFTG_M_LIKE_GRID;                  '
'    liker        equals            FTG+$KFTG_M_LIKE_RATIO;                 '
'    prob         equals            FTG+$KFTX_PROB;                         '
'    rgrid        equals            FTG+$KFTG_RFIT_GRID;                    '
'    rcube        equals            FTG+$KFTG_RCUBE;                        '
'    rdev         distance          FTGV+$KFTXV_X,   MCVX+$KMCVX_PSX;       '
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.
 
*----------------------------------------------------------------------------
*---
*---    Network Classifier Ntuple Banks.
*---
*---    Contact:  M. Thorman,  Oxford.
*---
*----------------------------------------------------------------------------
*DO   NTPR  910  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
0                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' clndata; '            #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.
'    revent       magnitude         MCVX+$KMCVX_PSX;                        '
'    xe           equals            MCVX+$KMCVX_PSX;                        '
'    ye           equals            MCVX+$KMCVX_PSY;                        '
'    ze           equals            MCVX+$KMCVX_PSZ;                        '
'    theta        theta_phi         MCTK+$KMCTK_DRX;                        '
'    phi          reserved;                                                 '
'    rfit         magnitude         FTTV+$KFTXV_X;                          '
'    xf           equals            FTTV+$KFTXV_X;                          '
'    yf           equals            FTTV+$KFTXV_Y;                          '
'    zf           equals            FTTV+$KFTXV_Z;                          '
'    thetaf       theta_phi         FTTT+$KFTXT_U;                          '
'    phif         reserved;                                                 '
'    rdev         distance          FTTV+$KFTXV_X,   MCVX+$KMCVX_PSX;       '
'    nhits        float_equals      EV+$KEV_NPM;                            '
'    ncln         float_equals      CLN+$KCLN_PMT_USED;                     '
'    p1           equals            CLNP+1;                                 '
'    p2           equals            CLNP+2;                                 '
'    p3           equals            CLNP+3;                                 '
'    p4           equals            CLNP+4;                                 '
'    p5           equals            CLNP+5;                                 '
'    theta_ij     equals            CLNP+6;                                 '
'    net_out      equals            CLNO+1;                                 '
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.

*DO   NTPR  911  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
0                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' ftxcdata; '           #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.
'    nhit1        equals            FTTC+$KFTXC_NHIT_1;                     '
'    sold1        equals            FTTC+$KFTXC_SOL_DIR_1;                  '
'    harm1        equals            FTTC+$KFTXC_HAR_1;                      '
'    harm2        equals            FTTC+$KFTXC_HAR_2;                      '
'    harm3        equals            FTTC+$KFTXC_HAR_3;                      '
'    harm4        equals            FTTC+$KFTXC_HAR_4;                      '
'    harm5        equals            FTTC+$KFTXC_HAR_5;                      '
'    rshm1        equals            FTTC+$KFTXC_RES_HAR_1;                  '
'    rshm2        equals            FTTC+$KFTXC_RES_HAR_2;                  '
'    rshm3        equals            FTTC+$KFTXC_RES_HAR_3;                  '
'    rshm4        equals            FTTC+$KFTXC_RES_HAR_4;                  '
'    rshm5        equals            FTTC+$KFTXC_RES_HAR_5;                  '
'    resi1        equals            FTTC+$KFTXC_RES_1;                      '
'    resi2        equals            FTTC+$KFTXC_RES_2;                      '
'    resi3        equals            FTTC+$KFTXC_RES_3;                      '
'    resi4        equals            FTTC+$KFTXC_RES_4;                      '
'    resi5        equals            FTTC+$KFTXC_RES_5;                      '
'    lplo1        equals            FTTC+$KFTXC_LEG_1;                      '
'    lpol2        equals            FTTC+$KFTXC_LEG_2;                      '
'    lpol3        equals            FTTC+$KFTXC_LEG_3;                      '
'    lpol4        equals            FTTC+$KFTXC_LEG_4;                      '
'    lpol5        equals            FTTC+$KFTXC_LEG_5;                      '
'    thij1        equals            FTTC+$KFTXC_THETA_IJ_1;                 '
'    nklh1        equals            FTTC+$KFTXC_NECK_LIKE_1;                '
'    hein1        equals            FTTC+$KFTXC_ANG_CORR_1;                 '
'    hein2        equals            FTTC+$KFTXC_ANG_CORR_2;                 '
'    hein3        equals            FTTC+$KFTXC_ANG_CORR_3;                 '
'    hein4        equals            FTTC+$KFTXC_ANG_CORR_4;                 '
'    hein5        equals            FTTC+$KFTXC_ANG_CORR_5;                 '
'    hein6        equals            FTTC+$KFTXC_ANG_CORR_6;                 '
'    hein7        equals            FTTC+$KFTXC_ANG_CORR_7;                 '
'    hein8        equals            FTTC+$KFTXC_ANG_CORR_8;                 '
'    hein9        equals            FTTC+$KFTXC_ANG_CORR_9;                 '
'    hein10       equals            FTTC+$KFTXC_ANG_CORR_10;                '
'    hein11       equals            FTTC+$KFTXC_ANG_CORR_11;                '
'    hein12       equals            FTTC+$KFTXC_ANG_CORR_12;                '
'    hein13       equals            FTTC+$KFTXC_ANG_CORR_13;                '
'    hein14       equals            FTTC+$KFTXC_ANG_CORR_14;                '
'    hein15       equals            FTTC+$KFTXC_ANG_CORR_15;                '
'    hein16       equals            FTTC+$KFTXC_ANG_CORR_16;                '
'    hein17       equals            FTTC+$KFTXC_ANG_CORR_17;                '
'    intr1        equals            FTTC+$KFTXC_ITR_1;                      '

#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.

#.  Standard ntuple definitions for unified SNO analysis.
#.=======================================================================
#.  Ntuple 206 was the first unified ntuple and was the primary ntuple 
#.  for the first PRL.
*DO   NTPR  206  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Call NTP_PACK_USER: =0 No, =1 Yes
' snontp;'              #.   Ntuple name.
#.
#.  General Event information
#.  =========================
'    ev_run       float_equals      EV+$KEV_RUN;            '
'    ev_num       float_equals      EV+$KEV_EVN;            '
'    ev_tid       float_equals      EV+$KEV_GTR_ID;         '
'    data_set     data_splitter;                            '
'    date         float_equals      EV+$KEV_DTE;            '
'    time         float_equals      EV+$KEV_HMSC;           '
'    time_jdy     ntime             EV+$KEV_JDY;            '
'    time_s       reserved                           ;      '
'    time_us      reserved                           ;      '
'    time_ns      reserved                           ;      '
'    ev_trglo     bits              EV+$KEV_TRG_TYPE,0,16;  '
'    ev_trghi     bits              EV+$KEV_TRG_TYPE,16,16; '
'    nhits        float_equals      EV+$KEV_NPM;            '
'    nowls        nzbank            EV-$KEV_OWL;            '
'    nneck        nzbank            EV-$KEV_NECK;           '
'    drxsun       dirsun            EV+$KEV_JDY;            '
'    drysun       reserved;                                 '
'    drzsun       reserved;                                 '
'    adamn1       dmm_get_emask     0;                      '
'    adamn2       reserved;                                 '
'    rdamn1       reserved;                                 '
'    rdamn2       reserved;                                 '
#.'    ev_chrge     float_equals      EV+$KEV_NPH;            '
'    amb_peak     float_equals      EV+$KEV_PEAK;           '
#.'    amb_diff     float_equals      EV+$KEV_DIFF;           '
'    amb_int      float_equals      EV+$KEV_INT;            '
#.  Time fitter output
#.  ==================
'    xf           equals            FTTV+$KFTXV_X;          '
'    yf           equals            FTTV+$KFTXV_Y;          '
'    zf           equals            FTTV+$KFTXV_Z;          '
'    thetaf       theta_phi         FTTT+$KFTXT_U;          '
'    phif         reserved;                                 '
'    tfit         equals            FTTV+$KFTXV_T;          '
'    nfit         float_equals      FTT+$KFTX_PMT_USED;     '
'    nearly       float_equals      FTT+$KFTX_EARLY;        '
'    nlate        float_equals      FTT+$KFTX_LATE ;        '
'    chi2         equals            FTT+$KFTT_CHI;          '
#.  Grid fitter output
#.  ==================
'    xfg          equals            FTGV+$KFTXV_X;          '
'    yfg          equals            FTGV+$KFTXV_Y;          '
'    zfg          equals            FTGV+$KFTXV_Z;          '
'    thetafg      theta_phi         FTGT+$KFTXT_U;          '
'    phifg        reserved;                                 '
'    tfg          equals            FTGV+$KFTXV_T;          '
'    nfitg        float_equals      FTG+$KFTX_PMT_USED;     '
#.'    nearlyg      float_equals      FTG+$KFTX_EARLY;        '
#.'    nlateg       float_equals      FTG+$KFTX_LATE ;        '
'    like1        equals            FTG+$KFTG_M_LIKE;       '
'    nfitg1       float_equals      FTG+$KFTX_PMT_AVAIL;    '
'    xfg_e        equals            FTGV+$KFTXV_DX;         '  
'    yfg_e        equals            FTGV+$KFTXV_DY;         '  
'    zfg_e        equals            FTGV+$KFTXV_DZ;         '  
'    tfg_e        equals            FTGV+$KFTXV_DT;         '  
'    like2        equals            FTGT+7;                 '
'    nfitg2       float_equals      FTGT+8;                 '
#.  Elastic fitter output
#.  =====================
'    xfe          equals            FTEV+$KFTXV_X;          '
'    yfe          equals            FTEV+$KFTXV_Y;          '
'    zfe          equals            FTEV+$KFTXV_Z;          '
'    thetafe      theta_phi         FTET+$KFTXT_U;          '
'    phife        reserved;                                 '
'    tfite        equals            FTEV+$KFTXV_T;          '
'    nfite        float_equals      FTE+$KFTX_PMT_USED;     '
#.'    nearlye      float_equals      FTE+$KFTX_EARLY;        '
#.'    nlatee       float_equals      FTE+$KFTX_LATE ;        '
'    poseng       equals            FTE+$KFTE_POS_ENG;      '
'    direng       equals            FTE+$KFTE_DIR_ENG;      '
#.  Path fitter output
#.  ==================
'    xfp          equals            FTPV+$KFTXV_X;          '
'    yfp          equals            FTPV+$KFTXV_Y;          '
'    zfp          equals            FTPV+$KFTXV_Z;          '
'    thetafp      theta_phi         FTPT+$KFTXT_U;          '
'    phifp        reserved;                                 '
'    tfitp        equals            FTPV+$KFTXV_T;          '
#.'    nfitp        float_equals      FTP+$KFTX_PMT_USED;     '
#.'    nearlyp      float_equals      FTP+$KFTX_EARLY;        '
#.'    nlatep       float_equals      FTP+$KFTX_LATE ;        '
'    probp        equals            FTP+$KFTX_PROB;         '
'    a2dprb       equals            FTP+$KFTP_KSPROB_ANG2D; '
'    phiprb       equals            FTP+$KFTP_KSPROB_ANG_PHI;'
#.'    timprb       equals            FTP+$KFTP_KSPROB_TIM;   '
#.  Other event information
#.  =======================
#.'    r_enrgy      equals            RSP+$KRSP_ENE;          '
#.'    nintime      float_equals      CLN+$KCLN_PMT_USED;     '
#.'    thetaij      equals            CLNP+6;                 '
#.'    corchi       equals            CLNP+8;                 '
#.'    cchiprb      equals            CLNP+10;                '
'    costsun      equals            CLNP+1;                                 '
'    thetaij      equals            CLNP+2;                                 '
'    corrchis     equals            CLNP+3;                                 '
'    corcsqtw     equals            CLNP+4;                                 '
'    angcor3      equals            CLNP+5;                                 '
'    angcor4      equals            CLNP+6;                                 '
'    angcor5      equals            CLNP+7;                                 '
'    angcor6      equals            CLNP+8;                                 '
'    angcor7      equals            CLNP+9;                                 '
'    angcor8      equals            CLNP+10;                                 '
'    itr          equals            CLNP+11;                                 '
'    nwin         equals            RSP+$KRSP_NWIN;                   '
'    ene          equals            RSP+$KRSP_ENE;                    '
'    vx_cls       float_equals      MCVX+$KMCVX_CLS: -1000000. 1.5;         '
#.  Monte Carlo event information
#.  =======================
'    revent       magnitude         MCVX+$KMCVX_PSX;                        '
'    xe           equals            MCVX+$KMCVX_PSX;                        '
'    ye           equals            MCVX+$KMCVX_PSY;                        '
'    ze           equals            MCVX+$KMCVX_PSZ;                        '
'    theta        theta_phi         MCTK+$KMCTK_DRX;                        '
'    phi          reserved;                                                 '
'    tgen         single_equals     MCVX+$KMCVX_TIM;                        '
'    egen         equals            MCTK+$KMCTK_ENE;                        '
'    eneu         equals            MCVX-$KMCVX_MCTKI+$KMCTK_ENE;           '
'    numcer       equals            EGS4+7, EGS4+8, EGS4+9;                 '
'    int_ttt      unpack_interact      MCVX+$KMCVX_INC;                     '
'    int_ppp      reserved;                                                 '
'    int_ccc      reserved;                                                 '
'    ncrates      config_info;                                              '
'    nslots       reserved;                                                 '
'    nrelays      reserved;                                                 '
'    n100ns       reserved;                                                 '
'    nseq         reserved;                                                 '
'    nch_hvon     reserved;                                                 '
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.
#.  Standard ntuple definitions for unified SNO analysis.
#.=======================================================================
#.  A refined version of 206 also used for the first PRL.
*DO   NTPR  207  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Call NTP_PACK_USER: =0 No, =1 Yes
' snontp;'             #.   Ntuple name.
#.
#.  General Event information
#.  =========================
'    ev_run       float_equals      EV+$KEV_RUN;            '
'    ev_num       float_equals      EV+$KEV_EVN;            '
'    ev_tid       float_equals      EV+$KEV_GTR_ID;         '
'    data_set     data_splitter;                            '
'    dset10       data_splitter     30;                     '
'    date         float_equals      EV+$KEV_DTE;            '
'    time         float_equals      EV+$KEV_HMSC;           '
'    time_jdy     ntime             EV+$KEV_JDY;            '
'    time_s       reserved                           ;      '
'    time_us      reserved                           ;      '
'    time_ns      reserved                           ;      '
'    ev_trglo     bits              EV+$KEV_TRG_TYPE,0,16;  '
'    ev_trghi     bits              EV+$KEV_TRG_TYPE,16,16; '
'    nhits        float_equals      EV+$KEV_NPM;            '
'    nowls        nzbank            EV-$KEV_OWL;            '
'    nneck        nzbank            EV-$KEV_NECK;           '
'    nbutt        nzbank            EV-$KEV_BUTT;           '
'    nlg          nzbank            EV-$KEV_LG;             '
'    nfecd        nzbank            EV-$KEV_FECD;           '
'    drxsun       dirsun            EV+$KEV_JDY;            '
'    drysun       reserved;                                 '
'    drzsun       reserved;                                 '
'    adamn1       dmm_get_emask     0;                      '
'    adamn2       reserved;                                 '
'    rdamn1       reserved;                                 '
'    rdamn2       reserved;                                 '
#.'    ev_chrge     float_equals      EV+$KEV_NPH;            '
'    amb_peak     float_equals      EV+$KEV_PEAK;           '
#.'    amb_diff     float_equals      EV+$KEV_DIFF;           '
'    amb_int      float_equals      EV+$KEV_INT;            '
#.  Time fitter output
#.  ==================
'    xf           equals            FTTV+$KFTXV_X;          '
'    yf           equals            FTTV+$KFTXV_Y;          '
'    zf           equals            FTTV+$KFTXV_Z;          '
'    thetaf       theta_phi         FTTT+$KFTXT_U;          '
'    phif         reserved;                                 '
'    tfit         equals            FTTV+$KFTXV_T;          '
'    nfit         float_equals      FTT+$KFTX_PMT_USED;     '
'    nearly       float_equals      FTT+$KFTX_EARLY;        '
'    nlate        float_equals      FTT+$KFTX_LATE ;        '
'    chi2         equals            FTT+$KFTT_CHI;          '
#.  Grid fitter output
#.  ==================
'    xfg          equals            FTGV+$KFTXV_X;          '
'    yfg          equals            FTGV+$KFTXV_Y;          '
'    zfg          equals            FTGV+$KFTXV_Z;          '
'    thetafg      theta_phi         FTGT+$KFTXT_U;          '
'    phifg        reserved;                                 '
'    tfg          equals            FTGV+$KFTXV_T;          '
'    nfitg        float_equals      FTG+$KFTX_PMT_USED;     '
#.'    nearlyg      float_equals      FTG+$KFTX_EARLY;        '
#.'    nlateg       float_equals      FTG+$KFTX_LATE ;        '
'    like1        equals            FTG+$KFTG_M_LIKE;       '
'    nfitg1       float_equals      FTG+$KFTX_PMT_AVAIL;    '
'    xfg_e        equals            FTGV+$KFTXV_DX;         '  
'    yfg_e        equals            FTGV+$KFTXV_DY;         '  
'    zfg_e        equals            FTGV+$KFTXV_DZ;         '  
'    tfg_e        equals            FTGV+$KFTXV_DT;         '  
'    like2        equals            FTGT+7;                 '
'    nfitg2       float_equals      FTGT+8;                 '
#.  Elastic fitter output
#.  =====================
'    xfe          equals            FTEV+$KFTXV_X;          '
'    yfe          equals            FTEV+$KFTXV_Y;          '
'    zfe          equals            FTEV+$KFTXV_Z;          '
'    thetafe      theta_phi         FTET+$KFTXT_U;          '
'    phife        reserved;                                 '
'    tfite        equals            FTEV+$KFTXV_T;          '
'    nfite        float_equals      FTE+$KFTX_PMT_USED;     '
#.'    nearlye      float_equals      FTE+$KFTX_EARLY;        '
#.'    nlatee       float_equals      FTE+$KFTX_LATE ;        '
'    poseng       equals            FTE+$KFTE_POS_ENG;      '
'    direng       equals            FTE+$KFTE_DIR_ENG;      '
#.  Path fitter output
#.  ==================
'    xfp          equals            FTPV+$KFTXV_X;          '
'    yfp          equals            FTPV+$KFTXV_Y;          '
'    zfp          equals            FTPV+$KFTXV_Z;          '
'    thetafp      theta_phi         FTPT+$KFTXT_U;          '
'    phifp        reserved;                                 '
'    tfitp        equals            FTPV+$KFTXV_T;          '
#.'    nfitp        float_equals      FTP+$KFTX_PMT_USED;     '
#.'    nearlyp      float_equals      FTP+$KFTX_EARLY;        '
#.'    nlatep       float_equals      FTP+$KFTX_LATE ;        '
'    probp        equals            FTP+$KFTX_PROB;         '
'    a2dprb       equals            FTP+$KFTP_KSPROB_ANG2D; '
'    phiprb       equals            FTP+$KFTP_KSPROB_ANG_PHI;'
#.'    timprb       equals            FTP+$KFTP_KSPROB_TIM;   '
#.  Other event information
#.  =======================
#.'    r_enrgy      equals            RSP+$KRSP_ENE;          '
#.'    nintime      float_equals      CLN+$KCLN_PMT_USED;     '
#.'    thetaij      equals            CLNP+6;                 '
#.'    corchi       equals            CLNP+8;                 '
#.'    cchiprb      equals            CLNP+10;                '
'    costsun      equals            CLNP+1;                                 '
'    thetaij      equals            CLNP+2;                                 '
'    corrchis     equals            CLNP+3;                                 '
'    corcsqtw     equals            CLNP+4;                                 '
'    itr          equals            CLNP+11;                                 '
'    nwin         equals            RSP+$KRSP_NWIN;                   '
'    ene          equals            RSP+$KRSP_ENE;                    '
'    rsp_neff     equals            RSP+$KRSP_NEFF;                    '
'    rsp_nwk      equals            RSP+$KRSP_NWORKING;                    '
'    rsp_opt      equals            RSP+$KRSP_OPTICAL_RESPONSE;             '
'    rsp_onln     equals            RSP+$KRSP_NONLINE;             '
'    rsp_ncal     equals            RSP+$KRSP_NCAL;             '
'    rsp_ncor     equals            RSP+$KRSP_NCOR;             '
'    vx_cls       float_equals      MCVX+$KMCVX_CLS: -1000000. 1.5;         '
#.  Monte Carlo event information
#.  =======================
'    xe           equals            MCVX+$KMCVX_PSX;                        '
'    ye           equals            MCVX+$KMCVX_PSY;                        '
'    ze           equals            MCVX+$KMCVX_PSZ;                        '
'    theta        theta_phi         MCTK+$KMCTK_DRX;                        '
'    phi          reserved;                                                 '
'    tgen         single_equals     MCVX+$KMCVX_TIM;                        '
'    egen         equals            MCTK+$KMCTK_ENE;                        '
'    eneu         equals            MCVX-$KMCVX_MCTKI+$KMCTK_ENE;           '
'    numcer       equals            EGS4+7, EGS4+8, EGS4+9;                 '
'    int_ttt      unpack_interact      MCVX+$KMCVX_INC;                     '
'    int_ppp      reserved;                                                 '
'    int_ccc      reserved;                                                 '
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.


*----------------------------------------------------------------------------
*---
*---  Path Fitter Unified Ntuple. Used for the D2O NC and DN papers.
*---
*----------------------------------------------------------------------------
*DO   NTPR  210  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Call NTP_PACK_USER: =0 No, =1 Yes
'  upath; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.

#.
#.  General Event information
#.  =========================
'    mc_ver       equals            MAST+$KMAST_SNOMAN_VER;   '
'    pmteff      equals             MCMA.1+24;                '
'    ev_run       float_equals      EV+$KEV_RUN;              ' 
'    ev_num       float_equals      EV+$KEV_EVN;              '
'    ev_tid       float_equals      EV+$KEV_GTR_ID;           '
'    data_set     data_splitter     30;                       '
'    date         float_equals      EV+$KEV_DTE;              '
'    time         float_equals      EV+$KEV_HMSC;             '
'    time_jdy     ntime             EV+$KEV_JDY;              '
'    time_s       reserved                           ;        '
'    time_us      reserved                           ;        '
'    time_ns      reserved                           ;        '
'    ev_trglo     bits              EV+$KEV_TRG_TYPE,0,16;    '
'    ev_trghi     bits              EV+$KEV_TRG_TYPE,16,16;   '
'    nhits        float_equals      EV+$KEV_NPM;              '
'    nowls        nzbank            EV-$KEV_OWL;              '
'    nneck        nzbank            EV-$KEV_NECK;             '
'    drxsun       dirsun            EV+$KEV_JDY;              '
'    drysun       reserved;                                   '
'    drzsun       reserved;                                   '
'    adamn1       dmm_get_emask     0;                        '
'    adamn2       reserved;                                   '
'    rdamn1       reserved;                                   '
'    rdamn2       reserved;                                   '
'    amb_peak     float_equals      EV+$KEV_PEAK;             '
'    amb_int      float_equals      EV+$KEV_INT;              '
#.  Path fitter output
#.  ==================
'    xfp          equals            FTPV+$KFTXV_X;            '
'    yfp          equals            FTPV+$KFTXV_Y;            '
'    zfp          equals            FTPV+$KFTXV_Z;            '
'    rfp          magnitude         FTPV+$KFTXV_X;            '
'    thetafp      theta_phi         FTPT+$KFTXT_U;            '
'    phifp        reserved;                                   '
'    tfitp        equals            FTPV+$KFTXV_T;            '
'    a2dprb       equals            FTP+$KFTP_KSPROB_ANG2D;   '
'    phiprb       equals            FTP+$KFTP_KSPROB_ANG_PHI; '
#.  Classifier
#.  =======================
'    costsun      equals            FTPC+$KFTXC_SOL_DIR_1;       '
'    thetaij      equals            FTPC+$KFTXC_THETA_IJ_1;      '
'    corrchis     equals            FTPC+$KFTXC_ANG_CORR_1;      '
'    corcsqtw     equals            FTPC+$KFTXC_ANG_CORR_2;      '
'    angcor3      equals            FTPC+$KFTXC_ANG_CORR_3;      '
'    angcor4      equals            FTPC+$KFTXC_ANG_CORR_4;      '
'    angcor5      equals            FTPC+$KFTXC_ANG_CORR_5;      '
'    angcor6      equals            FTPC+$KFTXC_ANG_CORR_6;      '
'    angcor7      equals            FTPC+$KFTXC_ANG_CORR_7;      '
'    angcor8      equals            FTPC+$KFTXC_ANG_CORR_8;      '
'    itr          equals            FTPC+$KFTXC_ITR_1 ;          '
#.  RSP PATH
#.  =======================
'    nwinp        equals            FTPR+$KRSP_NWIN;              '
'    enep         equals            FTPR+$KRSP_ENE;               '
'    rspneffp     equals            FTPR+$KRSP_NEFF;              '
'    rsp_optp     equals            FTPR+$KRSP_OPTICAL_RESPONSE;  '
'    rspncorp     equals            FTPR+$KRSP_NCOR;              ' 
#.  RSP COMMON
#.  =======================
'    rsp_nwk      equals            FTPR+$KRSP_NWORKING;                    '
'    rsp_onln     equals            FTPR+$KRSP_NONLINE;                     '
'    rsp_ncal     equals            FTPR+$KRSP_NCAL;                        '
'    rsp_drif     equals            FTPR+$KRSP_DRIFT;                       '
'    rsp_nhit     equals            FTPR+$KRSP_NHITS;                       '
'    rsp_allq     equals            FTPR+26;                  '
'    rsp_dqxx     equals            FTPR+27;                  '
'    vx_cls       float_equals      MCVX+$KMCVX_CLS: -1000000. 1.5;         '
#.  Monte Carlo event information
#.  =======================
'    revent       magnitude         MCVX+$KMCVX_PSX;                        '
'    xe           equals            MCVX+$KMCVX_PSX;                        '
'    ye           equals            MCVX+$KMCVX_PSY;                        '
'    ze           equals            MCVX+$KMCVX_PSZ;                        '
'    theta        theta_phi         MCVX-$KMCVX_MCTK+$KMCTK_DRX;            '
'    phi          reserved;                                                 '
'    tgen         single_equals     MCVX+$KMCVX_TIM;                        '
'    egen         equals            MCVX-$KMCVX_MCTK+$KMCTK_ENE;            '
'    eneu         equals            MCVX-$KMCVX_MCTKI+$KMCTK_ENE;           '
'    numcer       equals            EGS4+7, EGS4+8, EGS4+9;                 '
'    int_ttt      unpack_interact   MCVX+$KMCVX_INC;                        '
'    int_ppp      reserved;                                                 '
'    int_ccc      reserved;                                                 '
'    ncrates      config_info;                                              '
'    nslots       reserved;                                                 '
'    nrelays      reserved;                                                 '
'    n100ns       reserved;                                                 '
'    nseq         reserved;                                                 '
'    nch_hvon     reserved;                                                 '
'    neutron      neutron;                                                  '
#.
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple

*----------------------------------------------------------------------------
*---
*---  Grid Fitter Unified Ntuple. Used for the D2O NC and DN papers.
*---
*----------------------------------------------------------------------------
*DO   NTPR  211  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Call NTP_PACK_USER: =0 No, =1 Yes
'  ugrid; '             #.   Ntuple name.
#.
#.     There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.

#.
#.  General Event information
#.  =========================
'    mc_ver       equals            MAST+$KMAST_SNOMAN_VER; '
'    pmteff       equals            MCMA.1+24;              '
'    ev_run       float_equals      EV+$KEV_RUN;            '
'    ev_num       float_equals      EV+$KEV_EVN;            '
'    ev_tid       float_equals      EV+$KEV_GTR_ID;         '
'    data_set     data_splitter     30;                     '
'    date         float_equals      EV+$KEV_DTE;            '
'    time         float_equals      EV+$KEV_HMSC;           '
'    time_jdy     ntime             EV+$KEV_JDY;            '
'    time_s       reserved                           ;      '
'    time_us      reserved                           ;      '
'    time_ns      reserved                           ;      '
'    ev_trglo     bits              EV+$KEV_TRG_TYPE,0,16;  '
'    ev_trghi     bits              EV+$KEV_TRG_TYPE,16,16; '
'    nhits        float_equals      EV+$KEV_NPM;            '
'    nowls        nzbank            EV-$KEV_OWL;            '
'    nneck        nzbank            EV-$KEV_NECK;           '
'    drxsun       dirsun            EV+$KEV_JDY;            '
'    drysun       reserved;                                 '
'    drzsun       reserved;                                 '
'    adamn1       dmm_get_emask     0;                      '
'    adamn2       reserved;                                 '
'    rdamn1       reserved;                                 '
'    rdamn2       reserved;                                 '
'    amb_peak     float_equals      EV+$KEV_PEAK;           '
'    amb_int      float_equals      EV+$KEV_INT;            '
#.  Grid fitter output
#.  ==================
'    xfg          equals            FTGV+$KFTXV_X;          '
'    yfg          equals            FTGV+$KFTXV_Y;          '
'    zfg          equals            FTGV+$KFTXV_Z;          '
'    rfg          magnitude         FTGV+$KFTXV_X;          '
'    thetafg      theta_phi         FTGT+$KFTXT_U;          '
'    phifg        reserved;                                 '
'    tfg          equals            FTGV+$KFTXV_T;          '
'    nfitg        float_equals      FTG+$KFTX_PMT_USED;     '
'    like1        equals            FTG+$KFTG_M_LIKE;       '
'    nfitg1       float_equals      FTG+$KFTX_PMT_AVAIL;    '
'    xfg_e        equals            FTGV+$KFTXV_DX;         '
'    yfg_e        equals            FTGV+$KFTXV_DY;         '
'    zfg_e        equals            FTGV+$KFTXV_DZ;         '
'    tfg_e        equals            FTGV+$KFTXV_DT;         '
'    like2        equals            FTGT+7;                 '
'    nfitg2       float_equals      FTGT+8;                 '
#.  Classifier
#.  =======================
'    costsun      equals            FTGC+$KFTXC_SOL_DIR_1;       '
'    thetaij      equals            FTGC+$KFTXC_THETA_IJ_1;      '
'    corrchis     equals            FTGC+$KFTXC_ANG_CORR_1;      '
'    corcsqtw     equals            FTGC+$KFTXC_ANG_CORR_2;      '
'    angcor3      equals            FTGC+$KFTXC_ANG_CORR_3;      '
'    angcor4      equals            FTGC+$KFTXC_ANG_CORR_4;      '
'    angcor5      equals            FTGC+$KFTXC_ANG_CORR_5;      '
'    angcor6      equals            FTGC+$KFTXC_ANG_CORR_6;      '
'    angcor7      equals            FTGC+$KFTXC_ANG_CORR_7;      '
'    angcor8      equals            FTGC+$KFTXC_ANG_CORR_8;      '
'    itr          equals            FTGC+$KFTXC_ITR_1 ;          '
#.  RSP GRID
#.  =======================
'    nwing        equals            FTGR+$KRSP_NWIN;              '
'    eneg         equals            FTGR+$KRSP_ENE;               '
'    rspneffg     equals            FTGR+$KRSP_NEFF;              '
'    rsp_optg     equals            FTGR+$KRSP_OPTICAL_RESPONSE;  '
'    rspncorg     equals            FTGR+$KRSP_NCOR;              ' 
#.  RSP COMMON
#.  =======================
'    rsp_nwk      equals            FTGR+$KRSP_NWORKING;                    '
'    rsp_onln     equals            FTGR+$KRSP_NONLINE;                     '
'    rsp_ncal     equals            FTGR+$KRSP_NCAL;                        '
'    rsp_drif     equals            FTGR+$KRSP_DRIFT;                       '
'    rsp_nhit     equals            FTGR+$KRSP_NHITS;                       '
'    rsp_allq     equals            FTGR+26;                                '
'    rsp_dqxx     equals            FTGR+27;                                '
'    vx_cls       float_equals      MCVX+$KMCVX_CLS: -1000000. 1.5;         '
#.  Monte Carlo event information
#.  =======================
'    revent       magnitude         MCVX+$KMCVX_PSX;                        '
'    xe           equals            MCVX+$KMCVX_PSX;                        '
'    ye           equals            MCVX+$KMCVX_PSY;                        '
'    ze           equals            MCVX+$KMCVX_PSZ;                        '
'    theta        theta_phi         MCVX-$KMCVX_MCTK+$KMCTK_DRX;            '
'    phi          reserved;                                                 '
'    tgen         single_equals     MCVX+$KMCVX_TIM;                        '
'    egen         equals            MCVX-$KMCVX_MCTK+$KMCTK_ENE;            '
'    eneu         equals            MCVX-$KMCVX_MCTKI+$KMCTK_ENE;           '
'    numcer       equals            EGS4+7, EGS4+8, EGS4+9;                 '
'    int_ttt      unpack_interact      MCVX+$KMCVX_INC;                     '
'    int_ppp      reserved;                                                 '
'    int_ccc      reserved;                                                 '
'    ncrates      config_info;                                              '
'    nslots       reserved;                                                 '
'    nrelays      reserved;                                                 '
'    n100ns       reserved;                                                 '
'    nseq         reserved;                                                 '
'    nch_hvon     reserved;                                                 '
'    neutron      neutron;                                                  '
#.
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple
*----------------------------------------------------------------------------
*---
*---  Fitter Comparison Unified Ntuple.   Used for the D2O NC and DN papers.
*---
*----------------------------------------------------------------------------


*DO   NTPR  212  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Call NTP_PACK_USER: =0 No, =1 Yes
' fitcom; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.

#.
#.  General Event information
#.  =========================
'    mc_ver	  equals            MAST+$KMAST_SNOMAN_VER; '
'    pmteff       equals            MCMA.1+24;              '
'    nhits        float_equals      EV+$KEV_NPM;            '
'    drxsun       dirsun            EV+$KEV_JDY;            '
'    drysun       reserved;                                 '
'    drzsun       reserved;                                 '
'    adamn1       dmm_get_emask     0;                      '
'    adamn2       reserved;                                 '
'    rdamn1       reserved;                                 '
'    rdamn2       reserved;                                 '
'    amb_peak     float_equals      EV+$KEV_PEAK;           '
'    amb_int      float_equals      EV+$KEV_INT;            '
#.  Grid fitter output
#.  ==================
'    xfg          equals            FTGV+$KFTXV_X;          '
'    yfg          equals            FTGV+$KFTXV_Y;          '
'    zfg          equals            FTGV+$KFTXV_Z;          '
'    rfg          magnitude         FTGV+$KFTXV_X;          '
'    thetafg      theta_phi         FTGT+$KFTXT_U;          '
'    phifg        reserved;                                 '
'    tfg          equals            FTGV+$KFTXV_T;          '
#.  Path fitter output
#.  ==================
'    xfp          equals            FTPV+$KFTXV_X;          '
'    yfp          equals            FTPV+$KFTXV_Y;          '
'    zfp          equals            FTPV+$KFTXV_Z;          '
'    rfp          magnitude         FTPV+$KFTXV_X;          '
'    thetafp      theta_phi         FTPT+$KFTXT_U;          '
'    phifp        reserved;                                 '
'    tfitp        equals            FTPV+$KFTXV_T;          '
#.  RSP GRID
#.  =======================
'    nwing        equals            FTGR+$KRSP_NWIN;              '
'    eneg         equals            FTGR+$KRSP_ENE;               '
'    rspneffg     equals            FTGR+$KRSP_NEFF;              '
'    rsp_optg     equals            FTGR+$KRSP_OPTICAL_RESPONSE;  '
'    rspncorg     equals            FTGR+$KRSP_NCOR;              ' 
#.  RSP PATH
#.  =======================
'    nwinp        equals            FTPR+$KRSP_NWIN;              '
'    enep         equals            FTPR+$KRSP_ENE;               '
'    rspneffp     equals            FTPR+$KRSP_NEFF;              '
'    rsp_optp     equals            FTPR+$KRSP_OPTICAL_RESPONSE;  '
'    rspncorp     equals            FTPR+$KRSP_NCOR;              ' 
#.  RSP COMMON
#.  =======================
'    rsp_nwk      equals            FTPR+$KRSP_NWORKING;          '
'    rsp_onln     equals            FTPR+$KRSP_NONLINE;                     '
'    rsp_ncal     equals            FTPR+$KRSP_NCAL;                        '
'    rsp_drif     equals            FTPR+$KRSP_DRIFT;                       '
'    rsp_nhit     equals            FTPR+$KRSP_NHITS;                       '
'    rsp_allq     equals            FTPR+26;                  '
'    rsp_dqxx     equals            FTPR+27;                  '
'    vx_cls       float_equals      MCVX+$KMCVX_CLS: -1000000. 1.5;         '
#.  Monte Carlo event information
#.  =======================
'    revent       magnitude         MCVX+$KMCVX_PSX;                        '
'    xe           equals            MCVX+$KMCVX_PSX;                        '
'    ye           equals            MCVX+$KMCVX_PSY;                        '
'    ze           equals            MCVX+$KMCVX_PSZ;                        '
'    theta        theta_phi         MCVX-$KMCVX_MCTK+$KMCTK_DRX;            '
'    phi          reserved;                                                 '
'    tgen         single_equals     MCVX+$KMCVX_TIM;                        '
'    egen         equals            MCVX-$KMCVX_MCTK+$KMCTK_ENE;            '
'    eneu         equals            MCVX-$KMCVX_MCTKI+$KMCTK_ENE;           '
'    numcer       equals            EGS4+7, EGS4+8, EGS4+9;                 '
'    int_ttt      unpack_interact      MCVX+$KMCVX_INC;                     '
'    int_ppp      reserved;                                                 '
'    int_ccc      reserved;                                                 '
'    neutron      neutron;                                                  '
#.
#.
*----------------------------------------------------------------------------
*---
*---  Standard MCPROD Ntuple for the Salt and D2O hep analyses.
*---  Revision History.
*---  18:Aug:2004: Ver 2.0 : N. McCauley Add new words for NCD phase and 
*---                                     muon analysis.
*---  18:Nov:2004: Ver 3.0 : N. McCauley Add Alt RSP energy.
*---  15:Feb:2005: Var 4.0 : D. Waller   Add MCPL Info.
*---  02:Sep:2005: Ver 5.0 : N. McCauley Add rsp number of iterations.
*---
*----------------------------------------------------------------------------
*DO   NTPR  330  -i(35I 1F 3I -H)  -n5000                #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Call NTP_PACK_USER: =0 No, =1 Yes
' snontp; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.

#.
#.  General Event information
#.  =========================
'    mc_ver	  equals            MAST+$KMAST_SNOMAN_VER;           '
'    pmteff       equals            MC+$KMC_PMT_EFF;                  '
'    ev_run       float_equals      EV+$KEV_RUN;                      '
'    ev_tid       float_equals      EV+$KEV_GTR_ID;                   '
'    ds_lo        bits              EV+$KEV_DATA_SET,0,16;            '
'    ds_hi        bits              EV+$KEV_DATA_SET,16,16;           '
'    date         float_equals      EV+$KEV_DTE;                      '
'    time         float_equals      EV+$KEV_HMSC;                     '
'    time_jdy     ntime             EV+$KEV_JDY;                      '
'    time_s       reserved                           ;                '
'    time_us      reserved                           ;                '
'    time_ns      reserved                           ;                '
'    ev_trglo     bits              EV+$KEV_TRG_TYPE,0,16;            '
'    ev_trghi     bits              EV+$KEV_TRG_TYPE,16,16;           '
'    nhits        float_equals      EV+$KEV_NPM;                      '
'    drxsun       dirsun            EV+$KEV_JDY;                      '
'    drysun       reserved;                                           '
'    drzsun       reserved;                                           '
'    adamn1       dmm_get_emask     0;                                '
'    adamn2       reserved;                                           '
'    rdamn1       reserved;                                           '
'    rdamn2       reserved;                                           '
'    amb_peak     float_equals      EV+$KEV_PEAK;                     '
'    amb_int      float_equals      EV+$KEV_INT;                      '
'    nowl         nzbank            EV-$KEV_OWL;                      '
'    nbutt        nzbank            EV-$KEV_BUTT;                     '
'    nneck        nzbank            EV-$KEV_NECK;                     '
'    nfecd        nzbank            EV-$KEV_FECD;                     '
'    wasfit       equals            FTT+$KFTX_RETC;                   '
#.  Grid fitter output
#.  ==================
'    xfg          equals            FTGV+$KFTXV_X;                    '
'    yfg          equals            FTGV+$KFTXV_Y;                    '
'    zfg          equals            FTGV+$KFTXV_Z;                    '
'    rfg          magnitude         FTGV+$KFTXV_X;                    '
'    thetafg      theta_phi         FTGT+$KFTXT_U;                    '
'    phifg        reserved;                                           '
'    tfg          equals            FTGV+$KFTXV_T;                    '
'    like1        equals            FTG+$KFTG_M_LIKE;                 '
'    nfitg1       float_equals      FTG+$KFTX_PMT_AVAIL;              '
'    like2        equals            FTGT+7;                           '
'    nfitg2       float_equals      FTGT+8;                           '
#.  Path fitter output
#.  ==================
'    xfp          equals            FTPV+$KFTXV_X;                    '
'    yfp          equals            FTPV+$KFTXV_Y;                    '
'    zfp          equals            FTPV+$KFTXV_Z;                    '
'    rfp          magnitude         FTPV+$KFTXV_X;                    '
'    thetafp      theta_phi         FTPT+$KFTXT_U;                    '
'    phifp        reserved;                                           '
'    tfitp        equals            FTPV+$KFTXV_T;                    '
'    a2dprb       equals            FTP+$KFTP_KSPROB_ANG2D;           '
'    phiprb       equals            FTP+$KFTP_KSPROB_ANG_PHI;         '
#.  FTU fitter output
#.  ==================
'    xfu          equals            FTUV+$KFTXV_X;                    '
'    yfu          equals            FTUV+$KFTXV_Y;                    '
'    zfu          equals            FTUV+$KFTXV_Z;                    '
'    rfu          magnitude         FTUV+$KFTXV_X;                    '
'    thetafu      theta_phi         FTUT+$KFTXT_U;                    '
'    phifu        reserved;                                           '
'    tfitu        equals            FTUV+$KFTXV_T;                    '
#.  RSP GRID
#.  =======================
'    nwing        equals            FTGR+$KRSP_NWIN;                  '
'    eneg         equals            FTGR+$KRSP_ENE;                   '
'    rspncorg     equals            FTGR+$KRSP_NCOR;                  ' 
#.  RSP PATH
#.  =======================
'    nwinp        equals            FTPR+$KRSP_NWIN;                  '
'    enep         equals            FTPR+$KRSP_ENE;                   '
'    rspncorp     equals            FTPR+$KRSP_NCOR;                  ' 
#.  RSP FTU
#.  =======================
'    nwinu        equals            FTUR+$KRSP_NWIN;                  '
'    eneu         equals            FTUR+$KRSP_ENE;                   '
'    rspncoru     equals            FTUR+$KRSP_NCOR;                  ' 
#.  RSP COMMON
#.  =======================
'    rsp_nwk      equals            FTUR+$KRSP_NWORKING;              '
'    rsp_onln     equals            FTUR+$KRSP_NONLINE;               '
'    rsp_ncal     equals            FTUR+$KRSP_NCAL;                  '
'    rsp_drif     equals            FTUR+$KRSP_DRIFT;                 '
'    rsp_nhit     equals            FTUR+$KRSP_NHITS;                 '
'    rsp_allq     equals            FTUR+26;                          '
'    rsp_dqxx     equals            FTUR+27;                          '
'    vx_cls       float_equals      MCVX+$KMCVX_CLS: -1000000. 1.5;   '
#.  Monte Carlo event information
#.  =======================
'    revent       magnitude         MCVX+$KMCVX_PSX;                  '
'    xe           equals            MCVX+$KMCVX_PSX;                  '
'    ye           equals            MCVX+$KMCVX_PSY;                  '
'    ze           equals            MCVX+$KMCVX_PSZ;                  '
'    theta        theta_phi         MCVX-$KMCVX_MCTK+$KMCTK_DRX;      '
'    phi          reserved;                                           '
'    tgen         single_equals     MCVX+$KMCVX_TIM;                  '
'    egen         equals            MCVX-$KMCVX_MCTK+$KMCTK_ENE;      '
'    enu          equals            MCVX-$KMCVX_MCTKI+$KMCTK_ENE;     '
'    numcer       equals            EGS4+7, EGS4+8, EGS4+9;           '
'    int_ttt      unpack_interact      MCVX+$KMCVX_INC;               '
'    int_ppp      reserved;                                           '
'    int_ccc      reserved;                                           '
'    neutron      neutron;                                            '
#.  Classifier info for fitters
#.  =======================
'    cstsunp      equals            FTPC+$KFTXC_SOL_DIR_1;            '
'    thetaijp     equals            FTPC+$KFTXC_THETA_IJ_1;           '
'    itrp         equals            FTPC+$KFTXC_ITR_1 ;               '
'    beta1p       equals            FTPC+$KFTXC_LEG_1 ;               '
'    beta2p       equals            FTPC+$KFTXC_LEG_2 ;               '
'    beta3p       equals            FTPC+$KFTXC_LEG_3 ;               '
'    beta4p       equals            FTPC+$KFTXC_LEG_4 ;               '
'    cfripp       equals            FTPC+$KFTXC_ANG_CORR_16 ;         '
'    cstsung      equals            FTGC+$KFTXC_SOL_DIR_1;            '
'    thetaijg     equals            FTGC+$KFTXC_THETA_IJ_1;           '
'    itrg         equals            FTGC+$KFTXC_ITR_1 ;               '
'    beta1g       equals            FTGC+$KFTXC_LEG_1 ;               '
'    beta2g       equals            FTGC+$KFTXC_LEG_2 ;               '
'    beta3g       equals            FTGC+$KFTXC_LEG_3 ;               '
'    beta4g       equals            FTGC+$KFTXC_LEG_4 ;               '
'    cfripg       equals            FTGC+$KFTXC_ANG_CORR_16 ;         '
'    cstsunu      equals            FTUC+$KFTXC_SOL_DIR_1;            '
'    thetaiju     equals            FTUC+$KFTXC_THETA_IJ_1;           '
'    itru         equals            FTUC+$KFTXC_ITR_1 ;               '
'    beta1u       equals            FTUC+$KFTXC_LEG_1 ;               '
'    beta2u       equals            FTUC+$KFTXC_LEG_2 ;               '
'    beta3u       equals            FTUC+$KFTXC_LEG_3 ;               '
'    beta4u       equals            FTUC+$KFTXC_LEG_4 ;               '
'    cfripu       equals            FTUC+$KFTXC_ANG_CORR_16 ;         '
#. New Header Information
#. ======================
'    adamn3       dmm_get_emask     -1;                               '
'    adamn4       reserved;                                           '
'    rdamn3       reserved;                                           '
'    rdamn4       reserved;                                           '
'    ntpver       equals            5.0;                              '
'    ncd_stat     float_equals      EV+$KEV_NCD_STATUS;               '
#. FTM Output
#. ==========
'    xentfm       equals            FTMV+$KFTXV_X;                    '
'    yentfm       equals            FTMV+$KFTXV_Y;                    '
'    zentfm       equals            FTMV+$KFTXV_Z;                    '
'    etafm        equals            FTM+$KFTM_eta;                    '
'    psifm        equals            FTM+$KFTM_psi;                    '
'    ftm_imp      equals            FTM+$KFTM_PFIT;                   '
'    ftm_impc     equals            FTM+$KFTM_PCORR;                  '
'    ftm_dEdX     equals            FTM+$KFTM_DEDX;                   '
#. --- Quality of FTM Fit: ---
'    ftm_pdf      equals            FTM+$KFTM_LOG_PDF;                '
'    ftm_fsh      equals            FTM+$KFTM_FRACSHOULD;             '
#. NCD Data
#. ========
'    nes_q        float_equals      NES+$KNES_CHARGE;                 '
'    nes_str      float_equals      NES+$KNES_NCDSTRING;              '
'    nmux_str     float_equals      NEMS+$KNEMS_NCDSTRING;            '
'    mc_n_ncd     n_on_ncd;                                           '
#. New RSP 
'    eneu_old     equals            FTUR+$KRSP_ALT_ENERGY;            '
'    enep_old     equals            FTPR+$KRSP_ALT_ENERGY;            '
'    eneg_old     equals            FTGR+$KRSP_ALT_ENERGY;            '
#. MCPL Info.
'    _mctk_ps     get_link          mcvx-$KMCVX_MCTKI;                '
'    _mcvx_ps     get_link          _mctk_ps-+1;                      '
'    nu_ener      equals            _mctk_ps+$KMCTK_ENE;              '
'    nu_dirx      equals            _mctk_ps+$KMCTK_DRX;              '
'    nu_diry      equals            _mctk_ps+$KMCTK_DRY;              '
'    nu_dirz      equals            _mctk_ps+$KMCTK_DRZ;              '
'    nu_flav      equals            _mctk_ps+$KMCTK_IDP:veto -1. 36.; '
'    nu_intc      float_equals      _mcvx_ps+$KMCVX_INC;              '
'    nu_vtxx      equals            _mcvx_ps+$KMCVX_PSX;              '
'    nu_vtxy      equals            _mcvx_ps+$KMCVX_PSY;              '
'    nu_vtxz      equals            _mcvx_ps+$KMCVX_PSZ;              '
#. RSP Quality Control.
'    rspuiter     equals            FTUR+$KRSP_FOM;                   '
'    rsppiter     equals            FTPR+$KRSP_FOM;                   '
'    rspgiter     equals            FTGR+$KRSP_FOM;                   '
'  END_OF_NTUPLE; '    #.  This marks the end of the ntuple.
#.
#.
*-----------------------------------------------------------------------
*---  Standard ntuple for muon analysis.
*---                 Contact: T. Tsui UBC
*---                 Banks: NTPR
*---  Revision History.
*---  18:Aug:2004 : ver 1.0 : N. McCauley  First version.
*---  18:Nov:2004 : ver 2.0 : N. McCauely  Add FTR info.
*-----------------------------------------------------------------------
*DO   NTPR  333  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380516 22331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type,Format no.
       0        0        0           #.  8..10  Creation Date, Time,Source Id.
19750101        0 20380516 22331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Call NTP_PACK_USER: =0 No, =1 Yes
'snomuntp;'             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.
#.--- Event Header ---
'    mc_ver       equals            MAST+$KMAST_SNOMAN_VER;           '
'    ev_run       float_equals      EV+$KEV_RUN;                      '
'    ev_tid       float_equals      EV+$KEV_GTR_ID;                   '
'    ds_lo        bits              EV+$KEV_DATA_SET,0,16;            '
'    ds_hi        bits              EV+$KEV_DATA_SET,16,16;           '
'    date         float_equals      EV+$KEV_DTE;                      '
'    time         float_equals      EV+$KEV_HMSC;                     '
'    time_jdy     ntime             EV+$KEV_JDY;                      '
'    time_s       reserved                           ;                '
'    time_us      reserved                           ;                '
'    time_ns      reserved                           ;                '
'    ev_trglo     bits              EV+$KEV_TRG_TYPE,0,16;            '
'    ev_trghi     bits              EV+$KEV_TRG_TYPE,16,16;           '
'    nhits        float_equals      EV+$KEV_NPM:149.5 9999.;          '
'    nowl         nzbank            EV-$KEV_OWL;                      '
'    nbutt        nzbank            EV-$KEV_BUTT;                     '
'    nneck        nzbank            EV-$KEV_NECK;                     '
'    nfecd        nzbank            EV-$KEV_FECD;                     '
'    adamn1       dmm_get_emask     0;                                '
'    adamn2       reserved;                                           '
'    rdamn1       reserved;                                           '
'    rdamn2       reserved;                                           '
'    adamn3       dmm_get_emask     -1;                               '
'    adamn4       reserved;                                           '
'    rdamn3       reserved;                                           '
'    rdamn4       reserved;                                           '
'    ntpver       equals            2.0;                              '
#. --- FTM ---
#. Entrance position fit
'    xstartf      equals            FTMV+$KFTXV_X;                    '
'    ystartf      equals            FTMV+$KFTXV_Y;                    '
'    zstartf      equals            FTMV+$KFTXV_Z;                    '
'    tstartf      equals            FTMV+$KFTXV_T;                    '
#. Exit position fit
'    xexitf       equals            FTM+$KFTM_EXIT_X;                 '
'    yexitf       equals            FTM+$KFTM_EXIT_Y;                 '
'    zexitf       equals            FTM+$KFTM_EXIT_Z;                 '
#. Direction fit
'    etaf         equals            FTM+$KFTM_eta;                    '
'    psif         equals            FTM+$KFTM_psi;                    '
#. Impact param, length, charge/length
'    impactf      equals            FTM+$KFTM_PFIT;                   '
'    impcor       equals            FTM+$KFTM_PCORR;                  '
'    lenfit       equals            FTM+$KFTM_LENGTH;                 '
'    dEdX         equals            FTM+$KFTM_DEDX;                   '
#. --- Quality of Fit FTM: ---
'    retc         float_equals	    FTM+$KFTX_RETC;                   '    
'    chisq        equals            FTM+$KFTM_CHIDOF;                 '
'    pdf          equals            FTM+$KFTM_LOG_PDF;                '
'    pdfdof       equals            FTM+$KFTM_PDF_DOF;                '
'    fshould      equals            FTM+$KFTM_FRACSHOULD;             '
#. --- Stats ---
'    meanq        equals            FTM+$KFTM_MEANQ;                  '
'    rmsq         equals            FTM+$KFTM_RMSQ;                   '
'    meant        equals            FTM+$KFTM_MEANT;                  '
'    rmst         equals            FTM+$KFTM_RMST;                   '
#. --- Monte Carlo Data ---
#. this ensures that only the vertex is considered
'   _vx_cls       float_equals      MCVX+$KMCVX_CLS: 0.5 1.5;'
#. Start position
'    xstart       equals            MCVX+$KMCVX_PSX;                  '
'    ystart       equals            MCVX+$KMCVX_PSY;                  '
'    zstart       equals            MCVX+$KMCVX_PSZ;                  '
'    tstart       single_equals     MCVX+$KMCVX_TIM;                  '
'    egen         equals            MCVX-$KMCVX_MCTK+$KMCTK_ENE;      '
#. Track direction
'    eta          equals            FTM+$KFTM_mc_eta;                 '
'    psi          equals            FTM+$KFTM_mc_psi;                 '
#. Exit position
'    xstop        equals            FTM+$KFTM_mc_xstop;               '
'    ystop        equals            FTM+$KFTM_mc_ystop;               '
'    zstop        equals            FTM+$KFTM_mc_zstop;               '
#. Impact parameter.
'    impact       equals            FTM+$KFTM_mc_p;                   '
#. FTR fit information
#. Entrance Position
'    ftrx         equals            FTRV+$KFTXV_X;                    '
'    ftry         equals            FTRV+$KFTXV_Y;                    '
'    ftrz         equals            FTRV+$KFTXV_Z;                    '
#. Direction
'    ftrdu        equals            FTRT+$KFTXT_U;                    '
'    ftrdv        equals            FTRT+$KFTXT_V;                    '
'    ftrdw        equals            FTRT+$KFTXT_W;                    '
#. Impact parameter
'    ftrb         equals            FTR+$KFTR_IMP;                    '
#. Monte Carlo Information
#. Generation Position
'    mcmgx        equals            FTRM+$KFTRM_GEN_POS_X;            '
'    mcmgy        equals            FTRM+$KFTRM_GEN_POS_Y;            '
'    mcmgz        equals            FTRM+$KFTRM_GEN_POS_Z;            '
#. Entrance Position
'    mcmenx       equals            FTRM+$KFTRM_ENT_POS_X;            '
'    mcmeny       equals            FTRM+$KFTRM_ENT_POS_Y;            '
'    mcmenz       equals            FTRM+$KFTRM_ENT_POS_Z;            '
#. Exit Position
'    mcmexx       equals            FTRM+$KFTRM_EXIT_POS_X;           '
'    mcmexy       equals            FTRM+$KFTRM_EXIT_POS_Y;           '
'    mcmexz       equals            FTRM+$KFTRM_EXIT_POS_Z;           '
#. Stopping Position
'    mcmsx        equals            FTRM+$KFTRM_STOP_POS_X;           '
'    mcmsy        equals            FTRM+$KFTRM_STOP_POS_Y;           '
'    mcmsz        equals            FTRM+$KFTRM_STOP_POS_Z;           '
#. Direction
'    mcmgu        equals            FTRM+$KFTRM_GEN_DIR_U;            '
'    mcmgv        equals            FTRM+$KFTRM_GEN_DIR_V;            '
'    mcmgw        equals            FTRM+$KFTRM_GEN_DIR_W;            '
#. Impact parameter
'    mcmb         equals            FTRM+$KFTRM_GEN_IMPACT;            '
#. Generation Energy
'    mcme         equals            FTRM+$KFTRM_MU_ENE;               '
#. Muon type and particle produced masks
'    mcmmmsk      float_equals      FTRM+$KFTRM_MU_MASK;              '
'    mcmpmsk      float_equals      FTRM+$KFTRM_PART_MASK;            '
'  END_OF_NTUPLE; '    #.  This marks the end of the ntuple.
*----------------------------------------------------------------------------
*---
*---  Standard Ntuple for PGT Data.
*---  Revision History.
*---  18:Aug:2004: Ver 2.0 : N. McCauley Add new words for NCD phase. 
*---
*----------------------------------------------------------------------------
*DO   NTPR  335  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' pgtdata; '            #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.
'    ev_run       float_equals      EV+$KEV_RUN;                      '
'    ev_tid       float_equals      EV+$KEV_GTR_ID;                   '
'    ds_lo        bits              EV+$KEV_DATA_SET,0,16;            '
'    ds_hi        bits              EV+$KEV_DATA_SET,16,16;           '
'    date         float_equals      EV+$KEV_DTE;                      '
'    time         float_equals      EV+$KEV_HMSC;                     '
'    time_jdy     ntime             EV+$KEV_JDY;                      '
'    time_s       reserved                           ;                '
'    time_us      reserved                           ;                '
'    time_ns      reserved                           ;                '
'    ev_trglo     bits              EV+$KEV_TRG_TYPE,0,16;            '
'    ev_trghi     bits              EV+$KEV_TRG_TYPE,16,16;           '
'    nhits        float_equals      EV+$KEV_NPM;                      '
'    drxsun       dirsun            EV+$KEV_JDY;                      '
'    drysun       reserved;                                           '
'    drzsun       reserved;                                           '
'    adamn1       dmm_get_emask     0;                                '
'    adamn2       reserved;                                           '
'    rdamn1       reserved;                                           '
'    rdamn2       reserved;                                           '
'    amb_peak     float_equals      EV+$KEV_PEAK;                     '
'    amb_int      float_equals      EV+$KEV_INT;                      '
'    nowl         nzbank            EV-$KEV_OWL;                      '
'    nbutt        nzbank            EV-$KEV_BUTT;                     '
'    nneck        nzbank            EV-$KEV_NECK;                     '
'    nfecd        nzbank            EV-$KEV_FECD;                     '
'    adamn3       dmm_get_emask     -1;                               '
'    adamn4       reserved;                                           '
'    rdamn3       reserved;                                           '
'    rdamn4       reserved;                                           '
'    ntpver       equals            2.0;                              '
'    ncd_stat     float_equals      EV+$KEV_NCD_STATUS;               '
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple
*----------------------------------------------------------------------------
*---
*---  Standard MCPROD Ntuple for the Monte Carlo Decay Electrons.
*---  Needs a different MC event selection than 330.
*---  As MC only some data parts are cut, and ntuple is restructured.
*---
*---  Revision History.
*---  15:Feb:2005: Ver 1.0 : N. McCauley First Version
*---   2:Sep:2005: Ver 2.0 : N. McCauley Add rsp number of iterations.
*---
*----------------------------------------------------------------------------
*DO   NTPR  338  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Call NTP_PACK_USER: =0 No, =1 Yes
' snontp; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.

#.
#.  General Event information
#.  =========================
'    ntpver       equals            2.0;                              '
'    mc_ver       equals            MAST+$KMAST_SNOMAN_VER;           '
'    pmteff       equals            MC+$KMC_PMT_EFF;                  '
'    ev_run       float_equals      EV+$KEV_RUN;                      '
'    ev_tid       float_equals      EV+$KEV_GTR_ID;                   '
'    ds_lo        bits              EV+$KEV_DATA_SET,0,16;            '
'    ds_hi        bits              EV+$KEV_DATA_SET,16,16;           '
'    date         float_equals      EV+$KEV_DTE;                      '
'    time         float_equals      EV+$KEV_HMSC;                     '
'    time_jdy     ntime             EV+$KEV_JDY;                      '
'    time_s       reserved                           ;                '
'    time_us      reserved                           ;                '
'    time_ns      reserved                           ;                '
'    nhits        float_equals      EV+$KEV_NPM;                      '
'    drxsun       dirsun            EV+$KEV_JDY;                      '
'    drysun       reserved;                                           '
'    drzsun       reserved;                                           '
'    wasfit       equals            FTT+$KFTX_RETC;                   '
#.  Grid fitter output
#.  ==================
'    xfg          equals            FTGV+$KFTXV_X;                    '
'    yfg          equals            FTGV+$KFTXV_Y;                    '
'    zfg          equals            FTGV+$KFTXV_Z;                    '
'    rfg          magnitude         FTGV+$KFTXV_X;                    '
'    thetafg      theta_phi         FTGT+$KFTXT_U;                    '
'    phifg        reserved;                                           '
'    tfg          equals            FTGV+$KFTXV_T;                    '
'    like1        equals            FTG+$KFTG_M_LIKE;                 '
'    nfitg1       float_equals      FTG+$KFTX_PMT_AVAIL;              '
'    like2        equals            FTGT+7;                           '
'    nfitg2       float_equals      FTGT+8;                           '
#.  Path fitter output
#.  ==================
'    xfp          equals            FTPV+$KFTXV_X;                    '
'    yfp          equals            FTPV+$KFTXV_Y;                    '
'    zfp          equals            FTPV+$KFTXV_Z;                    '
'    rfp          magnitude         FTPV+$KFTXV_X;                    '
'    thetafp      theta_phi         FTPT+$KFTXT_U;                    '
'    phifp        reserved;                                           '
'    tfitp        equals            FTPV+$KFTXV_T;                    '
'    a2dprb       equals            FTP+$KFTP_KSPROB_ANG2D;           '
'    phiprb       equals            FTP+$KFTP_KSPROB_ANG_PHI;         '
#.  FTU fitter output
#.  ==================
'    xfu          equals            FTUV+$KFTXV_X;                    '
'    yfu          equals            FTUV+$KFTXV_Y;                    '
'    zfu          equals            FTUV+$KFTXV_Z;                    '
'    rfu          magnitude         FTUV+$KFTXV_X;                    '
'    thetafu      theta_phi         FTUT+$KFTXT_U;                    '
'    phifu        reserved;                                           '
'    tfitu        equals            FTUV+$KFTXV_T;                    '
#.  RSP GRID
#.  =======================
'    nwing        equals            FTGR+$KRSP_NWIN;                  '
'    eneg         equals            FTGR+$KRSP_ENE;                   '
'    rspncorg     equals            FTGR+$KRSP_NCOR;                  ' 
'    eneg_old     equals            FTGR+$KRSP_ALT_ENERGY;            '
#.  RSP PATH
#.  =======================
'    nwinp        equals            FTPR+$KRSP_NWIN;                  '
'    enep         equals            FTPR+$KRSP_ENE;                   '
'    rspncorp     equals            FTPR+$KRSP_NCOR;                  ' 
'    enep_old     equals            FTPR+$KRSP_ALT_ENERGY;            '
#.  RSP FTU
#.  =======================
'    nwinu        equals            FTUR+$KRSP_NWIN;                  '
'    eneu         equals            FTUR+$KRSP_ENE;                   '
'    rspncoru     equals            FTUR+$KRSP_NCOR;                  ' 
'    eneu_old     equals            FTUR+$KRSP_ALT_ENERGY;            '
#.  RSP COMMON
#.  =======================
'    rsp_nwk      equals            FTUR+$KRSP_NWORKING;              '
'    rsp_onln     equals            FTUR+$KRSP_NONLINE;               '
'    rsp_ncal     equals            FTUR+$KRSP_NCAL;                  '
'    rsp_drif     equals            FTUR+$KRSP_DRIFT;                 '
'    rsp_nhit     equals            FTUR+$KRSP_NHITS;                 '
'    rsp_allq     equals            FTUR+26;                          '
'    rsp_dqxx     equals            FTUR+27;                          '
#.  Monte Carlo event information
#.  We select our source vertex diferently looking for muon stops or decay.
#.  =======================
'    int_ttt      unpack_interact      MCVX+$KMCVX_INC;               '
'    int_ppp      reserved;                                           '
'    int_ccc      reserved;                                           '
'    _is_mude     equals            int_ppp:344.5 347.5;              '
'    revent       magnitude         MCVX+$KMCVX_PSX;                  '
'    xe           equals            MCVX+$KMCVX_PSX;                  '
'    ye           equals            MCVX+$KMCVX_PSY;                  '
'    ze           equals            MCVX+$KMCVX_PSZ;                  '
'    theta        theta_phi         MCVX-$KMCVX_MCTK+$KMCTK_DRX;      '
'    phi          reserved;                                           '
'    tgen         single_equals     MCVX+$KMCVX_TIM;                  '
'    egen         equals            MCVX-$KMCVX_MCTK+$KMCTK_ENE;      '
'    numcer       equals            EGS4+7, EGS4+8, EGS4+9;           '
#.  Classifier info for fitters
#.  =======================
'    cstsunp      equals            FTPC+$KFTXC_SOL_DIR_1;            '
'    thetaijp     equals            FTPC+$KFTXC_THETA_IJ_1;           '
'    itrp         equals            FTPC+$KFTXC_ITR_1 ;               '
'    beta1p       equals            FTPC+$KFTXC_LEG_1 ;               '
'    beta2p       equals            FTPC+$KFTXC_LEG_2 ;               '
'    beta3p       equals            FTPC+$KFTXC_LEG_3 ;               '
'    beta4p       equals            FTPC+$KFTXC_LEG_4 ;               '
'    cfripp       equals            FTPC+$KFTXC_ANG_CORR_16 ;         '
'    cstsung      equals            FTGC+$KFTXC_SOL_DIR_1;            '
'    thetaijg     equals            FTGC+$KFTXC_THETA_IJ_1;           '
'    itrg         equals            FTGC+$KFTXC_ITR_1 ;               '
'    beta1g       equals            FTGC+$KFTXC_LEG_1 ;               '
'    beta2g       equals            FTGC+$KFTXC_LEG_2 ;               '
'    beta3g       equals            FTGC+$KFTXC_LEG_3 ;               '
'    beta4g       equals            FTGC+$KFTXC_LEG_4 ;               '
'    cfripg       equals            FTGC+$KFTXC_ANG_CORR_16 ;         '
'    cstsunu      equals            FTUC+$KFTXC_SOL_DIR_1;            '
'    thetaiju     equals            FTUC+$KFTXC_THETA_IJ_1;           '
'    itru         equals            FTUC+$KFTXC_ITR_1 ;               '
'    beta1u       equals            FTUC+$KFTXC_LEG_1 ;               '
'    beta2u       equals            FTUC+$KFTXC_LEG_2 ;               '
'    beta3u       equals            FTUC+$KFTXC_LEG_3 ;               '
'    beta4u       equals            FTUC+$KFTXC_LEG_4 ;               '
'    cfripu       equals            FTUC+$KFTXC_ANG_CORR_16 ;         '
#. RSP Quality Control.
'    rspuiter     equals            FTUR+$KRSP_FOM;                   '
'    rsppiter     equals            FTPR+$KRSP_FOM;                   '
'    rspgiter     equals            FTGR+$KRSP_FOM;                   '
'  END_OF_NTUPLE; '    #.  This marks the end of the ntuple.
#.
#.
*----------------------------------------------------------------------------
*---
*---  Standard MCPROD Ntuple for simulated Leslie events.
*---  Revision History.
*---   6:Aug:2005: Ver 1.0 : W. Heintzelman Revision of standard ntuple 330
*---                         to select the primary vertex in each event and
*---                         to eliminate unused variables.
*---			     Add nphot - the number of photons generated
*---				 exp_par - exponential parameter used for
*---					   time distribution within an evt.
*---   2:Sep:2005            N. McCauley Add rsp number of iterations.
*---                         No producction with this yet so still ver 1.
*---
*----------------------------------------------------------------------------
*DO   NTPR  339  -i(35I 1F 3I -H)  -n5000                #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Call NTP_PACK_USER: =0 No, =1 Yes
' snontp; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.

#.
#.  General Event information
#.  =========================
'    ntpver       equals            1.0;                              '
'    mc_ver	  equals            MAST+$KMAST_SNOMAN_VER;           '
'    pmteff       equals            MC+$KMC_PMT_EFF;                  '
'    ev_run       float_equals      EV+$KEV_RUN;                      '
'    ev_tid       float_equals      EV+$KEV_GTR_ID;                   '
'    ds_lo        bits              EV+$KEV_DATA_SET,0,16;            '
'    ds_hi        bits              EV+$KEV_DATA_SET,16,16;           '
'    date         float_equals      EV+$KEV_DTE;                      '
'    time         float_equals      EV+$KEV_HMSC;                     '
'    time_jdy     ntime             EV+$KEV_JDY;                      '
'    time_s       reserved                           ;                '
'    time_us      reserved                           ;                '
'    time_ns      reserved                           ;                '
'    nhits        float_equals      EV+$KEV_NPM;                      '
'    drxsun       dirsun            EV+$KEV_JDY;                      '
'    drysun       reserved;                                           '
'    drzsun       reserved;                                           '
'    wasfit       equals            FTT+$KFTX_RETC;                   '
#.  Grid fitter output
#.  ==================
'    xfg          equals            FTGV+$KFTXV_X;                    '
'    yfg          equals            FTGV+$KFTXV_Y;                    '
'    zfg          equals            FTGV+$KFTXV_Z;                    '
'    rfg          magnitude         FTGV+$KFTXV_X;                    '
'    thetafg      theta_phi         FTGT+$KFTXT_U;                    '
'    phifg        reserved;                                           '
'    tfg          equals            FTGV+$KFTXV_T;                    '
'    like1        equals            FTG+$KFTG_M_LIKE;                 '
'    nfitg1       float_equals      FTG+$KFTX_PMT_AVAIL;              '
'    like2        equals            FTGT+7;                           '
'    nfitg2       float_equals      FTGT+8;                           '
#.  Path fitter output
#.  ==================
'    xfp          equals            FTPV+$KFTXV_X;                    '
'    yfp          equals            FTPV+$KFTXV_Y;                    '
'    zfp          equals            FTPV+$KFTXV_Z;                    '
'    rfp          magnitude         FTPV+$KFTXV_X;                    '
'    thetafp      theta_phi         FTPT+$KFTXT_U;                    '
'    phifp        reserved;                                           '
'    tfitp        equals            FTPV+$KFTXV_T;                    '
'    a2dprb       equals            FTP+$KFTP_KSPROB_ANG2D;           '
'    phiprb       equals            FTP+$KFTP_KSPROB_ANG_PHI;         '
#.  FTU fitter output
#.  ==================
'    xfu          equals            FTUV+$KFTXV_X;                    '
'    yfu          equals            FTUV+$KFTXV_Y;                    '
'    zfu          equals            FTUV+$KFTXV_Z;                    '
'    rfu          magnitude         FTUV+$KFTXV_X;                    '
'    thetafu      theta_phi         FTUT+$KFTXT_U;                    '
'    phifu        reserved;                                           '
'    tfitu        equals            FTUV+$KFTXV_T;                    '
#.  RSP GRID
#.  =======================
'    nwing        equals            FTGR+$KRSP_NWIN;                  '
'    eneg         equals            FTGR+$KRSP_ENE;                   '
'    rspncorg     equals            FTGR+$KRSP_NCOR;                  ' 
'    eneg_old     equals            FTGR+$KRSP_ALT_ENERGY;            '
#.  RSP PATH
#.  =======================
'    nwinp        equals            FTPR+$KRSP_NWIN;                  '
'    enep         equals            FTPR+$KRSP_ENE;                   '
'    rspncorp     equals            FTPR+$KRSP_NCOR;                  ' 
'    enep_old     equals            FTPR+$KRSP_ALT_ENERGY;            '
#.  RSP FTU
#.  =======================
'    nwinu        equals            FTUR+$KRSP_NWIN;                  '
'    eneu         equals            FTUR+$KRSP_ENE;                   '
'    rspncoru     equals            FTUR+$KRSP_NCOR;                  ' 
'    eneu_old     equals            FTUR+$KRSP_ALT_ENERGY;            '
#.  RSP COMMON
#.  =======================
'    rsp_nwk      equals            FTUR+$KRSP_NWORKING;              '
'    rsp_onln     equals            FTUR+$KRSP_NONLINE;               '
'    rsp_ncal     equals            FTUR+$KRSP_NCAL;                  '
'    rsp_drif     equals            FTUR+$KRSP_DRIFT;                 '
'    rsp_nhit     equals            FTUR+$KRSP_NHITS;                 '
'    rsp_allq     equals            FTUR+26;                          '
'    rsp_dqxx     equals            FTUR+27;                          '
#. Cuts for first Leslie events photon.
#. ====================================
'    vx_cls       float_equals      MCVX+$KMCVX_CLS:     1   1  ;     '
'    int_ttt      unpack_interact   MCVX+$KMCVX_INC;                  '
'    int_ppp      reserved:                              199 199;     '
'    int_ccc      reserved;                                           '
#.  Monte Carlo event information
#.  =======================
'    revent       magnitude         MCVX+$KMCVX_PSX;                  '
'    xe           equals            MCVX+$KMCVX_PSX;                  '
'    ye           equals            MCVX+$KMCVX_PSY;                  '
'    ze           equals            MCVX+$KMCVX_PSZ;                  '
'    egen         equals            MCVX-$KMCVX_MCTK+$KMCTK_ENE;      '
'    nphot        float_equals      MCGN+$KMCGN_NUM;            '
'    tim_exp      equals            MCGN+$KMCGN_GENTIM_EXPPAR;  '
#.  Classifier info for fitters
#.  =======================
'    cstsunp      equals            FTPC+$KFTXC_SOL_DIR_1;            '
'    thetaijp     equals            FTPC+$KFTXC_THETA_IJ_1;           '
'    itrp         equals            FTPC+$KFTXC_ITR_1 ;               '
'    beta1p       equals            FTPC+$KFTXC_LEG_1 ;               '
'    beta2p       equals            FTPC+$KFTXC_LEG_2 ;               '
'    beta3p       equals            FTPC+$KFTXC_LEG_3 ;               '
'    beta4p       equals            FTPC+$KFTXC_LEG_4 ;               '
'    cfripp       equals            FTPC+$KFTXC_ANG_CORR_16 ;         '
'    cstsung      equals            FTGC+$KFTXC_SOL_DIR_1;            '
'    thetaijg     equals            FTGC+$KFTXC_THETA_IJ_1;           '
'    itrg         equals            FTGC+$KFTXC_ITR_1 ;               '
'    beta1g       equals            FTGC+$KFTXC_LEG_1 ;               '
'    beta2g       equals            FTGC+$KFTXC_LEG_2 ;               '
'    beta3g       equals            FTGC+$KFTXC_LEG_3 ;               '
'    beta4g       equals            FTGC+$KFTXC_LEG_4 ;               '
'    cfripg       equals            FTGC+$KFTXC_ANG_CORR_16 ;         '
'    cstsunu      equals            FTUC+$KFTXC_SOL_DIR_1;            '
'    thetaiju     equals            FTUC+$KFTXC_THETA_IJ_1;           '
'    itru         equals            FTUC+$KFTXC_ITR_1 ;               '
'    beta1u       equals            FTUC+$KFTXC_LEG_1 ;               '
'    beta2u       equals            FTUC+$KFTXC_LEG_2 ;               '
'    beta3u       equals            FTUC+$KFTXC_LEG_3 ;               '
'    beta4u       equals            FTUC+$KFTXC_LEG_4 ;               '
'    cfripu       equals            FTUC+$KFTXC_ANG_CORR_16 ;         '
#. RSP Quality Control.
'    rspuiter     equals            FTUR+$KRSP_FOM;                   '
'    rsppiter     equals            FTPR+$KRSP_FOM;                   '
'    rspgiter     equals            FTGR+$KRSP_FOM;                   '
'  END_OF_NTUPLE; '    #.  This marks the end of the ntuple.
#.
*----------------------------------------------------------------------------
*---
*---  Standard MCPROD Ntuple. Valid for all processing from November 2005.
*---  The 36x series of ntuples replaces the 33x series which has picked up 
*---  too much obselete data and as become untidy.
*---  Revision History.
*---  30:Sep:2005: Ver 1.0 : N. McCauley First Version. Based on 330.
*---
*----------------------------------------------------------------------------
*DO   NTPR  360  -i(35I 1F 3I -H)  -n5000                #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Call NTP_PACK_USER: =0 No, =1 Yes
' snontp; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.

#.
#.  General Event information
#.  =========================
'    ntpver       equals            1.0;                              '
'    mc_ver	  equals            MAST+$KMAST_SNOMAN_VER;           '
'    ev_run       float_equals      EV+$KEV_RUN;                      '
'    ev_tid       float_equals      EV+$KEV_GTR_ID;                   '
'    ds_lo        bits              EV+$KEV_DATA_SET,0,16;            '
'    ds_hi        bits              EV+$KEV_DATA_SET,16,16;           '
'    date         float_equals      EV+$KEV_DTE;                      '
'    time         float_equals      EV+$KEV_HMSC;                     '
'    time_jdy     ntime             EV+$KEV_JDY;                      '
'    time_s       reserved                           ;                '
'    time_us      reserved                           ;                '
'    time_ns      reserved                           ;                '
'    ev_trglo     bits              EV+$KEV_TRG_TYPE,0,16;            '
'    ev_trghi     bits              EV+$KEV_TRG_TYPE,16,16;           '
'    nhits        float_equals      EV+$KEV_NPM;                      '
'    ncd_stat     float_equals      EV+$KEV_NCD_STATUS;               '
'    drxsun       dirsun            EV+$KEV_JDY;                      '
'    drysun       reserved;                                           '
'    drzsun       reserved;                                           '
'    adamn1       dmm_get_emask     0;                                '
'    adamn2       reserved;                                           '
'    rdamn1       reserved;                                           '
'    rdamn2       reserved;                                           '
'    adamn3       dmm_get_emask     -1;                               '
'    adamn4       reserved;                                           '
'    rdamn3       reserved;                                           '
'    rdamn4       reserved;                                           '
'    amb_peak     float_equals      EV+$KEV_PEAK;                     '
'    amb_int      float_equals      EV+$KEV_INT;                      '
'    nowl         nzbank            EV-$KEV_OWL;                      '
'    nbutt        nzbank            EV-$KEV_BUTT;                     '
'    nneck        nzbank            EV-$KEV_NECK;                     '
'    nfecd        nzbank            EV-$KEV_FECD;                     '
#.
'    pmtt           equals               pmt+$KPMT_PT;                '
'    pmtlx          equals               pmt+$KPMT_PLX;               '
'    pmths          equals               pmt+$KPMT_PHS;               '
'    pmthl          equals               pmt+$KPMT_PHL;               '
#.  Path Fitter Analysis
#.  ====================
'    xfp          equals            FTPV+$KFTXV_X;                    '
'    yfp          equals            FTPV+$KFTXV_Y;                    '
'    zfp          equals            FTPV+$KFTXV_Z;                    '
'    rfp          magnitude         FTPV+$KFTXV_X;                    '
'    thetafp      theta_phi         FTPT+$KFTXT_U;                    '
'    phifp        reserved;                                           '
'    tfitp        equals            FTPV+$KFTXV_T;                    '
'    a2dprb       equals            FTP+$KFTP_KSPROB_ANG2D;           '
'    phiprb       equals            FTP+$KFTP_KSPROB_ANG_PHI;         '
'    enerap       equals            FTPR+$KRSP_ENE;                   '
'    nwinrp       equals            FTPR+$KRSP_NWIN;                  '
'    rspncorp     equals            FTPR+$KRSP_NCOR;                  ' 
'    rsppiter     equals            FTPR+$KRSP_FOM;                   '
'    enerop       equals            FTPR+$KRSP_ALT_ENERGY;            '
'    enekp        equals            FTPK+$KFTXK_ENERGY;               '
'    enekump      equals            FTPK+$KFTXK_ENE_MERR;             '
'    enekupp      equals            FTPK+$KFTXK_ENE_PERR;             '
'    enekprp      equals            FTPK+$KFTXK_DIR_SCALE;            '
'    nwinkp       equals            FTPK+$KFTXK_NEFF;                 '
'    cstsunp      equals            FTPC+$KFTXC_SOL_DIR_1;            '
'    thetaijp     equals            FTPC+$KFTXC_THETA_IJ_1;           '
'    itrp         equals            FTPC+$KFTXC_ITR_1 ;               '
'    beta1p       equals            FTPC+$KFTXC_LEG_1 ;               '
'    beta4p       equals            FTPC+$KFTXC_LEG_4 ;               '
'    phiksap      equals            FTPC+$KFTXC_KSPHI_1;              '
'    phikspp      equals            FTPC+$KFTXC_KSPHI_2;              '
'    angksap      equals            FTPC+$KFTXC_KSANG_1;              '
'    angkspp      equals            FTPC+$KFTXC_KSANG_2;              '
'    qtijp        equals            FTPC+$KFTXC_QW_TIJ_1;             '
'    qpt_prbp     equals            FTPC+$KFTXC_QPDT_1;               '
'    qpt_mqp      equals            FTPC+$KFTXC_QPDT_2;               '
'    qpt_nwp      equals            FTPC+$KFTXC_QPDT_4;               '
'    timksp       equals            FTPC+$KFTXC_KSTIM_1;              '

#.  FTU Analysis
#.  ============
'    xfu          equals            FTUV+$KFTXV_X;                    '
'    yfu          equals            FTUV+$KFTXV_Y;                    '
'    zfu          equals            FTUV+$KFTXV_Z;                    '
'    rfu          magnitude         FTUV+$KFTXV_X;                    '
'    thetafu      theta_phi         FTUT+$KFTXT_U;                    '
'    phifu        reserved;                                           '
'    tfitu        equals            FTUV+$KFTXV_T;                    '
'    enerau       equals            FTUR+$KRSP_ENE;                   '
'    nwinru       equals            FTUR+$KRSP_NWIN;                  '
'    rspncoru     equals            FTUR+$KRSP_NCOR;                  ' 
'    rsppiteu     equals            FTUR+$KRSP_FOM;                   '
'    enerou       equals            FTUR+$KRSP_ALT_ENERGY;            '
'    eneku        equals            FTUK+$KFTXK_ENERGY;               '
'    enekumu      equals            FTUK+$KFTXK_ENE_MERR;             '
'    enekupu      equals            FTUK+$KFTXK_ENE_PERR;             '
'    enekpru      equals            FTUK+$KFTXK_DIR_SCALE;            '
'    nwinku       equals            FTUK+$KFTXK_NEFF;                 '
'    cstsunu      equals            FTUC+$KFTXC_SOL_DIR_1;            '
'    thetaiju     equals            FTUC+$KFTXC_THETA_IJ_1;           '
'    itru         equals            FTUC+$KFTXC_ITR_1 ;               '
'    beta1u       equals            FTUC+$KFTXC_LEG_1 ;               '
'    beta4u       equals            FTUC+$KFTXC_LEG_4 ;               '
'    phiksau      equals            FTUC+$KFTXC_KSPHI_1;              '
'    phikspu      equals            FTUC+$KFTXC_KSPHI_2;              '
'    angksau      equals            FTUC+$KFTXC_KSANG_1;              '
'    angkspu      equals            FTUC+$KFTXC_KSANG_2;              '
'    qtiju        equals            FTUC+$KFTXC_QW_TIJ_1;             '
'    qpt_prbu     equals            FTUC+$KFTXC_QPDT_1;               '
'    qpt_mqu      equals            FTUC+$KFTXC_QPDT_2;               '
'    qpt_nwu      equals            FTUC+$KFTXC_QPDT_4;               '
'    timksu       equals            FTUC+$KFTXC_KSTIM_1;              '

#.  Grid Fitter Analysis
#.  ====================
'    xfg          equals            FTGV+$KFTXV_X;                    '
'    yfg          equals            FTGV+$KFTXV_Y;                    '
'    zfg          equals            FTGV+$KFTXV_Z;                    '
'    rfg          magnitude         FTGV+$KFTXV_X;                    '
'    thetafg      theta_phi         FTGT+$KFTXT_U;                    '
'    phifg        reserved;                                           '
'    tfg          equals            FTGV+$KFTXV_T;                    '
'    like1        equals            FTG+$KFTG_M_LIKE;                 '
'    nfitg1       float_equals      FTG+$KFTX_PMT_AVAIL;              '
'    like2        equals            FTGT+7;                           '
'    nfitg2       float_equals      FTGT+8;                           '
'    enerag       equals            FTGR+$KRSP_ENE;                   '
'    nwinrg       equals            FTGR+$KRSP_NWIN;                  '
'    rspncorg     equals            FTGR+$KRSP_NCOR;                  ' 
'    rsppiteg     equals            FTGR+$KRSP_FOM;                   '
'    enerog       equals            FTGR+$KRSP_ALT_ENERGY;            '
'    enekg        equals            FTGK+$KFTXK_ENERGY;               '
'    enekumg      equals            FTGK+$KFTXK_ENE_MERR;             '
'    enekupg      equals            FTGK+$KFTXK_ENE_PERR;             '
'    enekprg      equals            FTGK+$KFTXK_DIR_SCALE;            '
'    nwinkg       equals            FTGK+$KFTXK_NEFF;                 '
'    cstsung      equals            FTGC+$KFTXC_SOL_DIR_1;            '
'    thetaijg     equals            FTGC+$KFTXC_THETA_IJ_1;           '
'    itrg         equals            FTGC+$KFTXC_ITR_1 ;               '
'    beta1g       equals            FTGC+$KFTXC_LEG_1 ;               '
'    beta4g       equals            FTGC+$KFTXC_LEG_4 ;               '
'    phiksag      equals            FTGC+$KFTXC_KSPHI_1;              '
'    phikspg      equals            FTGC+$KFTXC_KSPHI_2;              '
'    angksag      equals            FTGC+$KFTXC_KSANG_1;              '
'    angkspg      equals            FTGC+$KFTXC_KSANG_2;              '
'    qtijg        equals            FTGC+$KFTXC_QW_TIJ_1;             '
'    qpt_prbg     equals            FTGC+$KFTXC_QPDT_1;               '
'    qpt_mqg      equals            FTGC+$KFTXC_QPDT_2;               '
'    qpt_nwg      equals            FTGC+$KFTXC_QPDT_4;               '
'    timksg       equals            FTGC+$KFTXC_KSTIM_1;              '

#.  Common Independant Parameters
#.  ========================
'    rsp_nwk      equals            FTUR+$KRSP_NWORKING;              '
'    rsp_onln     equals            FTUR+$KRSP_NONLINE;               '
'    rsp_ncal     equals            FTUR+$KRSP_NCAL;                  '
'    rsp_drif     equals            FTUR+$KRSP_DRIFT;                 '
'    rsp_nhit     equals            FTUR+$KRSP_NHITS;                 '
'    rsp_allq     equals            FTUR+26;                          '
'    rsp_dqxx     equals            FTUR+27;                          '
'    qpt_nhit     equals            FTUC+$KFTXC_QPDT_3;                '

#. Basic Muon Analysis
#. ===================
'    xmu_in       equals            FTIV+$KFTXV_X;                    '
'    ymu_in       equals            FTIV+$KFTXV_Y;                    '
'    zmu_in       equals            FTIV+$KFTXV_Z;                    '
'    theta_mu     theta_phi         FTIT+$KFTXT_U;                    '
'    phi_mu       reserved;                                           '
'    mu_imp       equals            FTIP+$KFTXP_IMPACT;               '
'    mu_dedx      equals            FTIP+$KFTXP_DEDX_1;               '
'    mu_rich      equals            FTIP+$KFTXP_RICH_TRIM;            '
'    mu_citr      equals            FTIP+$KFTXP_MCITR;                '
'    mu_crms      equals            FTIP+$KFTXP_CONE_TRES_RMS;        '
#.  NCD Analysis
#.  ============
'    nes_q        float_equals      NES+$KNES_CHARGE;                 '
'    nes_str      float_equals      NES+$KNES_NCDSTRING;              '
'    nmux_str     float_equals      NEMS+$KNEMS_NCDSTRING;            '
'    ncdcor_q     float_equals      NECL+$KNECL_CHARGE;               '   
'    ncdcor_t     equals            NECL+$KNECL_DTIME;                '   
#.  Monte Carlo event information
#.  =============================

#.  MCPL Inforation
#.  ===============

'  END_OF_NTUPLE; '    #.  This marks the end of the ntuple.
#.
#.
*-----------------------------------------------------------------------
*---  Standard ntuple for MCVPROD muon analysis.
*---  Revision History.
*---  30:Sep:2005 : ver 1.0 : N. McCauley  First version. Based on 333
*-----------------------------------------------------------------------
*DO   NTPR  363  -i(35I 1F 3I -H) -n5000             #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380516 22331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type,Format no.
       0        0        0           #.  8..10  Creation Date, Time,Source Id.
19750101        0 20380516 22331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Call NTP_PACK_USER: =0 No, =1 Yes
'snomuntp;'             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.
#.--- Event Header ---
'    ntpver       equals            1.0;                              '
'    mc_ver       equals            MAST+$KMAST_SNOMAN_VER;           '
'    ev_run       float_equals      EV+$KEV_RUN;                      '
'    ev_tid       float_equals      EV+$KEV_GTR_ID;                   '
'    ds_lo        bits              EV+$KEV_DATA_SET,0,16;            '
'    ds_hi        bits              EV+$KEV_DATA_SET,16,16;           '
'    date         float_equals      EV+$KEV_DTE;                      '
'    time         float_equals      EV+$KEV_HMSC;                     '
'    time_jdy     ntime             EV+$KEV_JDY;                      '
'    time_s       reserved                           ;                '
'    time_us      reserved                           ;                '
'    time_ns      reserved                           ;                '
'    ev_trglo     bits              EV+$KEV_TRG_TYPE,0,16;            '
'    ev_trghi     bits              EV+$KEV_TRG_TYPE,16,16;           '
'    nhits        float_equals      EV+$KEV_NPM:249.5 9999.;          '
'    nowl         nzbank            EV-$KEV_OWL;                      '
'    nbutt        nzbank            EV-$KEV_BUTT;                     '
'    nneck        nzbank            EV-$KEV_NECK;                     '
'    nfecd        nzbank            EV-$KEV_FECD;                     '
'    adamn1       dmm_get_emask     0;                                '
'    adamn2       reserved;                                           '
'    rdamn1       reserved;                                           '
'    rdamn2       reserved;                                           '
'    adamn3       dmm_get_emask     -1;                               '
'    adamn4       reserved;                                           '
'    rdamn3       reserved;                                           '
'    rdamn4       reserved;                                           '
#. Fitter Independant Variables.
#. =============================
'    pmt_onln     equals            FTRP+$KFTXP_TUBES_ONLINE;         '
'    pmt_hit      equals            FTRP+$KFTXP_HIT_TUBES;            '
'    ambs_pk      equals            FTRP+$KFTXP_SOFT_AMB_PEAK;        '
'    ambs_df      equals            FTRP+$KFTXP_SOFT_AMB_DIFF;        '
'    num_phot     equals            FTRP+$KFTXP_DETECTED_NPE;         '
'    rawqrms      equals            FTRP+$KFTXP_RAW_QRMS;             '
'    rawtrms      equals            FTRP+$KFTXP_RAW_TRMS;             '
#. FTI Analysis
#. ============
#. Fit Results.
'    fix          equals            FTIV+$KFTXV_X;                    '
'    fiy          equals            FTIV+$KFTXV_Y;                    '
'    fiz          equals            FTIV+$KFTXV_Z;                    '
'    fiu          equals            FTIT+$KFTXT_U;                    '
'    fiv          equals            FTIT+$KFTXT_V;                    '
'    fiw          equals            FTIT+$KFTXT_W;                    '
'    fib          equals            FTI+$KFTI_IMP;                    '
#. Fit Parameters.
'    fi_smr       equals            FTI+$KFTI_SM_RATIO;               '
'    fi_fnp       equals            FTIP+$KFTXP_FIT_NPE;              '
'    fi_mitr      equals            FTIP+$KFTXP_MITR;                 '
'    fi_citr      equals            FTIP+$KFTXP_MCITR;                '
'    fi_rcha      equals            FTIP+$KFTXP_RICH_ALL;             '
'    fi_rcht      equals            FTIP+$KFTXP_RICH_TRIM;            '
'    fi_trms      equals            FTIP+$KFTXP_TRES_RMS;             '
'    fi_crms      equals            FTIP+$KFTXP_CONE_TRES_RMS;        '
'    fi_ppf       equals            FTIP+$KFTXP_PREPULSE_FRAC;        '
'    fi_udr       equals            FTIP+$KFTXP_UP_DOWN_QRAT;         '
'    fi_ksa       equals            FTIP+$KFTXP_KS_AZIMUTH;           '
'    fi_ksz       equals            FTIP+$KFTXP_KS_ZENITH;            '
'    fi_ddx1      equals            FTIP+$KFTXP_DEDX_1;               '
#. FTY Analysis
#. ============
#. Fit Results.
'    fyx          equals            FTYV+$KFTXV_X;                    '
'    fyy          equals            FTYV+$KFTXV_Y;                    '
'    fyz          equals            FTYV+$KFTXV_Z;                    '
'    fyu          equals            FTYT+$KFTXT_U;                    '
'    fyv          equals            FTYT+$KFTXT_V;                    '
'    fyw          equals            FTYT+$KFTXT_W;                    '
'    fyb          equals            FTY+$KFTI_IMP;                    '
#. Fit Parameters.
'    fy_fnp       equals            FTYP+$KFTXP_FIT_NPE;              '
'    fy_mitr      equals            FTYP+$KFTXP_MITR;                 '
'    fy_citr      equals            FTYP+$KFTXP_MCITR;                '
'    fy_rcha      equals            FTYP+$KFTXP_RICH_ALL;             '
'    fy_rcht      equals            FTYP+$KFTXP_RICH_TRIM;            '
'    fy_trms      equals            FTYP+$KFTXP_TRES_RMS;             '
'    fy_crms      equals            FTYP+$KFTXP_CONE_TRES_RMS;        '
'    fy_ppf       equals            FTYP+$KFTXP_PREPULSE_FRAC;        '
'    fy_udr       equals            FTYP+$KFTXP_UP_DOWN_QRAT;         '
'    fy_ksa       equals            FTYP+$KFTXP_KS_AZIMUTH;           '
'    fy_ksz       equals            FTYP+$KFTXP_KS_ZENITH;            '
'    fy_ddx1      equals            FTYP+$KFTXP_DEDX_1;               '
#. FTZ Analysis
#. ============
#. Fit Results.
'    fzx          equals            FTZV+$KFTXV_X;                    '
'    fzy          equals            FTZV+$KFTXV_Y;                    '
'    fzz          equals            FTZV+$KFTXV_Z;                    '
'    fzu          equals            FTZT+$KFTXT_U;                    '
'    fzv          equals            FTZT+$KFTXT_V;                    '
'    fzw          equals            FTZT+$KFTXT_W;                    '
'    fzb          equals            FTZ+$KFTI_IMP;                    '
#. Fit Parameters.
'    fz_fnp       equals            FTZP+$KFTXP_FIT_NPE;              '
'    fz_mitr      equals            FTZP+$KFTXP_MITR;                 '
'    fz_citr      equals            FTZP+$KFTXP_MCITR;                '
'    fz_rcha      equals            FTZP+$KFTXP_RICH_ALL;             '
'    fz_rcht      equals            FTZP+$KFTXP_RICH_TRIM;            '
'    fz_trms      equals            FTZP+$KFTXP_TRES_RMS;             '
'    fz_crms      equals            FTZP+$KFTXP_CONE_TRES_RMS;        '
'    fz_ppf       equals            FTZP+$KFTXP_PREPULSE_FRAC;        '
'    fz_udr       equals            FTZP+$KFTXP_UP_DOWN_QRAT;         '
'    fz_ksa       equals            FTZP+$KFTXP_KS_AZIMUTH;           '
'    fz_ksz       equals            FTZP+$KFTXP_KS_ZENITH;            '
'    fz_ddx1      equals            FTZP+$KFTXP_DEDX_1;               '
#. FTM Analysis
#. ============
#. Fit Results
'    fmx          equals            FTMV+$KFTXV_X;                    '
'    fmy          equals            FTMV+$KFTXV_Y;                    '
'    fmz          equals            FTMV+$KFTXV_Z;                    '
'    fmu          equals            FTMT+$KFTXT_U;                    '
'    fmv          equals            FTMT+$KFTXT_V;                    '
'    fmw          equals            FTMT+$KFTXT_W;                    '
'    fmx_ex       equals            FTM+$KFTM_EXIT_X;                 '
'    fmy_ex       equals            FTM+$KFTM_EXIT_Y;                 '
'    fmz_ex       equals            FTM+$KFTM_EXIT_Z;                 '
'    fmb          equals            FTM+$KFTM_PCORR;                  '
'    fmb_raw      equals            FTM+$KFTM_PFit;                   '
#. Fit Parameters.
'    fm_chi       equals            FTM+$KFTM_CHIDOF;                 '
'    fm_pdf       equals            FTM+$KFTM_LOG_PDF;                '
'    fm_mitr      equals            FTMP+$KFTXP_MITR;                 '
'    fm_citr      equals            FTMP+$KFTXP_MCITR;                '
'    fm_rcha      equals            FTMP+$KFTXP_RICH_ALL;             '
'    fm_rcht      equals            FTMP+$KFTXP_RICH_TRIM;            '
'    fm_trms      equals            FTMP+$KFTXP_TRES_RMS;             '
'    fm_crms      equals            FTMP+$KFTXP_CONE_TRES_RMS;        '
'    fm_ppf       equals            FTMP+$KFTXP_PREPULSE_FRAC;        '
'    fm_udr       equals            FTMP+$KFTXP_UP_DOWN_QRAT;         '
'    fm_ksa       equals            FTMP+$KFTXP_KS_AZIMUTH;           '
'    fm_ksz       equals            FTMP+$KFTXP_KS_ZENITH;            '
'    fm_ddx1      equals            FTMP+$KFTXP_DEDX_1;               '
#. FTR Results
#. ============
'    frx          equals            FTRV+$KFTXV_X;                    '
'    fry          equals            FTRV+$KFTXV_Y;                    '
'    frz          equals            FTRV+$KFTXV_Z;                    '
'    fru          equals            FTRT+$KFTXT_U;                    '
'    frv          equals            FTRT+$KFTXT_V;                    '
'    frw          equals            FTRT+$KFTXT_W;                    '
'    frb          equals            FTR+$KFTR_IMP;                    '
#. FTC Analysis
#. ============
#. Fit Results
'    fcx          equals            FTCV+$KFTXV_X;                    '
'    fcy          equals            FTCV+$KFTXV_Y;                    '
'    fcz          equals            FTCV+$KFTXV_Z;                    '
'    fcu          equals            FTCT+$KFTXT_U;                    '
'    fcv          equals            FTCT+$KFTXT_V;                    '
'    fcw          equals            FTCT+$KFTXT_W;                    '
'    fcb          equals            FTC+$KFTR_IMP;                    '
'    fcsx         equals            FTC+$KFTC_Xstop;                  '
'    fcsy         equals            FTC+$KFTC_Ystop;                  '
'    fcxz         equals            FTC+$KFTC_Zstop;                  '
#. Fit Parameters.
'    fc_pgof      equals            FTC+$KFTC_pgof;                   '    
'    fc_tgof      equals            FTC+$KFTC_tgof;                   '
'    fc_delt      equals            FTC+$KFTC_dtim;                   '
'    fc_mitr      equals            FTCP+$KFTXP_MITR;                 '
'    fc_citr      equals            FTCP+$KFTXP_MCITR;                '
'    fc_rcha      equals            FTCP+$KFTXP_RICH_ALL;             '
'    fc_rcht      equals            FTCP+$KFTXP_RICH_TRIM;            '
'    fc_trms      equals            FTCP+$KFTXP_TRES_RMS;             '
'    fc_crms      equals            FTCP+$KFTXP_CONE_TRES_RMS;        '
'    fc_ppf       equals            FTCP+$KFTXP_PREPULSE_FRAC;        '
'    fc_udr       equals            FTCP+$KFTXP_UP_DOWN_QRAT;         '
'    fc_ksa       equals            FTCP+$KFTXP_KS_AZIMUTH;           '
'    fc_ksz       equals            FTCP+$KFTXP_KS_ZENITH;            '
'    fc_ddx1      equals            FTCP+$KFTXP_DEDX_1;               '
#.   Monte Carlo Info Collated in FTR
#.   ================================
'    mcx_g        equals            FTRM+$KFTRM_GEN_POS_X;            '
'    mcy_g        equals            FTRM+$KFTRM_GEN_POS_Y;            '
'    mcz_g        equals            FTRM+$KFTRM_GEN_POS_Z;            '
'    mcx_en       equals            FTRM+$KFTRM_ENT_POS_X;            '
'    mcy_en       equals            FTRM+$KFTRM_ENT_POS_Y;            '
'    mcz_en       equals            FTRM+$KFTRM_ENT_POS_Z;            '
'    mcx_ex       equals            FTRM+$KFTRM_EXIT_POS_X;           '
'    mcy_ex       equals            FTRM+$KFTRM_EXIT_POS_Y;           '
'    mcz_ex       equals            FTRM+$KFTRM_EXIT_POS_Z;           '
'    mcx_stp      equals            FTRM+$KFTRM_STOP_POS_X;           '
'    mcy_stp      equals            FTRM+$KFTRM_STOP_POS_Y;           '
'    mcz_stp      equals            FTRM+$KFTRM_STOP_POS_Z;           '
'    mcu_g        equals            FTRM+$KFTRM_GEN_DIR_U;            '
'    mcv_g        equals            FTRM+$KFTRM_GEN_DIR_V;            '
'    mcw_g        equals            FTRM+$KFTRM_GEN_DIR_W;            '
'    mcbg         equals            FTRM+$KFTRM_GEN_IMPACT;           '
'    mcb          equals            FTRM+$KFTRM_AVE_IMPACT;           '
'    mc_ene       equals            FTRM+$KFTRM_MU_ENE;               '
'    mc_dedx      equals            FTRM+$KFTRM_DEDX;                 '
'    mu_st_lo     bits              FTRM+$KFTRM_MU_MASK,0,16;         '
'    mu_st_hi     bits              FTRM+$KFTRM_MU_MASK,16,16;        '
'    mu_pt_lo     bits              FTRM+$KFTRM_PART_MASK,0,16;       '
'    mu_pt_hi     bits              FTRM+$KFTRM_PART_MASK,16,16;      '
#.  MCPL Inforation
#.  ===============
'    _vx_cls      float_equals      MCVX+$KMCVX_CLS: -1000000. 1.5;   '
'    _mctk_ps     get_link          mcvx-$KMCVX_MCTKI;                '
'    _mcvx_ps     get_link          _mctk_ps-+1;                      '
'    nu_ener      equals            _mctk_ps+$KMCTK_ENE;              '
'    nu_dirx      equals            _mctk_ps+$KMCTK_DRX;              '
'    nu_diry      equals            _mctk_ps+$KMCTK_DRY;              '
'    nu_dirz      equals            _mctk_ps+$KMCTK_DRZ;              '
'    nu_flav      equals            _mctk_ps+$KMCTK_IDP:veto -1. 36.; '
'    nu_intc      float_equals      _mcvx_ps+$KMCVX_INC;              '
'    nu_vtxx      equals            _mcvx_ps+$KMCVX_PSX;              '
'    nu_vtxy      equals            _mcvx_ps+$KMCVX_PSY;              '
'    nu_vtxz      equals            _mcvx_ps+$KMCVX_PSZ;              '
'  END_OF_NTUPLE; '    #.  This marks the end of the ntuple.
*----------------------------------------------------------------------------
*---
*---  Standard Ntuple for PGT Data.
*---  Revision History.
*---  30:Sep:2005: Ver 1.0 : N. McCauley First Version. Based on 335.
*---
*----------------------------------------------------------------------------
*DO   NTPR  365  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' pgtdata; '            #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.
'    ntpver       equals            1.0;                              '
'    ev_run       float_equals      EV+$KEV_RUN;                      '
'    ev_tid       float_equals      EV+$KEV_GTR_ID;                   '
'    ds_lo        bits              EV+$KEV_DATA_SET,0,16;            '
'    ds_hi        bits              EV+$KEV_DATA_SET,16,16;           '
'    date         float_equals      EV+$KEV_DTE;                      '
'    time         float_equals      EV+$KEV_HMSC;                     '
'    time_jdy     ntime             EV+$KEV_JDY;                      '
'    time_s       reserved                           ;                '
'    time_us      reserved                           ;                '
'    time_ns      reserved                           ;                '
'    ev_trglo     bits              EV+$KEV_TRG_TYPE,0,16;            '
'    ev_trghi     bits              EV+$KEV_TRG_TYPE,16,16;           '
'    nhits        float_equals      EV+$KEV_NPM;                      '
'    ncd_stat     float_equals      EV+$KEV_NCD_STATUS;               '
'    drxsun       dirsun            EV+$KEV_JDY;                      '
'    drysun       reserved;                                           '
'    drzsun       reserved;                                           '
'    adamn1       dmm_get_emask     0;                                '
'    adamn2       reserved;                                           '
'    rdamn1       reserved;                                           '
'    rdamn2       reserved;                                           '
'    adamn3       dmm_get_emask     -1;                               '
'    adamn4       reserved;                                           '
'    rdamn3       reserved;                                           '
'    rdamn4       reserved;                                           '
'    amb_peak     float_equals      EV+$KEV_PEAK;                     '
'    amb_int      float_equals      EV+$KEV_INT;                      '
'    nowl         nzbank            EV-$KEV_OWL;                      '
'    nbutt        nzbank            EV-$KEV_BUTT;                     '
'    nneck        nzbank            EV-$KEV_NECK;                     '
'    nfecd        nzbank            EV-$KEV_FECD;                     '
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple
*----------------------------------------------------------------------------
*---
*---  Standard MCPROD Ntuple for the Monte Carlo Decay Electrons.
*---  Needs a different MC event selection than 360.
*---  As MC only some data parts are cut, and ntuple is restructured.
*---
*---  Revision History.
*---  30:Sep:2005: Ver 1.0 : N. McCauley First Version Based on 338.
*---  27:Jul:2006: Ver 1.1 : Brought up to date with 360.
*---
*----------------------------------------------------------------------------
*DO   NTPR  368  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Call NTP_PACK_USER: =0 No, =1 Yes
' snontp; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.

#.
#.  General Event information
#.  =========================
'    ntpver       equals            1.0;                              '
'    mc_ver       equals            MAST+$KMAST_SNOMAN_VER;           '
'    ev_run       float_equals      EV+$KEV_RUN;                      '
'    ev_tid       float_equals      EV+$KEV_GTR_ID;                   '
'    ds_lo        bits              EV+$KEV_DATA_SET,0,16;            '
'    ds_hi        bits              EV+$KEV_DATA_SET,16,16;           '
'    date         float_equals      EV+$KEV_DTE;                      '
'    time         float_equals      EV+$KEV_HMSC;                     '
'    time_jdy     ntime             EV+$KEV_JDY;                      '
'    time_s       reserved                           ;                '
'    time_us      reserved                           ;                '
'    time_ns      reserved                           ;                '
'    nhits        float_equals      EV+$KEV_NPM;                      '
'    drxsun       dirsun            EV+$KEV_JDY;                      '
'    drysun       reserved;                                           '
'    drzsun       reserved;                                           '
#.  Path Fitter Analysis
#.  ====================
'    xfp          equals            FTPV+$KFTXV_X;                    '
'    yfp          equals            FTPV+$KFTXV_Y;                    '
'    zfp          equals            FTPV+$KFTXV_Z;                    '
'    rfp          magnitude         FTPV+$KFTXV_X;                    '
'    thetafp      theta_phi         FTPT+$KFTXT_U;                    '
'    phifp        reserved;                                           '
'    tfitp        equals            FTPV+$KFTXV_T;                    '
'    a2dprb       equals            FTP+$KFTP_KSPROB_ANG2D;           '
'    phiprb       equals            FTP+$KFTP_KSPROB_ANG_PHI;         '
'    enerap       equals            FTPR+$KRSP_ENE;                   '
'    nwinrp       equals            FTPR+$KRSP_NWIN;                  '
'    rspncorp     equals            FTPR+$KRSP_NCOR;                  ' 
'    rsppiter     equals            FTPR+$KRSP_FOM;                   '
'    enerop       equals            FTPR+$KRSP_ALT_ENERGY;            '
'    enekp        equals            FTPK+$KFTXK_ENERGY;               '
'    enekump      equals            FTPK+$KFTXK_ENE_MERR;             '
'    enekupp      equals            FTPK+$KFTXK_ENE_PERR;             '
'    enekprp      equals            FTPK+$KFTXK_DIR_SCALE;            '
'    nwinkp       equals            FTPK+$KFTXK_NEFF;                 '
'    cstsunp      equals            FTPC+$KFTXC_SOL_DIR_1;            '
'    thetaijp     equals            FTPC+$KFTXC_THETA_IJ_1;           '
'    itrp         equals            FTPC+$KFTXC_ITR_1 ;               '
'    beta1p       equals            FTPC+$KFTXC_LEG_1 ;               '
'    beta4p       equals            FTPC+$KFTXC_LEG_4 ;               '
'    phiksap      equals            FTPC+$KFTXC_KSPHI_1;              '
'    phikspp      equals            FTPC+$KFTXC_KSPHI_2;              '
'    angksap      equals            FTPC+$KFTXC_KSANG_1;              '
'    angkspp      equals            FTPC+$KFTXC_KSANG_2;              '
'    qtijp        equals            FTPC+$KFTXC_QW_TIJ_1;             '
'    qpt_prbp     equals            FTPC+$KFTXC_QPDT_1;               '
'    qpt_mqp      equals            FTPC+$KFTXC_QPDT_2;               '
'    qpt_nwp      equals            FTPC+$KFTXC_QPDT_4;               '
'    timksp       equals            FTPC+$KFTXC_KSTIM_1;              '
#.  FTU Analysis
#.  ============
'    xfu          equals            FTUV+$KFTXV_X;                    '
'    yfu          equals            FTUV+$KFTXV_Y;                    '
'    zfu          equals            FTUV+$KFTXV_Z;                    '
'    rfu          magnitude         FTUV+$KFTXV_X;                    '
'    thetafu      theta_phi         FTUT+$KFTXT_U;                    '
'    phifu        reserved;                                           '
'    tfitu        equals            FTUV+$KFTXV_T;                    '
'    enerau       equals            FTUR+$KRSP_ENE;                   '
'    nwinru       equals            FTUR+$KRSP_NWIN;                  '
'    rspncoru     equals            FTUR+$KRSP_NCOR;                  ' 
'    rsppiteu     equals            FTUR+$KRSP_FOM;                   '
'    enerou       equals            FTUR+$KRSP_ALT_ENERGY;            '
'    eneku        equals            FTUK+$KFTXK_ENERGY;               '
'    enekumu      equals            FTUK+$KFTXK_ENE_MERR;             '
'    enekupu      equals            FTUK+$KFTXK_ENE_PERR;             '
'    enekpru      equals            FTUK+$KFTXK_DIR_SCALE;            '
'    nwinku       equals            FTUK+$KFTXK_NEFF;                 '
'    cstsunu      equals            FTUC+$KFTXC_SOL_DIR_1;            '
'    thetaiju     equals            FTUC+$KFTXC_THETA_IJ_1;           '
'    itru         equals            FTUC+$KFTXC_ITR_1 ;               '
'    beta1u       equals            FTUC+$KFTXC_LEG_1 ;               '
'    beta4u       equals            FTUC+$KFTXC_LEG_4 ;               '
'    phiksau      equals            FTUC+$KFTXC_KSPHI_1;              '
'    phikspu      equals            FTUC+$KFTXC_KSPHI_2;              '
'    angksau      equals            FTUC+$KFTXC_KSANG_1;              '
'    angkspu      equals            FTUC+$KFTXC_KSANG_2;              '
'    qtiju        equals            FTUC+$KFTXC_QW_TIJ_1;             '
'    qpt_prbu     equals            FTUC+$KFTXC_QPDT_1;               '
'    qpt_mqu      equals            FTUC+$KFTXC_QPDT_2;               '
'    qpt_nwu      equals            FTUC+$KFTXC_QPDT_4;               '
'    timksu       equals            FTUC+$KFTXC_KSTIM_1;              '

#.  Grid Fitter Analysis
#.  ====================
'    xfg          equals            FTGV+$KFTXV_X;                    '
'    yfg          equals            FTGV+$KFTXV_Y;                    '
'    zfg          equals            FTGV+$KFTXV_Z;                    '
'    rfg          magnitude         FTGV+$KFTXV_X;                    '
'    thetafg      theta_phi         FTGT+$KFTXT_U;                    '
'    phifg        reserved;                                           '
'    tfg          equals            FTGV+$KFTXV_T;                    '
'    like1        equals            FTG+$KFTG_M_LIKE;                 '
'    nfitg1       float_equals      FTG+$KFTX_PMT_AVAIL;              '
'    like2        equals            FTGT+7;                           '
'    nfitg2       float_equals      FTGT+8;                           '
'    enerag       equals            FTGR+$KRSP_ENE;                   '
'    nwinrg       equals            FTGR+$KRSP_NWIN;                  '
'    rspncorg     equals            FTGR+$KRSP_NCOR;                  ' 
'    rsppiteg     equals            FTGR+$KRSP_FOM;                   '
'    enerog       equals            FTGR+$KRSP_ALT_ENERGY;            '
'    enekg        equals            FTGK+$KFTXK_ENERGY;               '
'    enekumg      equals            FTGK+$KFTXK_ENE_MERR;             '
'    enekupg      equals            FTGK+$KFTXK_ENE_PERR;             '
'    enekprg      equals            FTGK+$KFTXK_DIR_SCALE;            '
'    nwinkg       equals            FTGK+$KFTXK_NEFF;                 '
'    cstsung      equals            FTGC+$KFTXC_SOL_DIR_1;            '
'    thetaijg     equals            FTGC+$KFTXC_THETA_IJ_1;           '
'    itrg         equals            FTGC+$KFTXC_ITR_1 ;               '
'    beta1g       equals            FTGC+$KFTXC_LEG_1 ;               '
'    beta4g       equals            FTGC+$KFTXC_LEG_4 ;               '
'    phiksag      equals            FTGC+$KFTXC_KSPHI_1;              '
'    phikspg      equals            FTGC+$KFTXC_KSPHI_2;              '
'    angksag      equals            FTGC+$KFTXC_KSANG_1;              '
'    angkspg      equals            FTGC+$KFTXC_KSANG_2;              '
'    qtijg        equals            FTGC+$KFTXC_QW_TIJ_1;             '
'    qpt_prbg     equals            FTGC+$KFTXC_QPDT_1;               '
'    qpt_mqg      equals            FTGC+$KFTXC_QPDT_2;               '
'    qpt_nwg      equals            FTGC+$KFTXC_QPDT_4;               '
'    timksg       equals            FTGC+$KFTXC_KSTIM_1;              '
#.  Common Parameters
#.  ========================
'    rsp_nwk      equals            FTUR+$KRSP_NWORKING;              '
'    rsp_onln     equals            FTUR+$KRSP_NONLINE;               '
'    rsp_ncal     equals            FTUR+$KRSP_NCAL;                  '
'    rsp_drif     equals            FTUR+$KRSP_DRIFT;                 '
'    rsp_nhit     equals            FTUR+$KRSP_NHITS;                 '
'    rsp_allq     equals            FTUR+26;                          '
'    rsp_dqxx     equals            FTUR+27;                          '
'    qpt_nhit     equals            FTUC+$KFTXC_QPDT_3;               '
#.  Monte Carlo event information
#.  We select our source vertex diferently looking for muon stops or decay.
#.  =======================
'    int_ttt      unpack_interact   MCVX+$KMCVX_INC;                  '
'    int_ppp      reserved;                                           '
'    int_ccc      reserved;                                           '
'    _is_mude     equals            int_ppp:344.5 347.5;              '
'    revent       magnitude         MCVX+$KMCVX_PSX;                  '
'    xe           equals            MCVX+$KMCVX_PSX;                  '
'    ye           equals            MCVX+$KMCVX_PSY;                  '
'    ze           equals            MCVX+$KMCVX_PSZ;                  '
'    theta        theta_phi         MCVX-$KMCVX_MCTK+$KMCTK_DRX;      '
'    phi          reserved;                                           '
'    tgen         single_equals     MCVX+$KMCVX_TIM;                  '
'    egen         equals            MCVX-$KMCVX_MCTK+$KMCTK_ENE;      '
'    numcer       equals            EGS4+7, EGS4+8, EGS4+9;           '
'  END_OF_NTUPLE; '    #.  This marks the end of the ntuple.
#.
#.
*----------------------------------------------------------------------------
*---
*---  Standard MCPROD Ntuple for simulated Leslie events.
*---  Revision History.
*---  30:Sep:2005: Ver 1.0 : N. McCauley : First Version. Based on 339.
*---  19:Jul:2006: Ver 1.1 : W. Heintzelman : Add new parameters developed
*---                                          for LETA
*---
*----------------------------------------------------------------------------
*DO   NTPR  369  -i(35I 1F 3I -H)  -n5000                #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Call NTP_PACK_USER: =0 No, =1 Yes
' snontp; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.

#.
#.  General Event information
#.  =========================
'    ntpver       equals            1.0;                              '
'    mc_ver	  equals            MAST+$KMAST_SNOMAN_VER;           '
'    pmteff       equals            MC+$KMC_PMT_EFF;                  '
'    ev_run       float_equals      EV+$KEV_RUN;                      '
'    ev_tid       float_equals      EV+$KEV_GTR_ID;                   '
'    ds_lo        bits              EV+$KEV_DATA_SET,0,16;            '
'    ds_hi        bits              EV+$KEV_DATA_SET,16,16;           '
'    date         float_equals      EV+$KEV_DTE;                      '
'    time         float_equals      EV+$KEV_HMSC;                     '
'    time_jdy     ntime             EV+$KEV_JDY;                      '
'    time_s       reserved                           ;                '
'    time_us      reserved                           ;                '
'    time_ns      reserved                           ;                '
'    nhits        float_equals      EV+$KEV_NPM;                      '
'    drxsun       dirsun            EV+$KEV_JDY;                      '
'    drysun       reserved;                                           '
'    drzsun       reserved;                                           '
#.  Path Fitter Analysis
#.  ====================
'    xfp          equals            FTPV+$KFTXV_X;                    '
'    yfp          equals            FTPV+$KFTXV_Y;                    '
'    zfp          equals            FTPV+$KFTXV_Z;                    '
'    rfp          magnitude         FTPV+$KFTXV_X;                    '
'    thetafp      theta_phi         FTPT+$KFTXT_U;                    '
'    phifp        reserved;                                           '
'    tfitp        equals            FTPV+$KFTXV_T;                    '
'    a2dprb       equals            FTP+$KFTP_KSPROB_ANG2D;           '
'    phiprb       equals            FTP+$KFTP_KSPROB_ANG_PHI;         '
'    enerap       equals            FTPR+$KRSP_ENE;                   '
'    nwinrp       equals            FTPR+$KRSP_NWIN;                  '
'    rspncorp     equals            FTPR+$KRSP_NCOR;                  ' 
'    rsppiter     equals            FTPR+$KRSP_FOM;                   '
'    enerop       equals            FTPR+$KRSP_ALT_ENERGY;            '
'    enekp        equals            FTPK+$KFTXK_ENERGY;               '
'    enekump      equals            FTPK+$KFTXK_ENE_MERR;             '
'    enekupp      equals            FTPK+$KFTXK_ENE_PERR;             '
'    enekprp      equals            FTPK+$KFTXK_DIR_SCALE;            '
'    nwinkp       equals            FTPK+$KFTXK_NEFF;                 '
'    cstsunp      equals            FTPC+$KFTXC_SOL_DIR_1;            '
'    thetaijp     equals            FTPC+$KFTXC_THETA_IJ_1;           '
'    itrp         equals            FTPC+$KFTXC_ITR_1 ;               '
'    beta1p       equals            FTPC+$KFTXC_LEG_1 ;               '
'    beta4p       equals            FTPC+$KFTXC_LEG_4 ;               '
'    phiksap      equals            FTPC+$KFTXC_KSPHI_1;              '
'    phikspp      equals            FTPC+$KFTXC_KSPHI_2;              '
'    angksap      equals            FTPC+$KFTXC_KSANG_1;              '
'    angkspp      equals            FTPC+$KFTXC_KSANG_2;              '
'    qtijp        equals            FTPC+$KFTXC_QW_TIJ_1;             '
'    qpt_prbp     equals            FTPC+$KFTXC_QPDT_1;               '
'    qpt_mqp      equals            FTPC+$KFTXC_QPDT_2;               '
'    qpt_nwp      equals            FTPC+$KFTXC_QPDT_4;               '
'    timksp       equals            FTPC+$KFTXC_KSTIM_1;              '
#.  FTU Analysis
#.  ============
'    xfu          equals            FTUV+$KFTXV_X;                    '
'    yfu          equals            FTUV+$KFTXV_Y;                    '
'    zfu          equals            FTUV+$KFTXV_Z;                    '
'    rfu          magnitude         FTUV+$KFTXV_X;                    '
'    thetafu      theta_phi         FTUT+$KFTXT_U;                    '
'    phifu        reserved;                                           '
'    tfitu        equals            FTUV+$KFTXV_T;                    '
'    enerau       equals            FTUR+$KRSP_ENE;                   '
'    nwinru       equals            FTUR+$KRSP_NWIN;                  '
'    rspncoru     equals            FTUR+$KRSP_NCOR;                  ' 
'    rsppiteu     equals            FTUR+$KRSP_FOM;                   '
'    enerou       equals            FTUR+$KRSP_ALT_ENERGY;            '
'    eneku        equals            FTUK+$KFTXK_ENERGY;               '
'    enekumu      equals            FTUK+$KFTXK_ENE_MERR;             '
'    enekupu      equals            FTUK+$KFTXK_ENE_PERR;             '
'    enekpru      equals            FTUK+$KFTXK_DIR_SCALE;            '
'    nwinku       equals            FTUK+$KFTXK_NEFF;                 '
'    cstsunu      equals            FTUC+$KFTXC_SOL_DIR_1;            '
'    thetaiju     equals            FTUC+$KFTXC_THETA_IJ_1;           '
'    itru         equals            FTUC+$KFTXC_ITR_1 ;               '
'    beta1u       equals            FTUC+$KFTXC_LEG_1 ;               '
'    beta4u       equals            FTUC+$KFTXC_LEG_4 ;               '
'    phiksau      equals            FTUC+$KFTXC_KSPHI_1;              '
'    phikspu      equals            FTUC+$KFTXC_KSPHI_2;              '
'    angksau      equals            FTUC+$KFTXC_KSANG_1;              '
'    angkspu      equals            FTUC+$KFTXC_KSANG_2;              '
'    qtiju        equals            FTUC+$KFTXC_QW_TIJ_1;             '
'    qpt_prbu     equals            FTUC+$KFTXC_QPDT_1;               '
'    qpt_mqu      equals            FTUC+$KFTXC_QPDT_2;               '
'    qpt_nwu      equals            FTUC+$KFTXC_QPDT_4;               '
'    timksu       equals            FTUC+$KFTXC_KSTIM_1;              '
#.  Grid Fitter Analysis
#.  ====================
'    xfg          equals            FTGV+$KFTXV_X;                    '
'    yfg          equals            FTGV+$KFTXV_Y;                    '
'    zfg          equals            FTGV+$KFTXV_Z;                    '
'    rfg          magnitude         FTGV+$KFTXV_X;                    '
'    thetafg      theta_phi         FTGT+$KFTXT_U;                    '
'    phifg        reserved;                                           '
'    tfg          equals            FTGV+$KFTXV_T;                    '
'    like1        equals            FTG+$KFTG_M_LIKE;                 '
'    nfitg1       float_equals      FTG+$KFTX_PMT_AVAIL;              '
'    like2        equals            FTGT+7;                           '
'    nfitg2       float_equals      FTGT+8;                           '
'    enerag       equals            FTGR+$KRSP_ENE;                   '
'    nwinrg       equals            FTGR+$KRSP_NWIN;                  '
'    rspncorg     equals            FTGR+$KRSP_NCOR;                  ' 
'    rsppiteg     equals            FTGR+$KRSP_FOM;                   '
'    enerog       equals            FTGR+$KRSP_ALT_ENERGY;            '
'    enekg        equals            FTGK+$KFTXK_ENERGY;               '
'    enekumg      equals            FTGK+$KFTXK_ENE_MERR;             '
'    enekupg      equals            FTGK+$KFTXK_ENE_PERR;             '
'    enekprg      equals            FTGK+$KFTXK_DIR_SCALE;            '
'    nwinkg       equals            FTGK+$KFTXK_NEFF;                 '
'    cstsung      equals            FTGC+$KFTXC_SOL_DIR_1;            '
'    thetaijg     equals            FTGC+$KFTXC_THETA_IJ_1;           '
'    itrg         equals            FTGC+$KFTXC_ITR_1 ;               '
'    beta1g       equals            FTGC+$KFTXC_LEG_1 ;               '
'    beta4g       equals            FTGC+$KFTXC_LEG_4 ;               '
'    phiksag      equals            FTGC+$KFTXC_KSPHI_1;              '
'    phikspg      equals            FTGC+$KFTXC_KSPHI_2;              '
'    angksag      equals            FTGC+$KFTXC_KSANG_1;              '
'    angkspg      equals            FTGC+$KFTXC_KSANG_2;              '
'    qtijg        equals            FTGC+$KFTXC_QW_TIJ_1;             '
'    qpt_prbg     equals            FTGC+$KFTXC_QPDT_1;               '
'    qpt_mqg      equals            FTGC+$KFTXC_QPDT_2;               '
'    qpt_nwg      equals            FTGC+$KFTXC_QPDT_4;               '
'    timksg       equals            FTGC+$KFTXC_KSTIM_1;              '
#.  Common Energy Parameters
#.  ========================
'    rsp_nwk      equals            FTUR+$KRSP_NWORKING;              '
'    rsp_onln     equals            FTUR+$KRSP_NONLINE;               '
'    rsp_ncal     equals            FTUR+$KRSP_NCAL;                  '
'    rsp_drif     equals            FTUR+$KRSP_DRIFT;                 '
'    rsp_nhit     equals            FTUR+$KRSP_NHITS;                 '
'    rsp_allq     equals            FTUR+26;                          '
'    rsp_dqxx     equals            FTUR+27;                          '
'    qpt_nhit     equals            FTUC+$KFTXC_QPDT_3;                '
#. Cuts for first Leslie events photon.
#. ====================================
'    _vx_cls      float_equals      MCVX+$KMCVX_CLS:     1   1  ;     '
'    int_ttt      unpack_interact   MCVX+$KMCVX_INC;                  '
'    int_ppp      reserved:                              199 199;     '
'    int_ccc      reserved;                                           '
#.  Monte Carlo event information
#.  =======================
'    revent       magnitude         MCVX+$KMCVX_PSX;                  '
'    xe           equals            MCVX+$KMCVX_PSX;                  '
'    ye           equals            MCVX+$KMCVX_PSY;                  '
'    ze           equals            MCVX+$KMCVX_PSZ;                  '
'    tgen         single_equals     MCVX+$KMCVX_TIM;                  '
'    egen         equals            MCVX-$KMCVX_MCTK+$KMCTK_ENE;      '
'    nphot        float_equals      MCGN+$KMCGN_NUM;            '
'    tim_exp      equals            MCGN+$KMCGN_GENTIM_EXPPAR;  '
'  END_OF_NTUPLE; '    #.  This marks the end of the ntuple.
#.
*----------------------------------------------------------------------------
*---
*---    Electron Antineutrino Ntuple Banks.
*---
*---    Contact:  John Orrell at UW or Thomas Kutter at LSU
*---
*---    These 5 ntuples select out the information for all particles in a
*---    CCbar monte carlo interaction.
*---
*---    The ntuple numbering scheme is a historical artifact.
*---
*---    146 is the CCbar start vertex
*---    147 is the positron MC information
*---    145 is an *additional neutron creation* MC information
*---        (neutron outgoing vertexes excluding elastic scattering)
*---    148 is the neutron MC sink information
*---        (all neutron sink vertexes excluding elastic scattering)
*---    149 is the Event bank output for things that make Nhits
*---
*---    For multiple particle monte carlo events, requesting both MC vertex
*---    and Event bank information can lead to duplicate entries in the output
*---    ntuples. This 5 ntuple scheme deals with this "feature". A seperate
*---    re-merging process is needed (and has been developed).
*---
*---    The "header" information at the start of each ntuple defintion is
*---    how the re-merging process is accomplished. Thus, even though the
*---    the information is being duplicated, it is necessary to have so that
*---    the MC information can be matched to the Event bank information.
*---
*---    Currently 145 is not merged into the combined ntuple because it will
*---    create conflicts in the time matching routine used to identify events.
*---    145 is useful because it records when a neutron is created by any
*---    interation that is *not* the initial antineutrino interaction vertex.
*---    There is also no way to correlate (using ntuples) the starting vertex
*---    for a given neutron with that same neutron's sink vertex.
*---
*---    Revision History.
*---    12:Jun:2003 N. McCauley Original version provided by J. Orrell and 
*---                            T. Kutter. Ntuple 149 is cleaned up by 
*---                            N. McCauley.
*---    13:Jun:2003 J. Orrell   Added Thomas's 145 neutron creation vertex ntp.
*---                            Removed "numcer", the # of Cerenkov photons.
*---    23:Jun:2003 J. Orrell   Updated the ntuple description above.
*---    25:Jun:2003 N. McCauley Edit all vairables to <= 6 characters.
*---                            Remove the time fitter, it's only a seed.
*---    31:Mar:2005 N. McCauley Install in ntuple.dat
*---
*----------------------------------------------------------------------------

*----------------------------------------------------------------------------
*---
*---    Antinu Ntuple Bank.
*---    The CCbar start MC vertex.
*---
*----------------------------------------------------------------------------
*DO   NTPR  146  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' n146; '               #.   Ntuple name.
#.
#.   There now come a series of field entries, one for each variable.
#.
#.   Variable     Function              Parameter(s)
#.    Name
#.
#.   "Source Point" - A monte carlo ntuple of the CCbar start
#.
#.  Header
'    mc_num     float_equals      MC+$KMC_EVN;                           '
'    mc_jdy     float_equals      MC+$KMC_JDY;                           '
'    mc_ut1     float_equals      MC+$KMC_UT1;                           '
'    mc_ut2     float_equals      MC+$KMC_UT2;                           '
'    mc_time    single_equals     MCVX+$KMCVX_TIM;                       '
#.
#.  Tests
'    _class     float_equals      MCVX+$KMCVX_CLS: 0.9 1.1;              '
#.
#.  MC
'    seed1      float_equals      MC+$KMC_SEED1;                         '
'    seed2      float_equals      MC+$KMC_SEED2;                         '
'    seedno     float_equals      MC+$KMC_SEED_NUM;                      '
'    mcver      float_equals      MC+$KMC_MCVER;                         '
'    nogerr     equals            MC+$KMC_NUM_GE_ERR;                    '
'    pmt_ef     equals            MC+$KMC_PMT_EFF;                       '
#.
#.  Vertex
'    class      float_equals      MCVX+$KMCVX_CLS;                       '
'    ttt        unpack_interact   MCVX+$KMCVX_INC;                       '
'    ppp        reserved;                                                '
'    ccc        reserved;                                                '
'    mc_x       equals            MCVX+$KMCVX_PSX;                       '
'    mc_y       equals            MCVX+$KMCVX_PSY;                       '
'    mc_z       equals            MCVX+$KMCVX_PSZ;                       '
'    mc_r       magnitude         MCVX+$KMCVX_PSX;                       '
'    region     float_equals      MCVX+$KMCVX_RGN;                       '
'    media      float_equals      MCVX+$KMCVX_IDM;                       '
#.
#.  Incoming track
'    id_in      float_equals      MCVX-$KMCVX_MCTKI+$KMCTK_IDP;          '
'    dirx_i     equals            MCVX-$KMCVX_MCTKI+$KMCTK_DRX;          '
'    diry_i     equals            MCVX-$KMCVX_MCTKI+$KMCTK_DRY;          '
'    dirz_i     equals            MCVX-$KMCVX_MCTKI+$KMCTK_DRZ;          '
'    engy_i     equals            MCVX-$KMCVX_MCTKI+$KMCTK_ENE;          '
#.
#.  Outgoing track
'    id_out     float_equals      MCVX-$KMCVX_MCTK+$KMCTK_IDP;           '
'    dirx_o     equals            MCVX-$KMCVX_MCTK+$KMCTK_DRX;           '
'    diry_o     equals            MCVX-$KMCVX_MCTK+$KMCTK_DRY;           '
'    dirz_o     equals            MCVX-$KMCVX_MCTK+$KMCTK_DRZ;           '
'    engy_o     equals            MCVX-$KMCVX_MCTK+$KMCTK_ENE;           '
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.


*----------------------------------------------------------------------------
*---
*---    Antinu Ntuple Bank.
*---    The Positron MC Information.
*---
*----------------------------------------------------------------------------
*DO   NTPR  147  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' n147; '             #.   Ntuple name.
#.
#.   There now come a series of field entries, one for each variable.
#.
#.   Variable     Function              Parameter(s)
#.    Name
#.
#.   Positron monte carlo generation information
#.
#.  Header
'    mc_num     float_equals      MC+$KMC_EVN;                           '
'    mc_jdy     float_equals      MC+$KMC_JDY;                           '
'    mc_ut1     float_equals      MC+$KMC_UT1;                           '
'    mc_ut2     float_equals      MC+$KMC_UT2;                           '
'    mc_time    single_equals     MCVX+$KMCVX_TIM;                       '
#.
#.  Tests
'    _id_in     float_equals      MCVX-$KMCVX_MCTKI+$KMCTK_IDP: 21.;     '
'    _ttt       unpack_interact   MCVX+$KMCVX_INC;                       '
'    _ppp       reserved;                                                '
'    _ccc       reserved;                                                '
'    _test1     eq                _ppp, 399. : 1.;                       '
#.
#.  MC
'    seed1      float_equals      MC+$KMC_SEED1;                         '
'    seed2      float_equals      MC+$KMC_SEED2;                         '
'    seedno     float_equals      MC+$KMC_SEED_NUM;                      '
'    mcver      float_equals      MC+$KMC_MCVER;                         '
'    nogerr     equals            MC+$KMC_NUM_GE_ERR;                    '
'    pmt_ef     equals            MC+$KMC_PMT_EFF;                       '
#.
#.  Vertex
'    class      float_equals      MCVX+$KMCVX_CLS;                       '
'    ttt        unpack_interact   MCVX+$KMCVX_INC;                       '
'    ppp        reserved;                                                '
'    ccc        reserved;                                                '
'    mc_x       equals            MCVX+$KMCVX_PSX;                       '
'    mc_y       equals            MCVX+$KMCVX_PSY;                       '
'    mc_z       equals            MCVX+$KMCVX_PSZ;                       '
'    mc_r       magnitude         MCVX+$KMCVX_PSX;                       '
'    region     float_equals      MCVX+$KMCVX_RGN;                       '
'    media      float_equals      MCVX+$KMCVX_IDM;                       '
#.
#.  Incoming track
'    id_in      float_equals      MCVX-$KMCVX_MCTKI+$KMCTK_IDP;          '
'    dirx_i     equals            MCVX-$KMCVX_MCTKI+$KMCTK_DRX;          '
'    diry_i     equals            MCVX-$KMCVX_MCTKI+$KMCTK_DRY;          '
'    dirz_i     equals            MCVX-$KMCVX_MCTKI+$KMCTK_DRZ;          '
'    engy_i     equals            MCVX-$KMCVX_MCTKI+$KMCTK_ENE;          '
#.
#.  Outgoing track
'    id_out     float_equals      MCVX-$KMCVX_MCTK+$KMCTK_IDP;           '
'    dirx_o     equals            MCVX-$KMCVX_MCTK+$KMCTK_DRX;           '
'    diry_o     equals            MCVX-$KMCVX_MCTK+$KMCTK_DRY;           '
'    dirz_o     equals            MCVX-$KMCVX_MCTK+$KMCTK_DRZ;           '
'    engy_o     equals            MCVX-$KMCVX_MCTK+$KMCTK_ENE;           '
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.


*----------------------------------------------------------------------------
*---
*---    Antinu Ntuple Bank.
*---    Neutron "creation" MC Information.
*---
*----------------------------------------------------------------------------
*DO   NTPR  145  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' n145; '               #.   Ntuple name.
#.
#.   There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.
#.   Neutron monte carlo "creation" vertices.
#.
#.  Header
'    mc_num     float_equals      MC+$KMC_EVN;                           '
'    mc_jdy     float_equals      MC+$KMC_JDY;                           '
'    mc_ut1     float_equals      MC+$KMC_UT1;                           '
'    mc_ut2     float_equals      MC+$KMC_UT2;                           '
'    mc_time    single_equals     MCVX+$KMCVX_TIM;                       '
#.
#.  Tests
'    _class     float_equals      MCVX+$KMCVX_CLS: 2.9 3.1;              '
'    _id_out    float_equals      MCVX-$KMCVX_MCTK+$KMCTK_IDP: $neutron; '
'    _ttt       unpack_interact   MCVX+$KMCVX_INC;                       '
'    _ppp       reserved;                                                '
'    _ccc       reserved;                                                '
'    _test1     eq                _ppp, 321. : 0.;                       '
#.
#.  MC
'    seed1      float_equals      MC+$KMC_SEED1;                         '
'    seed2      float_equals      MC+$KMC_SEED2;                         '
'    seedno     float_equals      MC+$KMC_SEED_NUM;                      '
'    mcver      float_equals      MC+$KMC_MCVER;                         '
'    nogerr     equals            MC+$KMC_NUM_GE_ERR;                    '
'    pmt_ef     equals            MC+$KMC_PMT_EFF;                       '
#.
#.  Vertex
'    class      float_equals      MCVX+$KMCVX_CLS;                       '
'    ttt        unpack_interact   MCVX+$KMCVX_INC;                       '
'    ppp        reserved;                                                '
'    ccc        reserved;                                                '
'    mc_x       equals            MCVX+$KMCVX_PSX;                       '
'    mc_y       equals            MCVX+$KMCVX_PSY;                       '
'    mc_z       equals            MCVX+$KMCVX_PSZ;                       '
'    mc_r       magnitude         MCVX+$KMCVX_PSX;                       '
'    region     float_equals      MCVX+$KMCVX_RGN;                       '
'    media      float_equals      MCVX+$KMCVX_IDM;                       '
#.
#.  Incoming track
'    id_in      float_equals      MCVX-$KMCVX_MCTKI+$KMCTK_IDP;          '
'    dirx_i     equals            MCVX-$KMCVX_MCTKI+$KMCTK_DRX;          '
'    diry_i     equals            MCVX-$KMCVX_MCTKI+$KMCTK_DRY;          '
'    dirz_i     equals            MCVX-$KMCVX_MCTKI+$KMCTK_DRZ;          '
'    engy_i     equals            MCVX-$KMCVX_MCTKI+$KMCTK_ENE;          '
#.
#.  Outgoing track
'    id_out     float_equals      MCVX-$KMCVX_MCTK+$KMCTK_IDP;           '
'    dirx_o     equals            MCVX-$KMCVX_MCTK+$KMCTK_DRX;           '
'    diry_o     equals            MCVX-$KMCVX_MCTK+$KMCTK_DRY;           '
'    dirz_o     equals            MCVX-$KMCVX_MCTK+$KMCTK_DRZ;           '
'    engy_o     equals            MCVX-$KMCVX_MCTK+$KMCTK_ENE;           '
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.


*----------------------------------------------------------------------------
*---
*---    Antinu Ntuple Bank.
*---    Neutron "sink" MC Information.
*---
*----------------------------------------------------------------------------
*DO   NTPR  148  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' n148; '               #.   Ntuple name.
#.
#.   There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.
#.  Neutron monte carlo "sink" vertices.
#.
#.  Header
'    mc_num     float_equals      MC+$KMC_EVN;                           '
'    mc_jdy     float_equals      MC+$KMC_JDY;                           '
'    mc_ut1     float_equals      MC+$KMC_UT1;                           '
'    mc_ut2     float_equals      MC+$KMC_UT2;                           '
'    mc_time    single_equals     MCVX+$KMCVX_TIM;                       '
#.
#.  Tests
'    _class     float_equals      MCVX+$KMCVX_CLS: 2.9 4.1;              '
'    _id_in     float_equals      MCVX-$KMCVX_MCTKI+$KMCTK_IDP: $neutron;'
'    _ttt       unpack_interact   MCVX+$KMCVX_INC;                       '
'    _ppp       reserved;                                                '
'    _ccc       reserved;                                                '
'    _test1     eq                _ppp, 321. : 0.;                       '
#.
#.  MC
'    seed1      float_equals      MC+$KMC_SEED1;                         '
'    seed2      float_equals      MC+$KMC_SEED2;                         '
'    seedno     float_equals      MC+$KMC_SEED_NUM;                      '
'    mcver      float_equals      MC+$KMC_MCVER;                         '
'    nogerr     equals            MC+$KMC_NUM_GE_ERR;                    '
'    pmt_ef     equals            MC+$KMC_PMT_EFF;                       '
#.
#.  Vertex
'    class      float_equals      MCVX+$KMCVX_CLS;                       '
'    ttt        unpack_interact   MCVX+$KMCVX_INC;                       '
'    ppp        reserved;                                                '
'    ccc        reserved;                                                '
'    mc_x       equals            MCVX+$KMCVX_PSX;                       '
'    mc_y       equals            MCVX+$KMCVX_PSY;                       '
'    mc_z       equals            MCVX+$KMCVX_PSZ;                       '
'    mc_r       magnitude         MCVX+$KMCVX_PSX;                       '
'    region     float_equals      MCVX+$KMCVX_RGN;                       '
'    media      float_equals      MCVX+$KMCVX_IDM;                       '
#.
#.  Incoming track
'    id_in      float_equals      MCVX-$KMCVX_MCTKI+$KMCTK_IDP;          '
'    dirx_i     equals            MCVX-$KMCVX_MCTKI+$KMCTK_DRX;          '
'    diry_i     equals            MCVX-$KMCVX_MCTKI+$KMCTK_DRY;          '
'    dirz_i     equals            MCVX-$KMCVX_MCTKI+$KMCTK_DRZ;          '
'    engy_i     equals            MCVX-$KMCVX_MCTKI+$KMCTK_ENE;          '
#.
#.  Outgoing track
'    id_out     float_equals      MCVX-$KMCVX_MCTK+$KMCTK_IDP;           '
'    dirx_o     equals            MCVX-$KMCVX_MCTK+$KMCTK_DRX;           '
'    diry_o     equals            MCVX-$KMCVX_MCTK+$KMCTK_DRY;           '
'    dirz_o     equals            MCVX-$KMCVX_MCTK+$KMCTK_DRZ;           '
'    engy_o     equals            MCVX-$KMCVX_MCTK+$KMCTK_ENE;           '
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.


*----------------------------------------------------------------------------
*---
*---    Antinu Ntuple  Bank.
*---    Event Banks.
*---
*----------------------------------------------------------------------------
*DO   NTPR  149  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' n149; '             #.   Ntuple name.
#.
#.   There now come a series of field entries, one for each variable.
#.
#.   Variable     Function              Parameter(s)
#.    Name
#.
#.   Event bank information
#.
#. Header
'    mc_num       float_equals      MC+$KMC_EVN;                          '
'    ev_jdy       float_equals      EV+$KEV_JDY;                          '
'    ev_ut1       float_equals      EV+$KEV_UT1;                          '
'    ev_ut2       float_equals      EV+$KEV_UT2;                          '
'    ev_tid       float_equals      EV+$KEV_GTR_ID;                       '
#.
#. EV bank
'    snover       equals            MAST+$KMAST_SNOMAN_VER;               '
'    ev_run       float_equals      EV+$KEV_RUN;                          '
'    ev_num       float_equals      EV+$KEV_EVN;                          '
'    ds_lo        bits              EV+$KEV_DATA_SET,0,16;                '
'    ds_hi        bits              EV+$KEV_DATA_SET,16,16;               '
'    date         float_equals      EV+$KEV_DTE;                          '
'    time         float_equals      EV+$KEV_HMSC;                         '
'    nhits        float_equals      EV+$KEV_NPM;                          '
'    drxsun       dirsun            EV+$KEV_JDY;                          '
'    drysun       reserved;                                               '
'    drzsun       reserved;                                               '
#.
'    wasfit       equals            FTT+$KFTX_RETC;                       '
#.
#.  Grid fitter output
#.  ==================
'    xfg          equals            FTGV+$KFTXV_X;                        '
'    yfg          equals            FTGV+$KFTXV_Y;                        '
'    zfg          equals            FTGV+$KFTXV_Z;                        '
'    rfg          magnitude         FTGV+$KFTXV_X;                        '
'    thetfg       theta_phi         FTGT+$KFTXT_U;                        '
'    phifg        reserved;                                               '
'    tfg          equals            FTGV+$KFTXV_T;                        '
'    nfitg        float_equals      FTG+$KFTX_PMT_USED;                   '
'    like1        equals            FTG+$KFTG_M_LIKE;                     '
'    nfitg1       float_equals      FTG+$KFTX_PMT_AVAIL;                  '
'    xfg_e        equals            FTGV+$KFTXV_DX;                       '  
'    yfg_e        equals            FTGV+$KFTXV_DY;                       '  
'    zfg_e        equals            FTGV+$KFTXV_DZ;                       '  
'    tfg_e        equals            FTGV+$KFTXV_DT;                       '  
'    like2        equals            FTGT+7;                               '
'    nfitg2       float_equals      FTGT+8;                               '
#.
#.  RSP GRID 
#.  ======================= 
'    nwing        equals            FTGR+$KRSP_NWIN;                      ' 
'    eneg         equals            FTGR+$KRSP_ENE;                       ' 
'    rspnfg       equals            FTGR+$KRSP_NEFF;                      ' 
'    rspopg       equals            FTGR+$KRSP_OPTICAL_RESPONSE;          ' 
'    rspncg       equals            FTGR+$KRSP_NCOR;                      '
#.
#.  Path fitter output
#.  ==================
'    xfp          equals            FTPV+$KFTXV_X;                        '
'    yfp          equals            FTPV+$KFTXV_Y;                        '
'    zfp          equals            FTPV+$KFTXV_Z;                        '
'    rfp          magnitude         FTPV+$KFTXV_X;                        '
'    thetfp       theta_phi         FTPT+$KFTXT_U;                        '
'    phifp        reserved;                                               '
'    tfitp        equals            FTPV+$KFTXV_T;                        '
'    probp        equals            FTP+$KFTX_PROB;                       '
'    a2dprb       equals            FTP+$KFTP_KSPROB_ANG2D;               '
'    phiprb       equals            FTP+$KFTP_KSPROB_ANG_PHI;             '
#.
#.  RSP PATH 
#.  ======================= 
'    nwinp        equals            FTPR+$KRSP_NWIN;                      ' 
'    enep         equals            FTPR+$KRSP_ENE;                       ' 
'    rspnfp       equals            FTPR+$KRSP_NEFF;                      ' 
'    rspopp       equals            FTPR+$KRSP_OPTICAL_RESPONSE;          ' 
'    rspncp       equals            FTPR+$KRSP_NCOR;                      '
#.
#.  FTU output
#.  ======================
'    xfu          equals            FTUV+$KFTXV_X;                        '
'    yfu          equals            FTUV+$KFTXV_Y;                        '
'    zfu          equals            FTUV+$KFTXV_Z;                        '
'    thetfu       theta_phi         FTUT+$KFTXT_U;                        '
'    phifu        reserved;                                               '
'    tfitu        equals            FTUV+$KFTXV_T;                        '
#.
#.  RSP FTU
#.  ======================= 
'    nwinu        equals            FTUR+$KRSP_NWIN;                      ' 
'    eneu         equals            FTUR+$KRSP_ENE;                       ' 
'    rspnfu       equals            FTUR+$KRSP_NEFF;                      ' 
'    rspopu       equals            FTUR+$KRSP_OPTICAL_RESPONSE;          ' 
'    rspncu       equals            FTUR+$KRSP_NCOR;                      '
#.
#.  RSP COMMON 
#.  ======================= 
'    rspnwk       equals            FTUR+$KRSP_NWORKING;                  ' 
'    rspoln       equals            FTUR+$KRSP_NONLINE;                   ' 
'    rspncl       equals            FTUR+$KRSP_NCAL;                      ' 
'    rspdrf       equals            FTUR+$KRSP_DRIFT;                     ' 
'    rspnht       equals            FTUR+$KRSP_NHITS;                     ' 
'    rspalq       equals            FTUR+26;                              ' 
'    rspdqx       equals            FTUR+27;                              ' 
#.
#.  Classifier info for fitters
#.  =======================
'    ctsunp       equals            FTPC+$KFTXC_SOL_DIR_1;                '
'    tijp         equals            FTPC+$KFTXC_THETA_IJ_1;               '
'    itrp         equals            FTPC+$KFTXC_ITR_1 ;                   '
'    b1p          equals            FTPC+$KFTXC_LEG_1 ;                   '
'    b2p          equals            FTPC+$KFTXC_LEG_2 ;                   '
'    b3p          equals            FTPC+$KFTXC_LEG_3 ;                   '
'    b4p          equals            FTPC+$KFTXC_LEG_4 ;                   '
'    cfripp       equals            FTPC+$KFTXC_ANG_CORR_16 ;             '
'    ctsung       equals            FTGC+$KFTXC_SOL_DIR_1;                '
'    tijg         equals            FTGC+$KFTXC_THETA_IJ_1;               '
'    itrg         equals            FTGC+$KFTXC_ITR_1 ;                   '
'    b1g          equals            FTGC+$KFTXC_LEG_1 ;                   '
'    b2g          equals            FTGC+$KFTXC_LEG_2 ;                   '
'    b3g          equals            FTGC+$KFTXC_LEG_3 ;                   '
'    b4g          equals            FTGC+$KFTXC_LEG_4 ;                   '
'    cfripg       equals            FTGC+$KFTXC_ANG_CORR_16 ;             '
'    ctsunu       equals            FTUC+$KFTXC_SOL_DIR_1;                '
'    tiju         equals            FTUC+$KFTXC_THETA_IJ_1;               '
'    itru         equals            FTUC+$KFTXC_ITR_1 ;                   '
'    b1u          equals            FTUC+$KFTXC_LEG_1 ;                   '
'    b2u          equals            FTUC+$KFTXC_LEG_2 ;                   '
'    b3u          equals            FTUC+$KFTXC_LEG_3 ;                   '
'    b4u          equals            FTUC+$KFTXC_LEG_4 ;                   '
'    cfripu       equals            FTUC+$KFTXC_ANG_CORR_16 ;             '
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.
*-----------------------------------------------------------------------
*----------------------------------------------------------------------------
*---
*---    Standard Ntuple Bank.
*---
*---    Contact:  N. West,  Oxford.
*---
*---    A simple diagnostic of 10Mhz clock rebuilding.  See the TUPK bank.
*---
*----------------------------------------------------------------------------
*DO   NTPR  199  -i(35I 1F 3I -H)                    #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
1                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
1                       #.   Options: Bit 0: Call NTP_PACK_USER Bit 1: Collapse
' rmtc;   '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.
'    run           reserved;  ' #. Run number
'    sub_run       reserved;  ' #. Sub-run number
'    event         reserved;  ' #. Event number
'    old_10        reserved;  ' #. Old 10Mhz clock in hours since run start
'    new_10        reserved;  ' #. New (built) 10Mhz clock in hours since run start
'    cur_50        reserved;  ' #. Current 50 MHz clock in hours since run start
'    n_roll        reserved;  ' #. Number of rollovers detected
'    n_lock        reserved;  ' #. Rollover lock-out flag.
'    del_50        reserved;  ' #. Change in 50MHz clock since previous event.
#.
'  END_OF_NTUPLE; '     #.  This marks the end of the ntuple.
*----------------------------------------------------------------------------
*---
*---  Standard MCPROD Ntuple.
*---  The 37x series of ntuples replaces the 36x series which include FTA Analysis
*---
*---  Revision History.
*---  20:Dec:2006: Ver 1.0 : F. Zhang First Version. Based on 360. +FTA
*---
*----------------------------------------------------------------------------
*DO   NTPR  370  -i(35I 1F 3I -H)  -n5000                #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Call NTP_PACK_USER: =0 No, =1 Yes
' snontp; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.

#.
#.  General Event information
#.  =========================
'    ntpver       equals            1.0;                              '
'    mc_ver       equals            MAST+$KMAST_SNOMAN_VER;           '
'    ev_run       float_equals      EV+$KEV_RUN;                      '
'    ev_tid       float_equals      EV+$KEV_GTR_ID;                   '
'    ds_lo        bits              EV+$KEV_DATA_SET,0,16;            '
'    ds_hi        bits              EV+$KEV_DATA_SET,16,16;           '
'    date         float_equals      EV+$KEV_DTE;                      '
'    time         float_equals      EV+$KEV_HMSC;                     '
'    time_jdy     ntime             EV+$KEV_JDY;                      '
'    time_s       reserved                           ;                '
'    time_us      reserved                           ;                '
'    time_ns      reserved                           ;                '
'    ev_trglo     bits              EV+$KEV_TRG_TYPE,0,16;            '
'    ev_trghi     bits              EV+$KEV_TRG_TYPE,16,16;           '
'    nhits        float_equals      EV+$KEV_NPM;                      '
'    ncd_stat     float_equals      EV+$KEV_NCD_STATUS;               '
'    drxsun       dirsun            EV+$KEV_JDY;                      '
'    drysun       reserved;                                           '
'    drzsun       reserved;                                           '
'    adamn1       dmm_get_emask     0;                                '
'    adamn2       reserved;                                           '
'    rdamn1       reserved;                                           '
'    rdamn2       reserved;                                           '
'    adamn3       dmm_get_emask     -1;                               '
'    adamn4       reserved;                                           '
'    rdamn3       reserved;                                           '
'    rdamn4       reserved;                                           '
'    amb_peak     float_equals      EV+$KEV_PEAK;                     '
'    amb_int      float_equals      EV+$KEV_INT;                      '
'    nowl         nzbank            EV-$KEV_OWL;                      '
'    nbutt        nzbank            EV-$KEV_BUTT;                     '
'    nneck        nzbank            EV-$KEV_NECK;                     '
'    nfecd        nzbank            EV-$KEV_FECD;                     '
#.  Path Fitter Analysis
#.  ====================
'    xfp          equals            FTPV+$KFTXV_X;                    '
'    yfp          equals            FTPV+$KFTXV_Y;                    '
'    zfp          equals            FTPV+$KFTXV_Z;                    '
'    rfp          magnitude         FTPV+$KFTXV_X;                    '
'    thetafp      theta_phi         FTPT+$KFTXT_U;                    '
'    phifp        reserved;                                           '
'    tfitp        equals            FTPV+$KFTXV_T;                    '
'    a2dprb       equals            FTP+$KFTP_KSPROB_ANG2D;           '
'    phiprb       equals            FTP+$KFTP_KSPROB_ANG_PHI;         '
'    enerap       equals            FTPR+$KRSP_ENE;                   '
'    nwinrp       equals            FTPR+$KRSP_NWIN;                  '
'    rspncorp     equals            FTPR+$KRSP_NCOR;                  '
'    rsppiter     equals            FTPR+$KRSP_FOM;                   '
'    enerop       equals            FTPR+$KRSP_ALT_ENERGY;            '
'    enekp        equals            FTPK+$KFTXK_ENERGY;               '
'    enekump      equals            FTPK+$KFTXK_ENE_MERR;             '
'    enekupp      equals            FTPK+$KFTXK_ENE_PERR;             '
'    enekprp      equals            FTPK+$KFTXK_DIR_SCALE;            '
'    nwinkp       equals            FTPK+$KFTXK_NEFF;                 '
'    cstsunp      equals            FTPC+$KFTXC_SOL_DIR_1;            '
'    thetaijp     equals            FTPC+$KFTXC_THETA_IJ_1;           '
'    itrp         equals            FTPC+$KFTXC_ITR_1 ;               '
'    beta1p       equals            FTPC+$KFTXC_LEG_1 ;               '
'    beta4p       equals            FTPC+$KFTXC_LEG_4 ;               '
'    phiksap      equals            FTPC+$KFTXC_KSPHI_1;              '
'    phikspp      equals            FTPC+$KFTXC_KSPHI_2;              '
'    angksap      equals            FTPC+$KFTXC_KSANG_1;              '
'    angkspp      equals            FTPC+$KFTXC_KSANG_2;              '
'    qtijp        equals            FTPC+$KFTXC_QW_TIJ_1;             '
'    qpt_prbp     equals            FTPC+$KFTXC_QPDT_1;               '
'    qpt_mqp      equals            FTPC+$KFTXC_QPDT_2;               '
'    qpt_nwp      equals            FTPC+$KFTXC_QPDT_4;               '
'    timksp       equals            FTPC+$KFTXC_KSTIM_1;              '

#.  FTU Analysis
#.  ============
'    xfu          equals            FTUV+$KFTXV_X;                    '
'    yfu          equals            FTUV+$KFTXV_Y;                    '
'    zfu          equals            FTUV+$KFTXV_Z;                    '
'    rfu          magnitude         FTUV+$KFTXV_X;                    '
'    thetafu      theta_phi         FTUT+$KFTXT_U;                    '
'    phifu        reserved;                                           '
'    tfitu        equals            FTUV+$KFTXV_T;                    '
'    enerau       equals            FTUR+$KRSP_ENE;                   '
'    nwinru       equals            FTUR+$KRSP_NWIN;                  '
'    rspncoru     equals            FTUR+$KRSP_NCOR;                  '
'    rsppiteu     equals            FTUR+$KRSP_FOM;                   '
'    enerou       equals            FTUR+$KRSP_ALT_ENERGY;            '
'    eneku        equals            FTUK+$KFTXK_ENERGY;               '
'    enekumu      equals            FTUK+$KFTXK_ENE_MERR;             '
'    enekupu      equals            FTUK+$KFTXK_ENE_PERR;             '
'    enekpru      equals            FTUK+$KFTXK_DIR_SCALE;            '
'    nwinku       equals            FTUK+$KFTXK_NEFF;                 '
'    cstsunu      equals            FTUC+$KFTXC_SOL_DIR_1;            '
'    thetaiju     equals            FTUC+$KFTXC_THETA_IJ_1;           '
'    itru         equals            FTUC+$KFTXC_ITR_1 ;               '
'    beta1u       equals            FTUC+$KFTXC_LEG_1 ;               '
'    beta4u       equals            FTUC+$KFTXC_LEG_4 ;               '
'    phiksau      equals            FTUC+$KFTXC_KSPHI_1;              '
'    phikspu      equals            FTUC+$KFTXC_KSPHI_2;              '
'    angksau      equals            FTUC+$KFTXC_KSANG_1;              '
'    angkspu      equals            FTUC+$KFTXC_KSANG_2;              '
'    qtiju        equals            FTUC+$KFTXC_QW_TIJ_1;             '
'    qpt_prbu     equals            FTUC+$KFTXC_QPDT_1;               '
'    qpt_mqu      equals            FTUC+$KFTXC_QPDT_2;               '
'    qpt_nwu      equals            FTUC+$KFTXC_QPDT_4;               '
'    timksu       equals            FTUC+$KFTXC_KSTIM_1;              '

#.  Grid Fitter Analysis
#.  ====================
'    xfg          equals            FTGV+$KFTXV_X;                    '
'    yfg          equals            FTGV+$KFTXV_Y;                    '
'    zfg          equals            FTGV+$KFTXV_Z;                    '
'    rfg          magnitude         FTGV+$KFTXV_X;                    '
'    thetafg      theta_phi         FTGT+$KFTXT_U;                    '
'    phifg        reserved;                                           '
'    tfg          equals            FTGV+$KFTXV_T;                    '
'    like1        equals            FTG+$KFTG_M_LIKE;                 '
'    nfitg1       float_equals      FTG+$KFTX_PMT_AVAIL;              '
'    like2        equals            FTGT+7;                           '
'    nfitg2       float_equals      FTGT+8;                           '
'    enerag       equals            FTGR+$KRSP_ENE;                   '
'    nwinrg       equals            FTGR+$KRSP_NWIN;                  '
'    rspncorg     equals            FTGR+$KRSP_NCOR;                  '
'    rsppiteg     equals            FTGR+$KRSP_FOM;                   '
'    enerog       equals            FTGR+$KRSP_ALT_ENERGY;            '
'    enekg        equals            FTGK+$KFTXK_ENERGY;               '
'    enekumg      equals            FTGK+$KFTXK_ENE_MERR;             '
'    enekupg      equals            FTGK+$KFTXK_ENE_PERR;             '
'    enekprg      equals            FTGK+$KFTXK_DIR_SCALE;            '
'    nwinkg       equals            FTGK+$KFTXK_NEFF;                 '
'    cstsung      equals            FTGC+$KFTXC_SOL_DIR_1;            '
'    thetaijg     equals            FTGC+$KFTXC_THETA_IJ_1;           '
'    itrg         equals            FTGC+$KFTXC_ITR_1 ;               '
'    beta1g       equals            FTGC+$KFTXC_LEG_1 ;               '
'    beta4g       equals            FTGC+$KFTXC_LEG_4 ;               '
'    phiksag      equals            FTGC+$KFTXC_KSPHI_1;              '
'    phikspg      equals            FTGC+$KFTXC_KSPHI_2;              '
'    angksag      equals            FTGC+$KFTXC_KSANG_1;              '
'    angkspg      equals            FTGC+$KFTXC_KSANG_2;              '
'    qtijg        equals            FTGC+$KFTXC_QW_TIJ_1;             '
'    qpt_prbg     equals            FTGC+$KFTXC_QPDT_1;               '
'    qpt_mqg      equals            FTGC+$KFTXC_QPDT_2;               '
'    qpt_nwg      equals            FTGC+$KFTXC_QPDT_4;               '
'    timksg       equals            FTGC+$KFTXC_KSTIM_1;              '

#.  Common Independant Parameters
#.  ========================
'    rsp_nwk      equals            FTUR+$KRSP_NWORKING;              '
'    rsp_onln     equals            FTUR+$KRSP_NONLINE;               '
'    rsp_ncal     equals            FTUR+$KRSP_NCAL;                  '
'    rsp_drif     equals            FTUR+$KRSP_DRIFT;                 '
'    rsp_nhit     equals            FTUR+$KRSP_NHITS;                 '
'    rsp_allq     equals            FTUR+26;                          '
'    rsp_dqxx     equals            FTUR+27;                          '
'    qpt_nhit     equals            FTUC+$KFTXC_QPDT_3;               '

#. Basic Muon Analysis
#. ===================
'    xmu_in       equals            FTIV+$KFTXV_X;                    '
'    ymu_in       equals            FTIV+$KFTXV_Y;                    '
'    zmu_in       equals            FTIV+$KFTXV_Z;                    '
'    theta_mu     theta_phi         FTIT+$KFTXT_U;                    '
'    phi_mu       reserved;                                           '
'    mu_imp       equals            FTIP+$KFTXP_IMPACT;               '
'    mu_dedx      equals            FTIP+$KFTXP_DEDX_1;               '
'    mu_rich      equals            FTIP+$KFTXP_RICH_TRIM;            '
'    mu_citr      equals            FTIP+$KFTXP_MCITR;                '
'    mu_crms      equals            FTIP+$KFTXP_CONE_TRES_RMS;        '
#.  NCD Analysis
#.  ============
'    nes_q        float_equals      NES+$KNES_CHARGE;                 '
'    nes_str      float_equals      NES+$KNES_NCDSTRING;              '
'    nmux_str     float_equals      NEMS+$KNEMS_NCDSTRING;            '
'    ncdcor_q     float_equals      NECL+$KNECL_CHARGE;               '
'    ncdcor_t     equals            NECL+$KNECL_DTIME;                '
'    nes_en       equals            NES+$KNES_ENERGY;                 '
#.  Monte Carlo event information
#.  =============================
'    _vx_cls      float_equals      MCVX+$KMCVX_CLS: -1000000. 1.5;   '
'    revent       magnitude         MCVX+$KMCVX_PSX;                  '
'    xe           equals            MCVX+$KMCVX_PSX;                  '
'    ye           equals            MCVX+$KMCVX_PSY;                  '
'    ze           equals            MCVX+$KMCVX_PSZ;                  '
'    theta        theta_phi         MCVX-$KMCVX_MCTK+$KMCTK_DRX;      '
'    phi          reserved;                                           '
'    tgen         single_equals     MCVX+$KMCVX_TIM;                  '
'    egen         equals            MCVX-$KMCVX_MCTK+$KMCTK_ENE;      '
'    enu          equals            MCVX-$KMCVX_MCTKI+$KMCTK_ENE;     '
'    numcer       equals            EGS4+7, EGS4+8, EGS4+9;           '
'    int_ttt      unpack_interact   MCVX+$KMCVX_INC;                  '
'    int_ppp      reserved;                                           '
'    int_ccc      reserved;                                           '
'    neutron      neutron;                                            '
'    mc_n_ncd     n_on_ncd;                                           '
#.  MCPL Inforation
#.  ===============
'    _mctk_ps     get_link          mcvx-$KMCVX_MCTKI;                '
'    _mcvx_ps     get_link          _mctk_ps-+1;                      '
'    nu_ener      equals            _mctk_ps+$KMCTK_ENE;              '
'    nu_dirx      equals            _mctk_ps+$KMCTK_DRX;              '
'    nu_diry      equals            _mctk_ps+$KMCTK_DRY;              '
'    nu_dirz      equals            _mctk_ps+$KMCTK_DRZ;              '
'    nu_flav      equals            _mctk_ps+$KMCTK_IDP:veto -1. 36.; '
'    nu_intc      float_equals      _mcvx_ps+$KMCVX_INC;              '
'    nu_vtxx      equals            _mcvx_ps+$KMCVX_PSX;              '
'    nu_vtxy      equals            _mcvx_ps+$KMCVX_PSY;              '
'    nu_vtxz      equals            _mcvx_ps+$KMCVX_PSZ;              '
#.  FTA Analysis
#.
'    xfa          equals            FTAV+$KFTXV_X;                    '
'    yfa          equals            FTAV+$KFTXV_Y;                    '
'    zfa          equals            FTAV+$KFTXV_Z;                    '
'    rfa          magnitude         FTAV+$KFTXV_X;                    '
'    thetafa      theta_phi         FTAT+$KFTXT_U;                    '
'    phifa        reserved;                                           '
'    tfita        equals            FTAV+$KFTXV_T;                    '
'    eneraa       equals            FTAR+$KRSP_ENE;                   '
'    nwinra       equals            FTAR+$KRSP_NWIN;                  '
'    rspncora     equals            FTAR+$KRSP_NCOR;                  '
'    rsppitea     equals            FTAR+$KRSP_FOM;                   '
'    eneroa       equals            FTAR+$KRSP_ALT_ENERGY;            '
'    eneka        equals            FTAK+$KFTXK_ENERGY;               '
'    enekuma      equals            FTAK+$KFTXK_ENE_MERR;             '
'    enekupa      equals            FTAK+$KFTXK_ENE_PERR;             '
'    enekpra      equals            FTAK+$KFTXK_DIR_SCALE;            '
'    nwinka       equals            FTAK+$KFTXK_NEFF;                 '
'    cstsuna      equals            FTAC+$KFTXC_SOL_DIR_1;            '
'    thetaija     equals            FTAC+$KFTXC_THETA_IJ_1;           '
'    itra         equals            FTAC+$KFTXC_ITR_1 ;               '
'    beta1a       equals            FTAC+$KFTXC_LEG_1 ;               '
'    beta4a       equals            FTAC+$KFTXC_LEG_4 ;               '
'    phiksaa      equals            FTAC+$KFTXC_KSPHI_1;              '
'    phikspa      equals            FTAC+$KFTXC_KSPHI_2;              '
'    angksaa      equals            FTAC+$KFTXC_KSANG_1;              '
'    angkspa      equals            FTAC+$KFTXC_KSANG_2;              '
'    qtija        equals            FTAC+$KFTXC_QW_TIJ_1;             '
'    qpt_prba     equals            FTAC+$KFTXC_QPDT_1;               '
'    qpt_mqa      equals            FTAC+$KFTXC_QPDT_2;               '
'    qpt_nwa      equals            FTAC+$KFTXC_QPDT_4;               '
'    timksa       equals            FTAC+$KFTXC_KSTIM_1;              '
#.  FTN Analysis
#.
'    xfn          equals            FTNV+$KFTXV_X;                    '
'    yfn          equals            FTNV+$KFTXV_Y;                    '
'    zfn          equals            FTNV+$KFTXV_Z;                    '
'    rfn          magnitude         FTNV+$KFTXV_X;                    '
'    thetafn      theta_phi         FTNT+$KFTXT_U;                    '
'    phifn        reserved;                                           '
'    tfitn        equals            FTNV+$KFTXV_T;                    '
'    eneran       equals            FTNR+$KRSP_ENE;                   '
'    nwinrn       equals            FTNR+$KRSP_NWIN;                  '
'    rspncorn     equals            FTNR+$KRSP_NCOR;                  '
'    rsppiten     equals            FTNR+$KRSP_FOM;                   '
'    eneron       equals            FTNR+$KRSP_ALT_ENERGY;            '
'    enekn        equals            FTNK+$KFTXK_ENERGY;               '
'    enekumn      equals            FTNK+$KFTXK_ENE_MERR;             '
'    enekupn      equals            FTNK+$KFTXK_ENE_PERR;             '
'    enekprn      equals            FTNK+$KFTXK_DIR_SCALE;            '
'    nwinkn       equals            FTNK+$KFTXK_NEFF;                 '
'    cstsunn      equals            FTNC+$KFTXC_SOL_DIR_1;            '
'    thetaijn     equals            FTNC+$KFTXC_THETA_IJ_1;           '
'    itrn         equals            FTNC+$KFTXC_ITR_1 ;               '
'    beta1n       equals            FTNC+$KFTXC_LEG_1 ;               '
'    beta4n       equals            FTNC+$KFTXC_LEG_4 ;               '
'    phiksan      equals            FTNC+$KFTXC_KSPHI_1;              '
'    phikspn      equals            FTNC+$KFTXC_KSPHI_2;              '
'    angksan      equals            FTNC+$KFTXC_KSANG_1;              '
'    angkspn      equals            FTNC+$KFTXC_KSANG_2;              '
'    qtijn        equals            FTNC+$KFTXC_QW_TIJ_1;             '
'    qpt_prbn     equals            FTNC+$KFTXC_QPDT_1;               '
'    qpt_mqn      equals            FTNC+$KFTXC_QPDT_2;               '
'    qpt_nwn      equals            FTNC+$KFTXC_QPDT_4;               '
'    timksn       equals            FTNC+$KFTXC_KSTIM_1;              '
'  END_OF_NTUPLE; '    #.  This marks the end of the ntuple.
*----------------------------------------------------------------------------
*---
*---  Standard MCPROD Ntuple for the Monte Carlo Decay Electrons.
*---  Needs a different MC event selection than 360.
*---  As MC only some data parts are cut, and ntuple is restructured.
*---
*---  Revision History.
*---  30:Sep:2005: Ver 1.0 : N. McCauley First Version Based on 338.
*---  27:Jul:2006: Ver 1.1 : Brought up to date with 360.
*---  02:Feb:2007: Ver 2.0 : F. Zhang Add FTN/FTA stuffs, updates with 370.
*----------------------------------------------------------------------------
*DO   NTPR  378  -i(35I 1F 3I -H)   -n5000                #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Call NTP_PACK_USER: =0 No, =1 Yes
' snontp; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.

#.
#.  General Event information
#.  =========================
'    ntpver       equals            1.0;                              '
'    mc_ver       equals            MAST+$KMAST_SNOMAN_VER;           '
'    ev_run       float_equals      EV+$KEV_RUN;                      '
'    ev_tid       float_equals      EV+$KEV_GTR_ID;                   '
'    ds_lo        bits              EV+$KEV_DATA_SET,0,16;            '
'    ds_hi        bits              EV+$KEV_DATA_SET,16,16;           '
'    date         float_equals      EV+$KEV_DTE;                      '
'    time         float_equals      EV+$KEV_HMSC;                     '
'    time_jdy     ntime             EV+$KEV_JDY;                      '
'    time_s       reserved                           ;                '
'    time_us      reserved                           ;                '
'    time_ns      reserved                           ;                '
'    nhits        float_equals      EV+$KEV_NPM;                      '
'    drxsun       dirsun            EV+$KEV_JDY;                      '
'    drysun       reserved;                                           '
'    drzsun       reserved;                                           '
#.  Path Fitter Analysis
#.  ====================
'    xfp          equals            FTPV+$KFTXV_X;                    '
'    yfp          equals            FTPV+$KFTXV_Y;                    '
'    zfp          equals            FTPV+$KFTXV_Z;                    '
'    rfp          magnitude         FTPV+$KFTXV_X;                    '
'    thetafp      theta_phi         FTPT+$KFTXT_U;                    '
'    phifp        reserved;                                           '
'    tfitp        equals            FTPV+$KFTXV_T;                    '
'    a2dprb       equals            FTP+$KFTP_KSPROB_ANG2D;           '
'    phiprb       equals            FTP+$KFTP_KSPROB_ANG_PHI;         '
'    enerap       equals            FTPR+$KRSP_ENE;                   '
'    nwinrp       equals            FTPR+$KRSP_NWIN;                  '
'    rspncorp     equals            FTPR+$KRSP_NCOR;                  ' 
'    rsppiter     equals            FTPR+$KRSP_FOM;                   '
'    enerop       equals            FTPR+$KRSP_ALT_ENERGY;            '
'    enekp        equals            FTPK+$KFTXK_ENERGY;               '
'    enekump      equals            FTPK+$KFTXK_ENE_MERR;             '
'    enekupp      equals            FTPK+$KFTXK_ENE_PERR;             '
'    enekprp      equals            FTPK+$KFTXK_DIR_SCALE;            '
'    nwinkp       equals            FTPK+$KFTXK_NEFF;                 '
'    cstsunp      equals            FTPC+$KFTXC_SOL_DIR_1;            '
'    thetaijp     equals            FTPC+$KFTXC_THETA_IJ_1;           '
'    itrp         equals            FTPC+$KFTXC_ITR_1 ;               '
'    beta1p       equals            FTPC+$KFTXC_LEG_1 ;               '
'    beta4p       equals            FTPC+$KFTXC_LEG_4 ;               '
'    phiksap      equals            FTPC+$KFTXC_KSPHI_1;              '
'    phikspp      equals            FTPC+$KFTXC_KSPHI_2;              '
'    angksap      equals            FTPC+$KFTXC_KSANG_1;              '
'    angkspp      equals            FTPC+$KFTXC_KSANG_2;              '
'    qtijp        equals            FTPC+$KFTXC_QW_TIJ_1;             '
'    qpt_prbp     equals            FTPC+$KFTXC_QPDT_1;               '
'    qpt_mqp      equals            FTPC+$KFTXC_QPDT_2;               '
'    qpt_nwp      equals            FTPC+$KFTXC_QPDT_4;               '
'    timksp       equals            FTPC+$KFTXC_KSTIM_1;              '
#.  FTU Analysis
#.  ============
'    xfu          equals            FTUV+$KFTXV_X;                    '
'    yfu          equals            FTUV+$KFTXV_Y;                    '
'    zfu          equals            FTUV+$KFTXV_Z;                    '
'    rfu          magnitude         FTUV+$KFTXV_X;                    '
'    thetafu      theta_phi         FTUT+$KFTXT_U;                    '
'    phifu        reserved;                                           '
'    tfitu        equals            FTUV+$KFTXV_T;                    '
'    enerau       equals            FTUR+$KRSP_ENE;                   '
'    nwinru       equals            FTUR+$KRSP_NWIN;                  '
'    rspncoru     equals            FTUR+$KRSP_NCOR;                  ' 
'    rsppiteu     equals            FTUR+$KRSP_FOM;                   '
'    enerou       equals            FTUR+$KRSP_ALT_ENERGY;            '
'    eneku        equals            FTUK+$KFTXK_ENERGY;               '
'    enekumu      equals            FTUK+$KFTXK_ENE_MERR;             '
'    enekupu      equals            FTUK+$KFTXK_ENE_PERR;             '
'    enekpru      equals            FTUK+$KFTXK_DIR_SCALE;            '
'    nwinku       equals            FTUK+$KFTXK_NEFF;                 '
'    cstsunu      equals            FTUC+$KFTXC_SOL_DIR_1;            '
'    thetaiju     equals            FTUC+$KFTXC_THETA_IJ_1;           '
'    itru         equals            FTUC+$KFTXC_ITR_1 ;               '
'    beta1u       equals            FTUC+$KFTXC_LEG_1 ;               '
'    beta4u       equals            FTUC+$KFTXC_LEG_4 ;               '
'    phiksau      equals            FTUC+$KFTXC_KSPHI_1;              '
'    phikspu      equals            FTUC+$KFTXC_KSPHI_2;              '
'    angksau      equals            FTUC+$KFTXC_KSANG_1;              '
'    angkspu      equals            FTUC+$KFTXC_KSANG_2;              '
'    qtiju        equals            FTUC+$KFTXC_QW_TIJ_1;             '
'    qpt_prbu     equals            FTUC+$KFTXC_QPDT_1;               '
'    qpt_mqu      equals            FTUC+$KFTXC_QPDT_2;               '
'    qpt_nwu      equals            FTUC+$KFTXC_QPDT_4;               '
'    timksu       equals            FTUC+$KFTXC_KSTIM_1;              '

#.  Grid Fitter Analysis
#.  ====================
'    xfg          equals            FTGV+$KFTXV_X;                    '
'    yfg          equals            FTGV+$KFTXV_Y;                    '
'    zfg          equals            FTGV+$KFTXV_Z;                    '
'    rfg          magnitude         FTGV+$KFTXV_X;                    '
'    thetafg      theta_phi         FTGT+$KFTXT_U;                    '
'    phifg        reserved;                                           '
'    tfg          equals            FTGV+$KFTXV_T;                    '
'    like1        equals            FTG+$KFTG_M_LIKE;                 '
'    nfitg1       float_equals      FTG+$KFTX_PMT_AVAIL;              '
'    like2        equals            FTGT+7;                           '
'    nfitg2       float_equals      FTGT+8;                           '
'    enerag       equals            FTGR+$KRSP_ENE;                   '
'    nwinrg       equals            FTGR+$KRSP_NWIN;                  '
'    rspncorg     equals            FTGR+$KRSP_NCOR;                  ' 
'    rsppiteg     equals            FTGR+$KRSP_FOM;                   '
'    enerog       equals            FTGR+$KRSP_ALT_ENERGY;            '
'    enekg        equals            FTGK+$KFTXK_ENERGY;               '
'    enekumg      equals            FTGK+$KFTXK_ENE_MERR;             '
'    enekupg      equals            FTGK+$KFTXK_ENE_PERR;             '
'    enekprg      equals            FTGK+$KFTXK_DIR_SCALE;            '
'    nwinkg       equals            FTGK+$KFTXK_NEFF;                 '
'    cstsung      equals            FTGC+$KFTXC_SOL_DIR_1;            '
'    thetaijg     equals            FTGC+$KFTXC_THETA_IJ_1;           '
'    itrg         equals            FTGC+$KFTXC_ITR_1 ;               '
'    beta1g       equals            FTGC+$KFTXC_LEG_1 ;               '
'    beta4g       equals            FTGC+$KFTXC_LEG_4 ;               '
'    phiksag      equals            FTGC+$KFTXC_KSPHI_1;              '
'    phikspg      equals            FTGC+$KFTXC_KSPHI_2;              '
'    angksag      equals            FTGC+$KFTXC_KSANG_1;              '
'    angkspg      equals            FTGC+$KFTXC_KSANG_2;              '
'    qtijg        equals            FTGC+$KFTXC_QW_TIJ_1;             '
'    qpt_prbg     equals            FTGC+$KFTXC_QPDT_1;               '
'    qpt_mqg      equals            FTGC+$KFTXC_QPDT_2;               '
'    qpt_nwg      equals            FTGC+$KFTXC_QPDT_4;               '
'    timksg       equals            FTGC+$KFTXC_KSTIM_1;              '
#.  Common Parameters
#.  ========================
'    rsp_nwk      equals            FTUR+$KRSP_NWORKING;              '
'    rsp_onln     equals            FTUR+$KRSP_NONLINE;               '
'    rsp_ncal     equals            FTUR+$KRSP_NCAL;                  '
'    rsp_drif     equals            FTUR+$KRSP_DRIFT;                 '
'    rsp_nhit     equals            FTUR+$KRSP_NHITS;                 '
'    rsp_allq     equals            FTUR+26;                          '
'    rsp_dqxx     equals            FTUR+27;                          '
'    qpt_nhit     equals            FTUC+$KFTXC_QPDT_3;               '
#.  Monte Carlo event information
#.  We select our source vertex diferently looking for muon stops or decay.
#.  =======================
'    int_ttt      unpack_interact   MCVX+$KMCVX_INC;                  '
'    int_ppp      reserved;                                           '
'    int_ccc      reserved;                                           '
'    _is_mude     equals            int_ppp:344.5 347.5;              '
'    revent       magnitude         MCVX+$KMCVX_PSX;                  '
'    xe           equals            MCVX+$KMCVX_PSX;                  '
'    ye           equals            MCVX+$KMCVX_PSY;                  '
'    ze           equals            MCVX+$KMCVX_PSZ;                  '
'    theta        theta_phi         MCVX-$KMCVX_MCTK+$KMCTK_DRX;      '
'    phi          reserved;                                           '
'    tgen         single_equals     MCVX+$KMCVX_TIM;                  '
'    egen         equals            MCVX-$KMCVX_MCTK+$KMCTK_ENE;      '
'    numcer       equals            EGS4+7, EGS4+8, EGS4+9;           '
#.  FTA Analysis
#.
'    xfa          equals            FTAV+$KFTXV_X;                    '
'    yfa          equals            FTAV+$KFTXV_Y;                    '
'    zfa          equals            FTAV+$KFTXV_Z;                    '
'    rfa          magnitude         FTAV+$KFTXV_X;                    '
'    thetafa      theta_phi         FTAT+$KFTXT_U;                    '
'    phifa        reserved;                                           '
'    tfita        equals            FTAV+$KFTXV_T;                    '
'    eneraa       equals            FTAR+$KRSP_ENE;                   '
'    nwinra       equals            FTAR+$KRSP_NWIN;                  '
'    rspncora     equals            FTAR+$KRSP_NCOR;                  '
'    rsppitea     equals            FTAR+$KRSP_FOM;                   '
'    eneroa       equals            FTAR+$KRSP_ALT_ENERGY;            '
'    eneka        equals            FTAK+$KFTXK_ENERGY;               '
'    enekuma      equals            FTAK+$KFTXK_ENE_MERR;             '
'    enekupa      equals            FTAK+$KFTXK_ENE_PERR;             '
'    enekpra      equals            FTAK+$KFTXK_DIR_SCALE;            '
'    nwinka       equals            FTAK+$KFTXK_NEFF;                 '
'    cstsuna      equals            FTAC+$KFTXC_SOL_DIR_1;            '
'    thetaija     equals            FTAC+$KFTXC_THETA_IJ_1;           '
'    itra         equals            FTAC+$KFTXC_ITR_1 ;               '
'    beta1a       equals            FTAC+$KFTXC_LEG_1 ;               '
'    beta4a       equals            FTAC+$KFTXC_LEG_4 ;               '
'    phiksaa      equals            FTAC+$KFTXC_KSPHI_1;              '
'    phikspa      equals            FTAC+$KFTXC_KSPHI_2;              '
'    angksaa      equals            FTAC+$KFTXC_KSANG_1;              '
'    angkspa      equals            FTAC+$KFTXC_KSANG_2;              '
'    qtija        equals            FTAC+$KFTXC_QW_TIJ_1;             '
'    qpt_prba     equals            FTAC+$KFTXC_QPDT_1;               '
'    qpt_mqa      equals            FTAC+$KFTXC_QPDT_2;               '
'    qpt_nwa      equals            FTAC+$KFTXC_QPDT_4;               '
'    timksa       equals            FTAC+$KFTXC_KSTIM_1;              '
#.  FTN Analysis
#.
'    xfn          equals            FTNV+$KFTXV_X;                    '
'    yfn          equals            FTNV+$KFTXV_Y;                    '
'    zfn          equals            FTNV+$KFTXV_Z;                    '
'    rfn          magnitude         FTNV+$KFTXV_X;                    '
'    thetafn      theta_phi         FTNT+$KFTXT_U;                    '
'    phifn        reserved;                                           '
'    tfitn        equals            FTNV+$KFTXV_T;                    '
'    eneran       equals            FTNR+$KRSP_ENE;                   '
'    nwinrn       equals            FTNR+$KRSP_NWIN;                  '
'    rspncorn     equals            FTNR+$KRSP_NCOR;                  '
'    rsppiten     equals            FTNR+$KRSP_FOM;                   '
'    eneron       equals            FTNR+$KRSP_ALT_ENERGY;            '
'    enekn        equals            FTNK+$KFTXK_ENERGY;               '
'    enekumn      equals            FTNK+$KFTXK_ENE_MERR;             '
'    enekupn      equals            FTNK+$KFTXK_ENE_PERR;             '
'    enekprn      equals            FTNK+$KFTXK_DIR_SCALE;            '
'    nwinkn       equals            FTNK+$KFTXK_NEFF;                 '
'    cstsunn      equals            FTNC+$KFTXC_SOL_DIR_1;            '
'    thetaijn     equals            FTNC+$KFTXC_THETA_IJ_1;           '
'    itrn         equals            FTNC+$KFTXC_ITR_1 ;               '
'    beta1n       equals            FTNC+$KFTXC_LEG_1 ;               '
'    beta4n       equals            FTNC+$KFTXC_LEG_4 ;               '
'    phiksan      equals            FTNC+$KFTXC_KSPHI_1;              '
'    phikspn      equals            FTNC+$KFTXC_KSPHI_2;              '
'    angksan      equals            FTNC+$KFTXC_KSANG_1;              '
'    angkspn      equals            FTNC+$KFTXC_KSANG_2;              '
'    qtijn        equals            FTNC+$KFTXC_QW_TIJ_1;             '
'    qpt_prbn     equals            FTNC+$KFTXC_QPDT_1;               '
'    qpt_mqn      equals            FTNC+$KFTXC_QPDT_2;               '
'    qpt_nwn      equals            FTNC+$KFTXC_QPDT_4;               '
'    timksn       equals            FTNC+$KFTXC_KSTIM_1;              '
'  END_OF_NTUPLE; '    #.  This marks the end of the ntuple.
#.
#.
*----------------------------------------------------------------------------
*---
*---  Standard MCPROD Ntuple for simulated Leslie events.
*---  Revision History.
*---  30:Sep:2005: Ver 1.0 : N. McCauley : First Version. Based on 339.
*---  19:Jul:2006: Ver 1.1 : W. Heintzelman : Add new parameters developed
*---                                          for LETA
*---  02:Feb:2007: Ver 2.0 : F. Zhang Add FTN/FTA stuffs, updates with 370.
*----------------------------------------------------------------------------
*DO   NTPR  379  -i(35I 1F 3I -H)  -n5000                #.   NTuPl Request
#.
#.       Standard Database Header
#.
19750101        0 20380517 03331900  #.  1..4   Intrinsic validity
       0        0        0           #.  5..7   Data type, Task type, Format no.
       0        0        0           #.  8..10  Creation Date, Time, Source Id.
19750101        0 20380517 03331900  #. 11..14  Effective validity
       0        0                    #. 15..16  Entry Date Time
4*0                                  #. 17..20  Spare
10*0                                 #. 21..30  Temporary data (not in database)
#.
#.    End of Standard Database Header
#.
#.
#.      User Data.
#.
3*0                     #.   3 Reserved words (don't touch!).
0                       #.   Enable flag: =0 Disable, =1 Enable.
5000                    #.   Primary allocation (not critical).
-999999.                #.   "Undefined" value.
0                       #.   Discard partial entry: =0 No, =1 Yes.
1                       #.   Scan D/S: =0 No, =1 Yes.
0                       #.   Call NTP_PACK_USER: =0 No, =1 Yes
' snontp; '             #.   Ntuple name.
#.
#.      There now come a series of field entries, one for each variable.
#.
#.   Variable     Function          Parameter(s)
#.    Name
#.

#.
#.  General Event information
#.  =========================
'    ntpver       equals            1.0;                              '
'    mc_ver	  equals            MAST+$KMAST_SNOMAN_VER;           '
'    pmteff       equals            MC+$KMC_PMT_EFF;                  '
'    ev_run       float_equals      EV+$KEV_RUN;                      '
'    ev_tid       float_equals      EV+$KEV_GTR_ID;                   '
'    ds_lo        bits              EV+$KEV_DATA_SET,0,16;            '
'    ds_hi        bits              EV+$KEV_DATA_SET,16,16;           '
'    date         float_equals      EV+$KEV_DTE;                      '
'    time         float_equals      EV+$KEV_HMSC;                     '
'    time_jdy     ntime             EV+$KEV_JDY;                      '
'    time_s       reserved                           ;                '
'    time_us      reserved                           ;                '
'    time_ns      reserved                           ;                '
'    nhits        float_equals      EV+$KEV_NPM;                      '
'    drxsun       dirsun            EV+$KEV_JDY;                      '
'    drysun       reserved;                                           '
'    drzsun       reserved;                                           '
#.  Path Fitter Analysis
#.  ====================
'    xfp          equals            FTPV+$KFTXV_X;                    '
'    yfp          equals            FTPV+$KFTXV_Y;                    '
'    zfp          equals            FTPV+$KFTXV_Z;                    '
'    rfp          magnitude         FTPV+$KFTXV_X;                    '
'    thetafp      theta_phi         FTPT+$KFTXT_U;                    '
'    phifp        reserved;                                           '
'    tfitp        equals            FTPV+$KFTXV_T;                    '
'    a2dprb       equals            FTP+$KFTP_KSPROB_ANG2D;           '
'    phiprb       equals            FTP+$KFTP_KSPROB_ANG_PHI;         '
'    enerap       equals            FTPR+$KRSP_ENE;                   '
'    nwinrp       equals            FTPR+$KRSP_NWIN;                  '
'    rspncorp     equals            FTPR+$KRSP_NCOR;                  ' 
'    rsppiter     equals            FTPR+$KRSP_FOM;                   '
'    enerop       equals            FTPR+$KRSP_ALT_ENERGY;            '
'    enekp        equals            FTPK+$KFTXK_ENERGY;               '
'    enekump      equals            FTPK+$KFTXK_ENE_MERR;             '
'    enekupp      equals            FTPK+$KFTXK_ENE_PERR;             '
'    enekprp      equals            FTPK+$KFTXK_DIR_SCALE;            '
'    nwinkp       equals            FTPK+$KFTXK_NEFF;                 '
'    cstsunp      equals            FTPC+$KFTXC_SOL_DIR_1;            '
'    thetaijp     equals            FTPC+$KFTXC_THETA_IJ_1;           '
'    itrp         equals            FTPC+$KFTXC_ITR_1 ;               '
'    beta1p       equals            FTPC+$KFTXC_LEG_1 ;               '
'    beta4p       equals            FTPC+$KFTXC_LEG_4 ;               '
'    phiksap      equals            FTPC+$KFTXC_KSPHI_1;              '
'    phikspp      equals            FTPC+$KFTXC_KSPHI_2;              '
'    angksap      equals            FTPC+$KFTXC_KSANG_1;              '
'    angkspp      equals            FTPC+$KFTXC_KSANG_2;              '
'    qtijp        equals            FTPC+$KFTXC_QW_TIJ_1;             '
'    qpt_prbp     equals            FTPC+$KFTXC_QPDT_1;               '
'    qpt_mqp      equals            FTPC+$KFTXC_QPDT_2;               '
'    qpt_nwp      equals            FTPC+$KFTXC_QPDT_4;               '
'    timksp       equals            FTPC+$KFTXC_KSTIM_1;              '
#.  FTU Analysis
#.  ============
'    xfu          equals            FTUV+$KFTXV_X;                    '
'    yfu          equals            FTUV+$KFTXV_Y;                    '
'    zfu          equals            FTUV+$KFTXV_Z;                    '
'    rfu          magnitude         FTUV+$KFTXV_X;                    '
'    thetafu      theta_phi         FTUT+$KFTXT_U;                    '
'    phifu        reserved;                                           '
'    tfitu        equals            FTUV+$KFTXV_T;                    '
'    enerau       equals            FTUR+$KRSP_ENE;                   '
'    nwinru       equals            FTUR+$KRSP_NWIN;                  '
'    rspncoru     equals            FTUR+$KRSP_NCOR;                  ' 
'    rsppiteu     equals            FTUR+$KRSP_FOM;                   '
'    enerou       equals            FTUR+$KRSP_ALT_ENERGY;            '
'    eneku        equals            FTUK+$KFTXK_ENERGY;               '
'    enekumu      equals            FTUK+$KFTXK_ENE_MERR;             '
'    enekupu      equals            FTUK+$KFTXK_ENE_PERR;             '
'    enekpru      equals            FTUK+$KFTXK_DIR_SCALE;            '
'    nwinku       equals            FTUK+$KFTXK_NEFF;                 '
'    cstsunu      equals            FTUC+$KFTXC_SOL_DIR_1;            '
'    thetaiju     equals            FTUC+$KFTXC_THETA_IJ_1;           '
'    itru         equals            FTUC+$KFTXC_ITR_1 ;               '
'    beta1u       equals            FTUC+$KFTXC_LEG_1 ;               '
'    beta4u       equals            FTUC+$KFTXC_LEG_4 ;               '
'    phiksau      equals            FTUC+$KFTXC_KSPHI_1;              '
'    phikspu      equals            FTUC+$KFTXC_KSPHI_2;              '
'    angksau      equals            FTUC+$KFTXC_KSANG_1;              '
'    angkspu      equals            FTUC+$KFTXC_KSANG_2;              '
'    qtiju        equals            FTUC+$KFTXC_QW_TIJ_1;             '
'    qpt_prbu     equals            FTUC+$KFTXC_QPDT_1;               '
'    qpt_mqu      equals            FTUC+$KFTXC_QPDT_2;               '
'    qpt_nwu      equals            FTUC+$KFTXC_QPDT_4;               '
'    timksu       equals            FTUC+$KFTXC_KSTIM_1;              '
#.  Grid Fitter Analysis
#.  ====================
'    xfg          equals            FTGV+$KFTXV_X;                    '
'    yfg          equals            FTGV+$KFTXV_Y;                    '
'    zfg          equals            FTGV+$KFTXV_Z;                    '
'    rfg          magnitude         FTGV+$KFTXV_X;                    '
'    thetafg      theta_phi         FTGT+$KFTXT_U;                    '
'    phifg        reserved;                                           '
'    tfg          equals            FTGV+$KFTXV_T;                    '
'    like1        equals            FTG+$KFTG_M_LIKE;                 '
'    nfitg1       float_equals      FTG+$KFTX_PMT_AVAIL;              '
'    like2        equals            FTGT+7;                           '
'    nfitg2       float_equals      FTGT+8;                           '
'    enerag       equals            FTGR+$KRSP_ENE;                   '
'    nwinrg       equals            FTGR+$KRSP_NWIN;                  '
'    rspncorg     equals            FTGR+$KRSP_NCOR;                  ' 
'    rsppiteg     equals            FTGR+$KRSP_FOM;                   '
'    enerog       equals            FTGR+$KRSP_ALT_ENERGY;            '
'    enekg        equals            FTGK+$KFTXK_ENERGY;               '
'    enekumg      equals            FTGK+$KFTXK_ENE_MERR;             '
'    enekupg      equals            FTGK+$KFTXK_ENE_PERR;             '
'    enekprg      equals            FTGK+$KFTXK_DIR_SCALE;            '
'    nwinkg       equals            FTGK+$KFTXK_NEFF;                 '
'    cstsung      equals            FTGC+$KFTXC_SOL_DIR_1;            '
'    thetaijg     equals            FTGC+$KFTXC_THETA_IJ_1;           '
'    itrg         equals            FTGC+$KFTXC_ITR_1 ;               '
'    beta1g       equals            FTGC+$KFTXC_LEG_1 ;               '
'    beta4g       equals            FTGC+$KFTXC_LEG_4 ;               '
'    phiksag      equals            FTGC+$KFTXC_KSPHI_1;              '
'    phikspg      equals            FTGC+$KFTXC_KSPHI_2;              '
'    angksag      equals            FTGC+$KFTXC_KSANG_1;              '
'    angkspg      equals            FTGC+$KFTXC_KSANG_2;              '
'    qtijg        equals            FTGC+$KFTXC_QW_TIJ_1;             '
'    qpt_prbg     equals            FTGC+$KFTXC_QPDT_1;               '
'    qpt_mqg      equals            FTGC+$KFTXC_QPDT_2;               '
'    qpt_nwg      equals            FTGC+$KFTXC_QPDT_4;               '
'    timksg       equals            FTGC+$KFTXC_KSTIM_1;              '
#.  Common Energy Parameters
#.  ========================
'    rsp_nwk      equals            FTUR+$KRSP_NWORKING;              '
'    rsp_onln     equals            FTUR+$KRSP_NONLINE;               '
'    rsp_ncal     equals            FTUR+$KRSP_NCAL;                  '
'    rsp_drif     equals            FTUR+$KRSP_DRIFT;                 '
'    rsp_nhit     equals            FTUR+$KRSP_NHITS;                 '
'    rsp_allq     equals            FTUR+26;                          '
'    rsp_dqxx     equals            FTUR+27;                          '
'    qpt_nhit     equals            FTUC+$KFTXC_QPDT_3;               '
#. Cuts for first Leslie events photon.
#. ====================================
'    _vx_cls      float_equals      MCVX+$KMCVX_CLS:     1   1  ;     '
'    int_ttt      unpack_interact   MCVX+$KMCVX_INC;                  '
'    int_ppp      reserved:                              199 199;     '
'    int_ccc      reserved;                                           '
#.  Monte Carlo event information
#.  =======================
'    revent       magnitude         MCVX+$KMCVX_PSX;                  '
'    xe           equals            MCVX+$KMCVX_PSX;                  '
'    ye           equals            MCVX+$KMCVX_PSY;                  '
'    ze           equals            MCVX+$KMCVX_PSZ;                  '
'    tgen         single_equals     MCVX+$KMCVX_TIM;                  '
'    egen         equals            MCVX-$KMCVX_MCTK+$KMCTK_ENE;      '
'    nphot        float_equals      MCGN+$KMCGN_NUM;                  '
'    tim_exp      equals            MCGN+$KMCGN_GENTIM_EXPPAR;        '
#.  FTA Analysis
#.
'    xfa          equals            FTAV+$KFTXV_X;                    '
'    yfa          equals            FTAV+$KFTXV_Y;                    '
'    zfa          equals            FTAV+$KFTXV_Z;                    '
'    rfa          magnitude         FTAV+$KFTXV_X;                    '
'    thetafa      theta_phi         FTAT+$KFTXT_U;                    '
'    phifa        reserved;                                           '
'    tfita        equals            FTAV+$KFTXV_T;                    '
'    eneraa       equals            FTAR+$KRSP_ENE;                   '
'    nwinra       equals            FTAR+$KRSP_NWIN;                  '
'    rspncora     equals            FTAR+$KRSP_NCOR;                  '
'    rsppitea     equals            FTAR+$KRSP_FOM;                   '
'    eneroa       equals            FTAR+$KRSP_ALT_ENERGY;            '
'    eneka        equals            FTAK+$KFTXK_ENERGY;               '
'    enekuma      equals            FTAK+$KFTXK_ENE_MERR;             '
'    enekupa      equals            FTAK+$KFTXK_ENE_PERR;             '
'    enekpra      equals            FTAK+$KFTXK_DIR_SCALE;            '
'    nwinka       equals            FTAK+$KFTXK_NEFF;                 '
'    cstsuna      equals            FTAC+$KFTXC_SOL_DIR_1;            '
'    thetaija     equals            FTAC+$KFTXC_THETA_IJ_1;           '
'    itra         equals            FTAC+$KFTXC_ITR_1 ;               '
'    beta1a       equals            FTAC+$KFTXC_LEG_1 ;               '
'    beta4a       equals            FTAC+$KFTXC_LEG_4 ;               '
'    phiksaa      equals            FTAC+$KFTXC_KSPHI_1;              '
'    phikspa      equals            FTAC+$KFTXC_KSPHI_2;              '
'    angksaa      equals            FTAC+$KFTXC_KSANG_1;              '
'    angkspa      equals            FTAC+$KFTXC_KSANG_2;              '
'    qtija        equals            FTAC+$KFTXC_QW_TIJ_1;             '
'    qpt_prba     equals            FTAC+$KFTXC_QPDT_1;               '
'    qpt_mqa      equals            FTAC+$KFTXC_QPDT_2;               '
'    qpt_nwa      equals            FTAC+$KFTXC_QPDT_4;               '
'    timksa       equals            FTAC+$KFTXC_KSTIM_1;              '
#.  FTN Analysis
#.
'    xfn          equals            FTNV+$KFTXV_X;                    '
'    yfn          equals            FTNV+$KFTXV_Y;                    '
'    zfn          equals            FTNV+$KFTXV_Z;                    '
'    rfn          magnitude         FTNV+$KFTXV_X;                    '
'    thetafn      theta_phi         FTNT+$KFTXT_U;                    '
'    phifn        reserved;                                           '
'    tfitn        equals            FTNV+$KFTXV_T;                    '
'    eneran       equals            FTNR+$KRSP_ENE;                   '
'    nwinrn       equals            FTNR+$KRSP_NWIN;                  '
'    rspncorn     equals            FTNR+$KRSP_NCOR;                  '
'    rsppiten     equals            FTNR+$KRSP_FOM;                   '
'    eneron       equals            FTNR+$KRSP_ALT_ENERGY;            '
'    enekn        equals            FTNK+$KFTXK_ENERGY;               '
'    enekumn      equals            FTNK+$KFTXK_ENE_MERR;             '
'    enekupn      equals            FTNK+$KFTXK_ENE_PERR;             '
'    enekprn      equals            FTNK+$KFTXK_DIR_SCALE;            '
'    nwinkn       equals            FTNK+$KFTXK_NEFF;                 '
'    cstsunn      equals            FTNC+$KFTXC_SOL_DIR_1;            '
'    thetaijn     equals            FTNC+$KFTXC_THETA_IJ_1;           '
'    itrn         equals            FTNC+$KFTXC_ITR_1 ;               '
'    beta1n       equals            FTNC+$KFTXC_LEG_1 ;               '
'    beta4n       equals            FTNC+$KFTXC_LEG_4 ;               '
'    phiksan      equals            FTNC+$KFTXC_KSPHI_1;              '
'    phikspn      equals            FTNC+$KFTXC_KSPHI_2;              '
'    angksan      equals            FTNC+$KFTXC_KSANG_1;              '
'    angkspn      equals            FTNC+$KFTXC_KSANG_2;              '
'    qtijn        equals            FTNC+$KFTXC_QW_TIJ_1;             '
'    qpt_prbn     equals            FTNC+$KFTXC_QPDT_1;               '
'    qpt_mqn      equals            FTNC+$KFTXC_QPDT_2;               '
'    qpt_nwn      equals            FTNC+$KFTXC_QPDT_4;               '
'    timksn       equals            FTNC+$KFTXC_KSTIM_1;              '
'  END_OF_NTUPLE; '    #.  This marks the end of the ntuple.
#.
